<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * CONFIDENTIAL AND PROPRIETARY SOURCE CODE. 
 * 
 * Use and distribution of this code is subject to applicable 
 * licenses and the permission of the code owner.  This notice 
 * does not indicate the actual or intended publication of 
 * this source code.
 * 
 * Portions developed for Camping World by BTM Global Consulting
 * LLC and are the property of Camping World.
 * 
 * ===== BTM Modification ===========================================
 * Scope/Bug ID#     ddMMyy        Description
 * BZ32208           160819        Jenkins build did not separate Xadmin's SQL files for each organization id
 * BZ25633           040220        [Oracle Fix] - Updates are not applying in order they are deployed by xadmin
 *===================================================================
 */ 
-->
<!--

This build script is run by the InstallX Install Builder.

After prompting the user to answer a series of questions about
the type of install to create, the appropriate targets in this
script will be executed to create an InstallX installer.

This script will unzip the raw output of the Xstore nightly
build process, database build process and customer build process
and then repackage the necessary application components based on
the OS and DB platform selected.

The UI used to gather customer properties to use in this build
script is defined in the antinstall-builder-config.xml located
in the /builder directory.

-->
<project name="Create InstallX Installer" default="usage" basedir=".">
  <target name="usage">
    <echo message="This build script should not be run directly. It should only be executed by the InstallX Builder." />
  </target>

  <property name="ix.appname" value="builder" />
    <property name="installer.runtime.dir" location="${basedir}/runtime" />

  <!-- import shared scripts -->
  <import file="./installer/common/init.xml" />

  <!-- import custom tasks -->
  <taskdef name="fileinfo" classname="dtv.installx.ant.taskdefs.FileInfo" classpathref="ix.cp" />
  <taskdef name="zipwithsummary" classname="dtv.installx.ant.taskdefs.ZipWithSummary" classpathref="ix.cp" />
  <taskdef name="warwithsummary" classname="dtv.installx.ant.taskdefs.WarWithSummary" classpathref="ix.cp" />
  <taskdef name="installer" classname="org.tp23.antinstaller.taskdefs.Installer" classpathref="ix.cp" />

  <target name="setsourceprops" description="Sets source locations when run in 'folder' mode">
    <!-- base locations -->
    <!-- determine whether or not the paths are relative, and proceed accordingly -->
    <condition property="Install.xstoretemp.raw" value="${user.dir}/${build.xstore.folder}" else="${build.xstore.folder}">
      <matches string="${build.xstore.folder}" pattern="^\..*$" />
    </condition>
    <condition property="Install.dbtemp.raw" value="${user.dir}/${build.db.folder}" else="${build.db.folder}">
      <matches string="${build.db.folder}" pattern="^\..*$" />
    </condition>
    <condition property="Install.xatemp.raw" value="${user.dir}/${build.xadmin.folder}" else="${build.xadmin.folder}">
      <matches string="${build.xadmin.folder}" pattern="^\..*$" />
    </condition>
    <condition property="Install.xadbtemp.raw" value="${user.dir}/${build.xadmindb.folder}" else="${build.xadmindb.folder}">
      <matches string="${build.xadmindb.folder}" pattern="^\..*$" />
    </condition>
    <condition property="Install.xcwartemp.raw" value="${user.dir}/${build.xcwar.folder}" else="${build.xcwar.folder}">
      <matches string="${build.xcwar.folder}" pattern="^\..*$" />
    </condition>
    <condition property="Install.servicestemp.raw" value="${user.dir}/${build.services.folder}" else="${build.services.folder}">
      <matches string="${build.services.folder}" pattern="^\..*$" />
    </condition>
    <condition property="Install.serviceswartemp.raw" value="${user.dir}/${build.services.war.folder}" else="${build.services.war.folder}">
      <matches string="${build.services.war.folder}" pattern="^\..*$" />
    </condition>
    <condition property="Install.xfgtemp.raw" value="${user.dir}/${build.xfg.folder}" else="${build.xfg.folder}">
      <matches string="${build.xfg.folder}" pattern="^\..*$" />
    </condition>
    <condition property="Install.xenvironmenttemp.raw" value="${user.dir}/${build.xenvironment.folder}" else="${build.xenvironment.folder}">
      <matches string="${build.xenvironment.folder}" pattern="^\..*$" />
    </condition>
    <condition property="build.cust.folder.raw" value="${user.dir}/${build.cust.folder}" else="${build.cust.folder}">
      <matches string="${build.cust.folder}" pattern="^\..*$" />
    </condition>
    <!-- set location-based properties that InstallX will use -->
    <!-- This location contains base xstore files -->
    <property name="Install.xstoretemp" location="${Install.xstoretemp.raw}" />
    <!-- This location contains base dbmake files -->
    <property name="Install.dbtemp" location="${Install.dbtemp.raw}" />
    <!-- This location contains the base xadmin war -->
    <property name="Install.xatemp" location="${Install.xatemp.raw}" />
    <!-- this location contains the base xadmin db scripts -->
    <property name="Install.xadbtemp" location="${Install.xadbtemp.raw}" />
    <!-- this location contains the base xcenter war -->
    <property name="Install.xcwartemp" location="${Install.xcwartemp.raw}" />
    <!-- this location contains base xservices components -->
    <property name="Install.servicestemp" location="${Install.servicestemp.raw}" />
    <!-- this location contains base xservices components -->
    <property name="Install.serviceswartemp" location="${Install.serviceswartemp.raw}" />
    <!-- this location contains the base xenvironment components -->
    <property name="Install.xenvironmenttemp" location="${Install.xenvironmenttemp.raw}" />
    <!-- This location contains base xfg files -->
    <property name="Install.xfgtemp" location="${Install.xfgtemp.raw}" />
    <!-- this location contains the customer overlay components -->
    <property name="build.cust.folder.fullyqualified" location="${build.cust.folder.raw}" />
    <!-- make our own copy of the overlay, since we do not want to make packaging modifications to the source -->
    <copy todir="${Install.xstoreoverlay.work}">
      <fileset dir="${build.cust.folder.fullyqualified}" />
    </copy>
    <!-- process detection/copy logic for Xenv customer overlay -->
    <if>
      <length string="${build.xenvcust.folder}" when="gt" length="0" />
      <then>
        <condition property="build.xenvcust.folder.raw" value="${user.dir}/${build.xenvcust.folder}" else="${build.xenvcust.folder}">
          <matches string="${build.xenvcust.folder}" pattern="^\..*$" />
        </condition>
        <property name="build.xenvcust.folder.fullyqualified" location="${build.xenvcust.folder.raw}" />
        <if>
          <available file="${build.xenvcust.folder.fullyqualified}" />
          <then>
            <copy todir="${Install.xenvoverlay.work}">
              <fileset dir="${build.xenvcust.folder.fullyqualified}" />
            </copy>
          </then> 
          <else>
            <echo message="A 'build.xenvcust.folder' value of ${build.xenvcust.folder} was provided, but couldn't be found.  No Xenvironment overlay will be included." />
            <mkdir dir="${Install.xenvoverlay.work}/environment" />
          </else>
        </if>
      </then>
      <else>
        <echo message="No 'build.xenvcust.folder' value was provided.  No Xenvironment overlay will be included." />
        <mkdir dir="${Install.xenvoverlay.work}/environment" />
      </else>
    </if>
  </target>

  <target name="unzip" description="Sets source locations and decompresses files when run in 'file' mode">
    <!-- base locations -->
    <!-- determine whether or not the paths are relative, and proceed accordingly -->
    <condition property="build.xstore.raw" value="${user.dir}/${build.xstore}" else="${build.xstore}">
      <matches string="${build.xstore}" pattern="^\..*$" />
    </condition>
    <condition property="build.db.raw" value="${user.dir}/${build.db}" else="${build.db}">
      <matches string="${build.db}" pattern="^\..*$" />
    </condition>
    <condition property="build.xadmin.raw" value="${user.dir}/${build.xadmin}" else="${build.xadmin}">
      <matches string="${build.xadmin}" pattern="^\..*$" />
    </condition>
    <condition property="build.xadmindb.raw" value="${user.dir}/${build.xadmindb}" else="${build.xadmindb}">
      <matches string="${build.xadmindb}" pattern="^\..*$" />
    </condition>
    <condition property="build.xcwar.raw" value="${user.dir}/${build.xcwar}" else="${build.xcwar}">
      <matches string="${build.xcwar}" pattern="^\..*$" />
    </condition>
    <condition property="build.services.raw" value="${user.dir}/${build.services}" else="${build.services}">
      <matches string="${build.services}" pattern="^\..*$" />
    </condition>
    <condition property="build.services.war.raw" value="${user.dir}/${build.services.war}" else="${build.services.war}">
      <matches string="${build.services.war}" pattern="^\..*$" />
    </condition>
    <condition property="build.xenvironment.raw" value="${user.dir}/${build.xenvironment}" else="${build.xenvironment}">
      <matches string="${build.xenvironment}" pattern="^\..*$" />
    </condition>
    <condition property="build.xfg.raw" value="${user.dir}/${build.xfg}" else="${build.xfg}">
      <matches string="${build.xfg}" pattern="^\..*$" />
    </condition>
    <condition property="build.cust.raw" value="${user.dir}/${build.cust}" else="${build.cust}">
      <matches string="${build.cust}" pattern="^\..*$" />
    </condition>
    <!-- This location contains base xstore files -->
    <property name="build.xstore.fullyqualified" location="${build.xstore.raw}" />
    <!-- This location contains base dbmake files -->
    <property name="build.db.fullyqualified" location="${build.db.raw}" />
    <!-- This location contains the base xadmin war -->
    <property name="build.xadmin.fullyqualified" location="${build.xadmin.raw}" />
    <!-- this location contains the base xadmin db scripts -->
    <property name="build.xadmindb.fullyqualified" location="${build.xadmindb.raw}" />
    <!-- this location contains the base xcenter war -->
    <property name="build.xcwar.fullyqualified" location="${build.xcwar.raw}" />
    <!-- this location contains the base xservices components -->
    <property name="build.services.fullyqualified" location="${build.services.raw}" />
    <!-- this location contains the base xservices WAR components -->
    <property name="build.services.war.fullyqualified" location="${build.services.war.raw}" />
    <!-- This location contains base xenvironment files -->
    <property name="build.xenvironment.fullyqualified" location="${build.xenvironment.raw}" />
    <!-- This location contains base xfg files -->
    <property name="build.xfg.fullyqualified" location="${build.xfg.raw}" />
    <!-- this location contains the customer overlay components -->
    <property name="build.cust.fullyqualified" location="${build.cust.raw}" />
    <!-- set path properties -->
    <!-- This location contains base xstore files -->
    <property name="Install.xstoretemp" location="${work.dir}/xstore" />
    <!-- This location contains base dbmake files -->
    <property name="Install.dbtemp" location="${work.dir}/dbtemp" />
    <!-- This location contains the base xadmin war -->
    <property name="Install.xatemp" location="${work.dir}/xadmintemp" />
    <!-- this location contains the base xadmin db scripts -->
    <property name="Install.xadbtemp" location="${work.dir}/xadbtemp" />
    <!-- this location contains the base xcenter war -->
    <property name="Install.xcwartemp" location="${work.dir}/xcwartemp" />
    <!-- this location contains the base xservices components -->
    <property name="Install.servicestemp" location="${work.dir}/servicestemp" />
    <!-- this location contains the base xservices WAR components -->
    <property name="Install.serviceswartemp" location="${work.dir}/serviceswartemp" />
    <!-- This location contains base xenvironment files -->
    <property name="Install.xenvironmenttemp" location="${work.dir}/xenvironment" />
    <!-- This location contains base xfg files -->
    <property name="Install.xfgtemp" location="${work.dir}/xfg" />
    <!-- create the directories -->
    <mkdir dir="${Install.xstoretemp}" />
    <mkdir dir="${Install.dbtemp}" />
    <mkdir dir="${Install.xatemp}" />
    <mkdir dir="${Install.xadbtemp}" />
    <mkdir dir="${Install.xcwartemp}" />
    <mkdir dir="${Install.servicestemp}" />
    <mkdir dir="${Install.xenvironmenttemp}" />
    <mkdir dir="${Install.xfgtemp}" />
    <!-- extract files into the directories -->
    <unzip src="${build.xstore.fullyqualified}" dest="${Install.xstoretemp}" />
    <unzip src="${build.db.fullyqualified}" dest="${Install.dbtemp}" />
    <unzip src="${build.xfg.fullyqualified}" dest="${Install.xfgtemp}" />
    <if>
      <istrue value="${package-xadmin}" />
      <then>
        <unwar src="${build.xadmin.fullyqualified}" dest="${Install.xatemp}" />
        <unzip src="${build.xadmindb.fullyqualified}" dest="${Install.xadbtemp}" />
      </then>
    </if>
    <if>
      <istrue value="${package-xcenter}" />
      <then>
        <unwar src="${build.xcwar.fullyqualified}" dest="${Install.xcwartemp}" />
      </then>
    </if>
    <if>
      <istrue value="${package-xservices}" />
      <then>
        <unzip src="${build.services.fullyqualified}" dest="${Install.servicestemp}" />
        <unwar src="${build.services.war.fullyqualified}" dest="${Install.serviceswartemp}" />
      </then>
    </if>
    <if>
      <istrue value="${package-xenvironment}" />
      <then>
        <unzip src="${build.xenvironment.fullyqualified}" dest="${Install.xenvironmenttemp}" />
        
        <!-- process detection/copy logic for Xenv customer overlay -->
        <if>
          <length string="${build.xenvcust}" when="gt" length="0" />
          <then>
            <condition property="build.xenvcust.raw" value="${user.dir}/${build.xenvcust}" else="${build.xenvcust}">
              <matches string="${build.xenvcust}" pattern="^\..*$" />
            </condition>
            <property name="build.xenvcust.fullyqualified" location="${build.xenvcust.raw}" />
            <if>
              <available file="${build.xenvcust.fullyqualified}" />
              <then>
                <unzip src="${build.xenvcust.fullyqualified}" dest="${Install.xenvoverlay.work}" />
              </then> 
              <else>
                <echo message="A 'build.xenvcust' value of ${build.xenvcust} was provided, but couldn't be found.  No Xenvironment overlay will be included." />
                <mkdir dir="${Install.xenvoverlay.work}/environment" />
              </else>
            </if>
          </then>
          <else>
            <echo message="No 'build.xenvcust' value was provided.  No Xenvironment overlay will be included." />
            <mkdir dir="${Install.xenvoverlay.work}/environment" />
          </else>
        </if>
      </then>
    </if>
    <unzip src="${build.cust.fullyqualified}" dest="${Install.xstoreoverlay.work}" />
  </target>

  <target name="init" depends="init-properties,start-logging,init-directories,init-filters" description="Set common properties and check conditions">
    <!-- immediately fail if we don't recognize the x.source.type -->
    <fail message="x.source.type is set to '${x.source.type}'!  Only 'files' and 'folders' are supported.">
      <condition>
        <and>
          <not>
            <contains string="${x.source.type}" substring="files" />
          </not>
          <not>
            <contains string="${x.source.type}" substring="folders" />
          </not>
        </and>
      </condition>
    </fail>

    <!-- immediately fail if we don't recognize the platform.db -->
    <fail message="Could not recognize the supplied platform.db value of [${platform.db}].  Supported types are mssql, mssql-unicode, and oracle.">
      <condition>
        <not>
          <or>
            <equals arg1="${platform.db}" arg2="mssql" forcestring="true" />
            <equals arg1="${platform.db}" arg2="mssql-unicode" forcestring="true" />
            <equals arg1="${platform.db}" arg2="oracle" forcestring="true" />
            <equals arg1="${platform.db}" arg2="oraclepdb" forcestring="true" />
          </or>
        </not>
      </condition>
    </fail>

    <!-- handle platform exclusion properties -->
    <condition property="excludeLinux32">
      <istrue value="${disable.32bit.linux}" />
    </condition>
    <condition property="excludeLinux64">
      <istrue value="${disable.64bit.linux}" />
    </condition>
    <condition property="excludeWindows32">
      <istrue value="${disable.32bit.windows}" />
    </condition>
    <condition property="excludeWindows64">
      <istrue value="${disable.64bit.windows}" />
    </condition>

    <!-- prep xstore.install.properties file -->
    <writexstoreinstallproperties />

    <!-- Set build comp file names -->
    <property name="ixbldcomp.xstorepos" value="${work.dir}/xstorepos-bldcomp.txt" />
    <property name="ixbldcomp.xstoreoffice" value="${work.dir}/xstoreoffice-bldcomp.txt" />
    <property name="ixbldcomp.xstorecommon" value="${work.dir}/xstorecommon-bldcomp.txt" />

    <!-- Create App Version File -->
    <property name="versionfile" value="${Install.xstoreoverlay.work}/appversion.properties" />
    <concat destfile="${versionfile}">Xstore Version
  BASE:  ${x.version}
  CUST:  ${cust.version} ${customer.id}
  PATCH: ${patch.version}

  BUILT: ${now.long}
  USER:  ${user.name}

    </concat>
    <concat destfile="${versionfile}" append="true">
      <fileset file="${basedir}/installx.version.properties" />
    </concat>
  </target>

  <macrodef name="writexstoreinstallproperties">
    <attribute name="file" default="${basedir}/xstore.install.properties" />
    <attribute name="type" default="install" />
    <attribute name="dontCleanCustConfig" default="${donot.clean.cust_config}"/>
    <sequential>
      <propertyfile file="@{file}">
        <entry key="platform.db" value="${platform.db}" />
        <entry key="install.type" value="@{type}" />
        <entry key="x.version" value="${x.version}" />
        <entry key="cust.version" value="${cust.version}" />
        <entry key="patch.version" value="${patch.version}" />
        <entry key="customer.id" value="${customer.id}" />
        <entry key="customerId.salt" value="${customerId.salt}" />
        <entry key="customer.id.lc" value="${customer.id.lc}" />
        <entry key="customer.brand" value="${customer.brand}" />
        <entry key="db.create" value="${db.create}" />
        <entry key="donot.launch.xstore" value="${donot.launch.xstore}" />
        <entry key="donot.clean.cust_config" value="@{dontCleanCustConfig}"/>
        <entry key="force.deployment.enabled" value="${force.deployment.enabled}" />
        <entry key="mssql-dfunc" value="${mssql.dfunc}" />
        <entry key="mssql-unicode-dfunc" value="${mssql.dfunc}" />
        <entry key="oracle-dfunc" value="${oracle.dfunc}" />
        <entry key="oraclepdb-dfunc" value="${oracle.dfunc}" />
        <entry key="mssql-efunc" value="${mssql.efunc}" />
        <entry key="mssql-unicode-efunc" value="${mssql.efunc}" />
        <entry key="oracle-efunc" value="${oracle.efunc}" />
        <entry key="oraclepdb-efunc" value="${oracle.efunc}" />
        <entry key="upgrade.removeConfiguratorPatches" value="${upgrade.removeConfiguratorPatches}" />
        <entry key="donot.maintain.receiptLogo" value="${donot.maintain.receiptLogo}" />
        <entry key="ix.subdir" value="${ix.subdir}" />
      </propertyfile>
    </sequential>
  </macrodef>

  <target name="init-filters" description="Initializes filters that are used during building">
    <!-- set up a filter that is used when creating Xcenter create/data scripts -->
    <if>
      <isset property="isoracleororaclepdb" />
      <then>
        <if>
          <and>
            <isset property="xcenter.oracle.tablespace" />
            <length string="${xcenter.oracle.tablespace}" trim="true" when="gt" length="0" />
          </and>
          <then>
            <property name="effective.xcenter.oracle.tablespace" value="${xcenter.oracle.tablespace}" />
          </then>
          <else>
            <echo message="The property xcenter.oracle.tablespace was either not provided or was provided with a blank value.  Defaulting it to &quot;xstore&quot;." />
            <property name="effective.xcenter.oracle.tablespace" value="xstore" />
          </else>
        </if>
        <if>
          <and>
            <isset property="xcenter.oracle.dbuser" />
            <length string="${xcenter.oracle.dbuser}" trim="true" when="gt" length="0" />
          </and>
          <then>
            <property name="effective.xcenter.oracle.dbuser" value="${xcenter.oracle.dbuser}" />
          </then>
          <else>
            <echo message="The property xcenter.oracle.dbuser was either not provided or was provided with a blank value.  Defaulting it to &quot;pos&quot;." />
            <property name="effective.xcenter.oracle.dbuser" value="pos" />
          </else>
        </if>
        <if>
          <and>
            <isset property="xcenter.oracle.schemaowner" />
            <length string="${xcenter.oracle.schemaowner}" trim="true" when="gt" length="0" />
          </and>
          <then>
            <property name="effective.xcenter.oracle.schemaowner" value="${xcenter.oracle.schemaowner}" />
          </then>
          <else>
            <echo message="The property xcenter.oracle.schemaowner was either not provided or was provided with a blank value.  Defaulting it to &quot;dtv&quot;." />
            <property name="effective.xcenter.oracle.schemaowner" value="dtv" />
          </else>
        </if>

        <filterchain id="xcenter.dbscript.token.filter">
          <tokenfilter>
            <replacestring from="$(DbTblspace)" to="${effective.xcenter.oracle.tablespace}" />
            <replacestring from="$(DbUser)" to="${effective.xcenter.oracle.dbuser}" />
            <replacestring from="$(DbSchema)" to="${effective.xcenter.oracle.schemaowner}" />
          </tokenfilter>
        </filterchain>
      </then>
      <else>
        <filterchain id="xcenter.dbscript.token.filter" />
      </else>
    </if>
  </target>


  <target name="init-properties" description="Initializes properties that are used during building">
    <!-- this is required to pick up builder properties -->
    <property file="${basedir}/installx.properties" />

    <!-- set a dist directory - If it is supplied in the ant.install.properties, use that value.  Otherwise use a folder named dist in the user.dir. -->
    <condition property="dist.dir.pre" value="${user.dir}/distro" else="${distDir}">
      <length string="${distDir}" trim="true" when="less" length="1" />
    </condition>
    <property name="dist.dir" location="${dist.dir.pre}" />

    <!-- set properties that are not overriden in properties file -->
    <property name="distv" value="${x.version}_${cust.version}" />
    <property name="distVdir" value="${dist.dir}/${distv}" />
    <property name="work.dir" location="${dist.dir}/../work" />

    <!-- set intermediate output paths -->
    <property name="xstorepos.distVdir" location="${distVdir}/xstorepos" />
    <property name="xstoreoffice.distVdir" location="${distVdir}/xstoreoffice" />
    <property name="xstorecommon.distVdir" location="${distVdir}/xstorecommon" />

    <!-- set output paths -->
    <property name="xstore.dist.dir" location="${xstorepos.distVdir}/pos" />
    <property name="xstore.mobile.dist.dir" location="${xstore.dist.dir}/mobile" />
    <property name="xfg.dist.dir" location="${xstorepos.distVdir}/xfg" />
    <property name="xservices.dist.dir" location="${xstorepos.distVdir}/xservices" />
    <property name="xenvironment.dist.dir" location="${xstorepos.distVdir}/xenvironment" />
    <property name="posloggen.dist.dir" location="${xstoreoffice.distVdir}/tools/poslog" />
    <property name="dataloader.dist.dir" location="${xstoreoffice.distVdir}/tools/dataloader" />
    <property name="xcenter.dist.dir" location="${xstoreoffice.distVdir}/xcenter" />
    <property name="genkeys.dist.dir" location="${xstorecommon.distVdir}/tools/genkeys" />
    <property name="jrepackager.dist.dir" location="${xstorecommon.distVdir}/tools/jrepackager" />

    <!-- declare properties that will be used during packaging -->
    <!-- overlay locations -->
    <!-- this location contains files that have been prepared for use inclusion in installers -->
    <property name="Install.dist.work" value="${work.dir}/dist" />
    <!-- this location contains the xstore customer overlay components -->
    <property name="Install.xstoreoverlay.work" value="${work.dir}/xstorework" />
    <!-- this location contains the xenvironment customer overlay components -->
    <property name="Install.xenvoverlay.work" value="${work.dir}/xenvwork" />
    <!-- this is the database location in the xcenter work folder -->
    <property name="Install.xstoreoverlay.database.work" value="${Install.xstoreoverlay.work}/xstore/database" />

    <!-- declare other properties that reference InstallX resources that will be used during packaging -->
    <property name="Install.resources" value="resources" />
    <!-- this is the resources folder from the installx project (some of these files are modified during packaging) -->
    <property name="Install.common" value="installer/common" />
    <!-- this is the installer/common folder in the installx project -->
    <property name="Install.lib" value="lib" />
    <!-- this is the lib folder in the installx project -->

    <!-- support packing a list of extra lib files via override from the overlay for dataloader and poslog generator installs (use ant fileset notation) -->
    <property name="dataloader.extra.lib.files" value="" />
    <property name="dataloader.extra.lib.ext.files" value="" />
    <property name="posloggen.extra.lib.files" value="" />
    <property name="posloggen.extra.lib.ext.files" value="" />

    <!-- Set customer ID to lowercase in property -->
    <script language="javascript">project.setProperty("customer.id.lc", project.getProperty("customer.id").toLowerCase());</script>

    <!-- Check to see if a brand was set -->
    <condition property="has.brand" value="-${customer.brand}" else="">
      <length string="${customer.brand}" when="greater" length="0" />
    </condition>

    <!-- Set the customer jar file paths -->
    <property name="custposjarname" value="${customer.id.lc}-pos.jar" />
    <property name="custposjar" value="${Install.xstoreoverlay.work}/xstore/lib/${custposjarname}" />
    <property name="custconfigjarname" value="${customer.id.lc}-config.jar" />
    <property name="custconfigjar" value="${Install.xstoreoverlay.work}/xstore/lib/${custconfigjarname}" />
    <property name="custxenvjarname" value="${customer.id.lc}-xenv.jar" />
    <property name="custxenvjar" value="${Install.xenvoverlay.work}/environment/lib/${custenvjarname}" />
    <property name="custxenvconfigjarname" value="${customer.id.lc}-xenvconfig.jar" />
    <property name="custxenvconfigjar" value="${Install.xenvoverlay.work}/environment/lib/${custxenvconfigjarname}" />

    <!-- Determine the Xcenter Org ID -->
    <property name="default.xcenter.org" value="1" />
    <condition property="xc.orgid" value="${xcenter.org}" else="${default.xcenter.org}">
      <length string="${xcenter.org}" when="greater" length="0" />
    </condition>

    <!-- database-platform-specific properties -->
    <property name="mssql.dfunc" value="GETDATE()" />
    <property name="oracle.dfunc" value="SYSDATE" />
    <property name="mssql.efunc" value="GO" />
    <property name="oracle.efunc" value="EXIT;" />
    <condition property="platform.db.dfunc" value="${mssql.dfunc}" else="${oracle.dfunc}">
      <isset property="ismssqlormssqlunicode" />
    </condition>
    <condition property="platform.db.efunc" value="${mssql.efunc}" else="${oracle.efunc}">
      <isset property="ismssqlormssqlunicode" />
    </condition>
    <!-- hardware-related proeprties -->
    <condition property="isDatalogic">
      <istrue value="${datalogic}" />
    </condition>
    <condition property="isDigitalPersona">
      <istrue value="${digitalpersona}" />
    </condition>
    <condition property="isEpson">
      <istrue value="${epson}" />
    </condition>
    <condition property="isFuji">
      <istrue value="${fuji}" />
    </condition>
    <condition property="isHoneywell">
      <istrue value="${honeywell}" />
    </condition>
    <condition property="isIngenico">
      <istrue value="${ingenico}" />
    </condition>
    <condition property="isVerifone">
      <istrue value="${verifone}" />
    </condition>
    <condition property="isZebra">
      <istrue value="${zebra}" />
    </condition>
    <condition property="isIsd">
      <istrue value="${isd}" />
    </condition>
    <condition property="isAjb">
      <istrue value="${ajb}" />
    </condition>
    <!-- customization properties -->
    <condition property="xadmin.is.custom">
      <istrue value="${is.xadmin.custom}" />
    </condition>
    <condition property="xcenter.is.custom">
      <istrue value="${is.xcenter.custom}" />
    </condition>
  </target>

  <target name="init-directories" description="Prepares directories that are used during building.">
    <!-- log the effective dist directory -->
    <echo message="Proceeding using a distro dir of: ${dist.dir}" />

    <!-- clean the temp directory -->
    <clean-temp />

    <!-- Delete dist/work dirs if they exist -->
    <delete dir="${dist.dir}" />

    <!-- Create the distro dir -->
    <mkdir dir="${dist.dir}" />

    <!-- Create work directories -->
    <mkdir dir="${Install.dist.work}" />
    <mkdir dir="${Install.xstoreoverlay.work}" />
    <mkdir dir="${Install.xstoreoverlay.database.work}" />
    <mkdir dir="${Install.xenvoverlay.work}" />

    <!-- establish an empty fileset that can be referenced in areas where real filesets cannot or should not be used -->
    <fileset id="installx.builder.empty.fileset" dir="." excludes="**" />
  </target>

  <target name="start-logging" description="Begin logging to console/file and build comp">
    <record name="installx-builder.log" />

    <tstamp>
      <format property="start.time" pattern="EEEE, MMMM d, yyyy hh:mm:ss aa zzz" />
    </tstamp>

    <echo message="" />
    <echo message="**************************************************************" />
    <echo message="*     InstallX: Oracle Retail | InstallX Builder ${ix.version}" />
    <echo message="*   WorkingDir: ${work.dir}" />
    <echo message="*                                                              " />
    <echo message="*                                                             " />
    <echo message="*       Run By: ${user.name} on ${now.long}" />
    <echo message="*          JVM: ${java.vm.vendor} v${java.vm.version}" />
    <echo message="*           OS: ${os.name} ${os.arch} v${os.version}" />
    <echo message="*                                                             " />
    <echo message="*  CUSTOMER/VERSION: ${customer.id} | SALT: ${customerId.salt} | ${x.version} - ${cust.version} - ${patch.version}" />
    <echo message="*        TYPE/OS/DB: ${x.type} | ${platform.db}" />
    <echo message="*   AUTO CREATE DB?: ${db.create}" />
    <echo message="*           STARTED: ${start.time}" />
    <echo message="**************************************************************" />
    <echo message="" />
  </target>


  <target name="package-pos" depends="prep-overlay,build-db-zip" description="Build the Xstore POS application" unless="isPatch">
    <for list="${x.type}" param="type" trim="true">
      <sequential>
        <packagepos type="@{type}" />
      </sequential>
    </for>

    <!-- package mobile components if appropriate -->
    <if>
      <and>
        <istrue value="${mobile.components.enabled}" />
      </and>
      <then>
        <if>
          <and>
            <isset property="xstore.mobile.android.file" />
            <length string="${xstore.mobile.android.file}" trim="true" when="greater" length="0" />
          </and>
          <then>
            <condition property="xstore.mobile.android.file.normalized.raw" value="${user.dir}/${xstore.mobile.android.file}" else="${xstore.mobile.android.file}">
              <matches string="${xstore.mobile.android.file}" pattern="^\..*$" />
            </condition>
            <property name="xstore.mobile.android.file.normalized" location="${xstore.mobile.android.file.normalized.raw}" />
            <if>
              <available file="${xstore.mobile.android.file}" type="file" />
              <then>
                <echo message="Adding Android app file from ${xstore.mobile.android.file.normalized}." />
                <mkdir dir="${xstore.mobile.dist.dir}" />
                <copy file="${xstore.mobile.android.file.normalized}" tofile="${xstore.mobile.dist.dir}/Xstore.apk" />
              </then>
              <else>
                <echo message="An Android app file path of '${xstore.mobile.android.file}' was provided, but that file does not appear to exist and could not be packaged." />
              </else>
            </if>
          </then>
        </if>
        <if>
          <and>
            <isset property="xstore.mobile.ios.file" />
            <length string="${xstore.mobile.ios.file}" trim="true" when="greater" length="0" />
          </and>
          <then>
            <condition property="xstore.mobile.ios.file.normalized.raw" value="${user.dir}/${xstore.mobile.ios.file}" else="${xstore.mobile.ios.file}">
              <matches string="${xstore.mobile.ios.file}" pattern="^\..*$" />
            </condition>
            <property name="xstore.mobile.ios.file.normalized" location="${xstore.mobile.ios.file.normalized.raw}" />
            <if>
              <available file="${xstore.mobile.ios.file.normalized}" type="file" />
              <then>
                <echo message="Adding iOS app file from ${xstore.mobile.ios.file.normalized}." />
                <mkdir dir="${xstore.mobile.dist.dir}" />
                <if>
                  <matches string="${xstore.mobile.ios.file.normalized}" pattern=".*\.xcarchive" />
                  <then>
                    <copy file="${xstore.mobile.ios.file.normalized}" tofile="${xstore.mobile.dist.dir}/Xstore.xcarchive" />
                  </then>
                  <else>
                    <copy file="${xstore.mobile.ios.file.normalized}" tofile="${xstore.mobile.dist.dir}/Xstore.ipa" />
                  </else>
                </if>
              </then>
              <else>
              <echo message="An iOS app file path of '${xstore.mobile.ios.file}' was provided, but that file does not appear to exist and could not be packaged." />
              </else>
            </if>
          </then>
        </if>
        <if>
          <and>
            <isset property="xstore.mobile.windows.file" />
            <length string="${xstore.mobile.windows.file}" trim="true" when="greater" length="0" />
          </and>
          <then>
            <condition property="xstore.mobile.windows.file.normalized.raw" value="${user.dir}/${xstore.mobile.windows.file}" else="${xstore.mobile.windows.file}">
              <matches string="${xstore.mobile.windows.file}" pattern="^\..*$" />
            </condition>
            <property name="xstore.mobile.windows.file.normalized" location="${xstore.mobile.windows.file.normalized.raw}" />
            <if>
              <available file="${xstore.mobile.windows.file.normalized}" type="file" />
              <then>
                <echo message="Adding Windows app file from ${xstore.mobile.windows.file.normalized}." />
                <mkdir dir="${xstore.mobile.dist.dir}" />
                <copy file="${xstore.mobile.windows.file.normalized}" tofile="${xstore.mobile.dist.dir}/Xstore.appxbundle" />
              </then>
              <else>
                <echo message="A Windows app file path of '${xstore.mobile.windows.file}' was provided, but that file does not appear to exist and could not be packaged." />
              </else>
            </if>
          </then>
        </if>
      </then>
    </if>
  </target>

  <macrodef name="packagepos">
    <attribute name="type" />
    <sequential>
      <echo message="Packaging Xstore for: @{type}" />

      <!-- define local conditions to guide packaging -->
      <local name="posPackageIsInstall" />
      <local name="posPackageIsUpgrade" />
      <condition property="posPackageIsInstall">
        <contains string="@{type}" substring="install" />
      </condition>
      <condition property="posPackageIsUpgrade">
        <contains string="@{type}" substring="upgrade" />
      </condition>

      <!-- define the patterns that will be included in the distro -->
      <patternset id="xstore.distro.files">
        <!-- JRE folders should not be delivered.  They should only contain overlay details, which will be included in the JRE package -->
        <exclude name="linux/jre/**" />
        <exclude name="linux_64/jre/**" />
        <exclude name="windows/jre/**" />
        <exclude name="windows_64/jre/**" />
        <!-- Exclude mobile files -->
        <exclude name="mobile/**" />
        <exclude name="system_mobile.properties" />
        <exclude name="system_tablet.properties" />
        <exclude name="lib/ext/jetty/**" />
        <!-- Excludes based on operating system -->
        <exclude name="linux/**" if="excludeLinux32" />
        <exclude name="lib/linux/**" if="excludeLinux32" />
        <exclude name="windows/**" if="excludeWindows32" />
        <exclude name="lib/windows/**" if="excludeWindows32" />
        <exclude name="linux_64/**" if="excludeLinux64" />
        <exclude name="lib/linux_64/**" if="excludeLinux64" />
        <exclude name="windows_64/**" if="excludeWindows64" />
        <exclude name="lib/windows_64/**" if="excludeWindows64" />
        <!-- exclude all shell scripts and batch files -->
        <exclude name="linux/script/**" />
        <exclude name="linux_64/script/**" />
        <exclude name="windows/script/**" />
        <exclude name="windows_64/script/**" />
        <exclude name="*.sh" />
        <exclude name="*.bat" />
        <!-- exclude installx config files -->
        <exclude name="installx/**" />
        <!-- Excludes based on install type -->
        <exclude name="log/**" unless="posPackageIsInstall" />
        <exclude name="res/keys/**" unless="posPackageIsInstall" />
        <exclude name="res/binfile/**" unless="posPackageIsInstall" />
        <exclude name="database/**" />
        <exclude name="download/**" />
        <exclude name="updates/**" />
        <exclude name="upload/**" />
        <!-- exclude download.zip file regardless of the install type since it will be extracted if needed -->
        <exclude name="download/download.zip" />
        <!-- Excludes based on hardware type -->
        <exclude name="res/hardware/datalogic/**" unless="isDatalogic" />
        <exclude name="lib/ext/DLSJavaPOS*.jar" unless="isDatalogic" />
        <exclude name="res/hardware/digitalpersona/**" unless="isDigitalPersona" />
        <exclude name="res/hardware/crossmatch/**" unless="isDigitalPersona" />
        <exclude name="lib/ext/dpot*.jar" unless="isDigitalPersona" />
        <exclude name="lib/ext/dpuareu*.jar" unless="isDigitalPersona" />
        <exclude name="lib/ext/dpjavapos*.jar" unless="isDigitalPersona" />
        <exclude name="lib/ext/epsonjpos/**" unless="isEpson" />
        <exclude name="res/hardware/epson/**" unless="isEpson" />
        <exclude name="lib/ext/FTXSJpos*.jar" unless="isFuji" />
        <exclude name="res/hardware/honeywell/**" unless="isHoneywell" />
        <exclude name="lib/ext/mtlgjpos*.jar" unless="isHoneywell" />
        <exclude name="res/i65XX/**" unless="isIngenico" />
        <exclude name="res/iSCXX0/**" unless="isIngenico" />
        <exclude name="res/hardware/ingenico/**" unless="isIngenico" />
        <exclude name="lib/ext/ijpos*.jar" unless="isIngenico" />
        <exclude name="res/verifone/**" unless="isVerifone" />
        <exclude name="res/hardware/verifone/**" unless="isVerifone" />
        <exclude name="lib/ext/vfjpos*.jar" unless="isVerifone" />
        <exclude name="lib/ext/Zebra*.jar" unless="isZebra" />
        <!-- Excludes based on payment systems -->
        <exclude name="lib/ext/isd/**" unless="isIsd" />
        <exclude name="lib/ext/ajb-fipay-connect.jar" unless="isAjb" />
        <!-- Excludes based on database platform -->
        <exclude name="lib/ext/sqljdbc*.jar" unless="ismssqlormssqlunicode" />
        <!-- General excludes -->
        <exclude name="build-common.xml" />
        <exclude name="lib/build-common.xml" />
        <exclude name="lib/ext/build/**" />
        <exclude name="lib/ext/src/**" />
        <exclude name="scripts/*.*" />
      </patternset>
      <patternset id="xstore.pos.distro.files">
        <include name="database/**" />
        <include name="download/**" if="posPackageIsInstall" />
        <include name="updates/**" />
        <include name="upload/**" />
        <include name="linux/script/**" unless="excludeLinux32" />
        <include name="linux_64/script/**" unless="excludeLinux64" />
        <include name="windows/script/**" unless="excludeWindows32" />
        <include name="windows_64/script/**" unless="excludeWindows64" />
        <include name="*.bat" />
        <include name="*.sh" />
        <exclude name="updates/*xstore.properties" unless="posPackageIsInstall" />
        <exclude name="updates/base-xstore.upgrade.properties" unless="posPackageIsUpgrade" />
        <exclude name="**/*mobile*.bat" />
        <exclude name="**/*mobile*.sh" />
        <exclude name="**/*tablet*.bat" />
        <exclude name="**/*tablet*.sh" />
        <exclude name="*mobile*.properties" />
        <exclude name="**/*xfg*.bat" />
        <exclude name="**/*xfg*.sh" />
      </patternset>
      <patternset id="xstore.mobile.distro.files">
        <include name="linux/script/*mobile*" unless="excludeLinux32" />
        <include name="linux_64/script/*mobile*" unless="excludeLinux64" />
        <include name="windows/script/*mobile*" unless="excludeWindows32" />
        <include name="windows_64/script/*mobile*" unless="excludeWindows64" />
        <include name="linux/script/*tablet*" unless="excludeLinux32" />
        <include name="linux_64/script/*tablet*" unless="excludeLinux64" />
        <include name="windows/script/*tablet*" unless="excludeWindows32" />
        <include name="windows_64/script/*tablet*" unless="excludeWindows64" />
        <include name="mobile/**" />
        <include name="lib/ext/jetty/**" />
        <include name="system_mobile.properties" />
        <include name="system_tablet.properties" />
        <include name="*mobile*.bat" />
        <include name="*mobile*.sh" />
        <include name="*tablet*.bat" />
        <include name="*tablet*.sh" />
      </patternset>
      <patternset id="xstore.xfg.distro.files">
        <include name="gserver/**/*" />
        <include name="lib/**" />
        <include name="recordings/**" />
        <include name="res/**" />
        <include name="scale/**/*" />
        <include name="system_xfg.properties" />
      </patternset>
      <patternset id="xstore.xfg.pos.distro.files">
        <include name="linux/script/*xfg*" unless="excludeLinux32" />
        <include name="linux_64/script/*xfg*" unless="excludeLinux64" />
        <include name="windows/script/*xfg*" unless="excludeWindows32" />
        <include name="windows_64/script/*xfg*" unless="excludeWindows64" />
        <include name="*xfg*.bat" />
        <include name="*xfg*.sh" />
      </patternset>

      <!-- define properties for output -->
      <local name="xzip" />
      <local name="xzip.pos" />
      <local name="xzip.mobile" />
      <local name="xzip.xfg" />
      <local name="xprop" />
      <local name="pos.out.dir" />
      <property name="xzip" value="xstore-pos.zip" />
      <property name="xzip.pos" value="xstore-pos-pos.zip" />
      <property name="xzip.mobile" value="xstore-pos-mobile.zip" />
      <property name="xzip.xfg" value="xstore-pos-xfg.zip" />
      <property name="xprop" value="xstore.install.properties" />
      <property name="pos.out.dir" location="${Install.dist.work}/@{type}" />

      <!-- clean up any previously existing files, should they exist -->
      <delete>
        <fileset dir="${pos.out.dir}" erroronmissingdir="false">
          <include name="${xzip}" />
          <include name="${xzip.pos}" />
          <include name="${xzip.mobile}" />
          <include name="${xzip.xfg}" />
        </fileset>
      </delete>

      <!-- create the distro and work dirs -->
      <mkdir dir="${xstore.dist.dir}" />
      <mkdir dir="${pos.out.dir}" />

      <!-- create the archives for the install package -->
      <switch value="@{type}">
        <case value="update">
          <parallel>
            <!-- common files -->
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${pos.out.dir}/${xzip}">
              <!-- App Version Properties File -->
              <zipfileset file="${versionfile}" />
              <!-- Customer Build -->
              <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
                <patternset refid="xstore.distro.files" />
              </zipfileset>
            </zipwithsummary>
            <!-- pos-specific files -->
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${pos.out.dir}/${xzip.pos}">
              <!-- App Version Properties File -->
              <zipfileset file="${versionfile}" />
              <!-- Customer Build -->
              <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
                <patternset refid="xstore.pos.distro.files" />
              </zipfileset>
              <!-- InstallX Resources -->
              <zipfileset dir="${Install.resources}/pos">
                <exclude name="updates/*xstore.properties" />
                <exclude name="linux/**" if="excludeLinux32" />
                <exclude name="linux_64/**" if="excludeLinux64" />
                <exclude name="windows/**" if="excludeWindows32" />
                <exclude name="windows_64/**" if="excludeWindows64" />
              </zipfileset>
            </zipwithsummary>
            <!-- mobile-specific files -->
            <if>
              <istrue value="${mobile.components.enabled}" />
              <then>
                <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${pos.out.dir}/${xzip.mobile}">
                  <!-- App Version Properties File -->
                  <zipfileset file="${versionfile}" />
                  <!-- Customer Build -->
                  <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
                    <patternset refid="xstore.mobile.distro.files" />
                  </zipfileset>
                  <!-- InstallX Resources -->
                  <zipfileset dir="${Install.resources}/pos-mobile">
                    <patternset refid="xstore.mobile.distro.files" />
                  </zipfileset>
                </zipwithsummary>
              </then>
            </if>
          </parallel>
        </case>
        <default>
          <parallel>
            <!-- Compress install-type-agnostic components -->
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${pos.out.dir}/${xzip}">
              <!-- App Version Properties File -->
              <zipfileset file="${versionfile}" />
              <!-- overlay files -->
              <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
                <patternset refid="xstore.distro.files" />
              </zipfileset>
              <!-- base files -->
              <zipfileset dir="${Install.xstoretemp}/xstore">
                <patternset refid="xstore.distro.files" />
              </zipfileset>
            </zipwithsummary>
            <!-- compress pos-specific components -->
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${pos.out.dir}/${xzip.pos}">
              <!-- overlay files -->
              <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
                <patternset refid="xstore.pos.distro.files" />
              </zipfileset>
              <!-- installx files -->
              <zipfileset dir="${Install.resources}/pos">
                <exclude name="updates/base-xstore.properties" unless="posPackageIsInstall" />
                <exclude name="updates/base-xstore.upgrade.properties" unless="posPackageIsUpgrade" />
                <exclude name="linux/**" if="excludeLinux32" />
                <exclude name="linux_64/**" if="excludeLinux64" />
                <exclude name="windows/**" if="excludeWindows32" />
                <exclude name="windows_64/**" if="excludeWindows64" />
              </zipfileset>
              <!-- base files -->
              <zipfileset dir="${Install.xstoretemp}/xstore">
                <patternset refid="xstore.pos.distro.files" />
              </zipfileset>
            </zipwithsummary>
            <!-- compress mobile-specific components -->
            <if>
              <istrue value="${mobile.components.enabled}" />
              <then>
                <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${pos.out.dir}/${xzip.mobile}">
                  <!-- overlay files -->
                  <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
                    <patternset refid="xstore.mobile.distro.files" />
                  </zipfileset>
                  <!-- installx files -->
                  <zipfileset dir="${Install.resources}/pos-mobile">
                    <patternset refid="xstore.mobile.distro.files" />
                  </zipfileset>
                  <!-- base files -->
                  <zipfileset dir="${Install.xstoretemp}/xstore">
                    <patternset refid="xstore.mobile.distro.files" />
                  </zipfileset>
                </zipwithsummary>
              </then>
            </if>
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${pos.out.dir}/${xzip.xfg}">
              <!-- base xfg files -->
              <zipfileset dir="${Install.xfgtemp}/xfg">
                <patternset refid="xstore.xfg.distro.files" />
              </zipfileset>
              <!-- installx files -->
              <zipfileset dir="${Install.resources}/pos-xfg">
                <patternset refid="xstore.xfg.pos.distro.files" />
              </zipfileset>
              <!-- base files -->
              <zipfileset dir="${Install.xstoretemp}/xstore">
                <patternset refid="xstore.xfg.pos.distro.files" />
              </zipfileset>
            </zipwithsummary>
          </parallel>

          <!-- COPY ANT.INSTALL.PROPERTIES FILE TO DISTRO DIR FOR INSTALLS -->
          <if>
            <isset property="posPackageIsInstall" />
            <then>
              <property name="pos.ant.install.properties.file" location="${Install.xstoreoverlay.work}/xstore/installx/pos/ant.install.properties" />
              <fail message="FATAL: Expected to find a required file at ${pos.ant.install.properties.file} but did not find one.">
                <condition>
                  <not>
                    <available file="${pos.ant.install.properties.file}" />
                  </not>
                </condition>
              </fail>
              <copy todir="${xstore.dist.dir}" file="${pos.ant.install.properties.file}" overwrite="true" verbose="true" />
            </then>
          </if>
        </default>
      </switch>

      <!-- create the installer package -->
      <writexstoreinstallproperties file="${pos.out.dir}/${xprop}" type="@{type}" />
      <local name="xstfileDist" />
      <property name="xstfileDist" value="${xstore.dist.dir}/xstore-${x.version}-${cust.version}-${patch.version}-${customer.id}${has.brand}-pos-@{type}.jar" />
      <delete file="${xstfileDist}" failonerror="false" />
      <installer file="${xstfileDist}" compress="true" installConfig="installgui/antinstall-xstore.xml" buildFile="installer/install-xstore.xml">
        <runtime dir="${installer.runtime.dir}"  includes="*.jar" />
        <fileset dir="${pos.out.dir}">
          <include name="${xzip}" />
          <include name="${xzip.pos}" />
          <include name="${xzip.mobile}" />
          <include name="${xzip.xfg}" />
        </fileset>
        <zipfileset dir="${Install.common}" prefix="common" />
        <zipfileset dir="${Install.xstoreoverlay.work}/xstore/installx/pos" prefix="custom" excludes="*ant.install.properties" />
        <zipfileset dir="${Install.resources}" prefix="resources">
          <include name="db/${platform.db}/**" />
          <include name="*.png" />
        </zipfileset>
        <zipfileset dir="${Install.lib}" prefix="lib" />
        <fileset file="${pos.out.dir}/${xprop}" />
      </installer>

      <fileinfo file="${xstfileDist}" property="xstore" />
      <echo file="${ixbldcomp.xstorepos}" append="true">
Xstore POS - @{type}
  NAME: ${xstore.name}
  SIZE: ${xstore.size}
  TIME: ${xstore.lastmod}
      </echo>
    </sequential>
  </macrodef>

  <target name="package-xenvironment" depends="init-properties" description="Build the Xenvironment application" unless="isPatch">
    <for list="${x.type}" param="type" trim="true">
      <sequential>
        <packagexenv type="@{type}"/>
      </sequential>
    </for>
  </target>

    <macrodef name="packagexenv">
        <attribute name="type"/>
        <sequential>
          <echo message="Packaging Xenvironment for: @{type}"/>

          <local name="xprop"/>
          <property name="xprop" value="xstore.install.properties"/>

          <local name="env.out.dir"/>
          <property name="env.out.dir" location="${Install.dist.work}/@{type}"/>
          
          
          <!-- set the compressed artifact package names, and delete files if they already exist -->
          <local name="xzip_xenvironment"/>
          <property name="xzip_xenvironment" value="xenvironment.zip" />
          <mkdir dir="${env.out.dir}"/>
          <delete file="${env.out.dir}/${xzip_xenvironment}"/>

          <!-- create the distro dir -->
          <mkdir dir="${xenvironment.dist.dir}" />

          <writexstoreinstallproperties file="${env.out.dir}/${xprop}" type="@{type}" dontCleanCustConfig="true"/>

          <!-- define local conditions to guide packaging -->
          <local name="posPackageIsInstall"/>
          <local name="posPackageIsUpgrade"/>
          <condition property="posPackageIsInstall">
            <contains string="@{type}" substring="install"/>
          </condition>
          <condition property="posPackageIsUpgrade">
            <contains string="@{type}" substring="upgrade"/>
          </condition>

          <!-- Compress install-type-agnostic components -->
          <patternset id="xenvironment.platform.file.patterns">
            <!-- Excludes based on operating system -->
            <exclude name="linux/**" if="excludeLinux32"/>
            <exclude name="linux_64/**" if="excludeLinux64"/>
            <exclude name="windows/**" if="excludeWindows32"/>
            <exclude name="windows_64/**" if="excludeWindows64"/>
          </patternset>

          <available file="${Install.xstoreoverlay.work}/xstore/res/ssl/.truststore"
                     property="overlay.truststore.available"/>
          <available file="${Install.xstoreoverlay.work}/xstore/res/ssl/.keystore"
                     property="overlay.keystore.available"/>

        <!-- BEGIN BZ25633 -->
        <switch value="@{type}">
            <case value="update">
              <parallel>
                <!-- common files -->
                <zipwithsummary zip64Mode="always" level="9" duplicate="preserve"
                          destfile="${env.out.dir}/${xzip_xenvironment}">
                  <!-- App Version Properties File -->
                  <zipfileset file="${versionfile}" />
                  <!-- Customer Build -->
                  <zipfileset dir="${Install.xenvoverlay.work}/environment">
                      <patternset refid="xenvironment.platform.file.patterns" />
                    </zipfileset>
                </zipwithsummary>
              </parallel>
            </case>
            <default>
              <parallel>
                <zipwithsummary zip64Mode="always" level="9" duplicate="preserve"
                          destfile="${env.out.dir}/${xzip_xenvironment}">
                    <!-- App Version Properties File -->
                    <zipfileset file="${versionfile}"/>

                    <!-- overlay files -->
                    <zipfileset dir="${Install.xenvoverlay.work}/environment">
                      <patternset refid="xenvironment.platform.file.patterns" />
                    </zipfileset>
                    <!-- installx files -->
                    <zipfileset dir="${Install.resources}/xenvironment">
                      <patternset refid="xenvironment.platform.file.patterns"/>
                    </zipfileset>
                    <!-- base files -->
                    <zipfileset dir="${Install.xenvironmenttemp}/environment">
                      <patternset refid="xenvironment.platform.file.patterns"/>
                    </zipfileset>

                    <!-- detect optional files that can be pulled from the overlay -->
                    <!-- pull in cipher files from the overlay -->
                    <zipfileset dir="${Install.xstoreoverlay.work}/xstore/res/keys" includes="*.cip"
                                prefix="res/keys"/>
                    <!-- pull in the .truststore file from the overlay if it exists -->
                    <zipfileset dir="${Install.xstoreoverlay.work}/xstore/res/ssl" erroronmissingdir="false"
                                prefix="res/ssl">
                      <include name=".truststore" if="overlay.truststore.available"/>
                      <include name=".keystore" if="overlay.keystore.available"/>
                    </zipfileset>

                  </zipwithsummary>
              </parallel>
              <!-- COPY ANT.INSTALL.PROPERTIES FILE TO DISTRO DIR FOR INSTALLS -->
                <if>
                    <isset property="isInstall"/>
                    <then>
                    <property name="xenvironment.ant.install.properties.file"
                        location="${Install.xstoreoverlay.work}/xstore/installx/xenvironment/ant.install.properties"/>
                    <fail message="FATAL: Expected to find a required file at ${xenvironment.ant.install.properties.file} but did not find one.">
                        <condition>
                        <not>
                            <available file="${xenvironment.ant.install.properties.file}"/>
                        </not>
                        </condition>
                    </fail>
                    <copy todir="${xenvironment.dist.dir}" file="${xenvironment.ant.install.properties.file}"
                    overwrite="true" verbose="true"/>
                    </then>
                </if>
            </default>
          </switch>
            <!-- END BZ25633 -->

          <!-- CREATE XENVIRONMENT INSTALLER -->
          <local name="xenvironmentfileDist"/>
          <property name="xenvironmentfileDist"
                    value="${xenvironment.dist.dir}/xenvironment-${x.version}-${cust.version}-${patch.version}-${customer.id}${has.brand}-@{type}.jar"/>
          <delete file="${xenvironmentfileDist}" failonerror="false"/>
          <installer file="${xenvironmentfileDist}" compress="true"
                     installConfig="installgui/antinstall-xenvironment.xml"
                     buildFile="installer/install-xenvironment.xml">
            <runtime dir="${installer.runtime.dir}"  includes="*.jar" />
            <fileset dir="${env.out.dir}">
              <include name="${xzip_xenvironment}"/>
            </fileset>
            <zipfileset dir="${Install.common}" prefix="common"/>
            <zipfileset dir="${Install.xstoreoverlay.work}/xstore/installx/xenvironment" prefix="custom" excludes="*ant.install.properties" />
            <zipfileset dir="${Install.resources}" prefix="resources">
              <include name="*.png"/>
            </zipfileset>
            <zipfileset dir="${Install.lib}" prefix="lib"/>
            <fileset file="${env.out.dir}/${xprop}"/>
          </installer>

          <fileinfo file="${xenvironmentfileDist}" property="xstore"/>
          <echo file="${ixbldcomp.xstorepos}" append="true">
            Xenvironment
            NAME: ${xstore.name}
            SIZE: ${xstore.size}
            TIME: ${xstore.lastmod}
          </echo>
        </sequential>
      </macrodef>

  <target name="package-xadmin" depends="prep-overlay,-package-xadmin:make-db-scripts" description="Build the xadmin.war file" unless="isPatch">
    <!-- handle xadmin customizations -->
    <if>
      <isset property="xadmin.is.custom" />
      <then>
        <!-- determine whether the custom directory was specified as a relative path or an absolute path and proceed accordingly -->
        <condition property="xadmin.custom.dir.raw" value="${user.dir}/${xadmin.custom.dir}" else="${xadmin.custom.dir}">
          <matches string="${xadmin.custom.dir}" pattern="^\..*$" />
        </condition>
        <property name="xadmin.custom.dir.fullyqualified" location="${xadmin.custom.dir.raw}" />
        <!-- echo a message indicating the fact that overlay components will be included, and the directory from which they will be sourced -->
        <echo message="Custom Xadmin overlay components will be sourced from '${xadmin.custom.dir.fullyqualified}'." />
        <!-- Create a fileset that references the overlay directory -->
        <fileset id="xadmin.overlay.directory" dir="${xadmin.custom.dir.fullyqualified}" />
      </then>
      <else>
        <!-- reference empty fileset if customizations were not provided -->
        <fileset id="xadmin.overlay.directory" refid="installx.builder.empty.fileset" />
      </else>
    </if>

    <echo message="*** WAR XADMIN" />
    <property name="xadmin.output.file.war" value="${xcenter.dist.dir}/xadmin-${x.version}-${customer.id}-${cust.version}.war" />

    <mkdir dir="${xcenter.dist.dir}" />
    <delete file="${xadmin.output.file.war}" failonerror="false" />
  	
  	 <!--BEGIN BZ46153 --> 
  	 <copy file="${user.dir}/web-inf/xadmin/weblogic.xml" tofile="${xadmin.custom.dir.fullyqualified}/WEB-INF/weblogic.xml" overwrite="true"/>
  	 <!--END BZ46153 --> 
  	
    <warwithsummary needxmlfile="false" destfile="${xadmin.output.file.war}" duplicate="preserve">
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Time" value="${now.long}" />
        <attribute name="Build-VM-Vendor" value="${java.vm.vendor}" />
        <attribute name="Build-VM-Name" value="${java.vm.name}" />
        <attribute name="Build-VM-Version" value="${java.vm.version}" />
        <attribute name="Build-OS" value="${os.name} (${os.arch}) version ${os.version}" />
      </manifest>
      <fileset file="${versionfile}" />
      <fileset refid="xadmin.overlay.directory" />
      <zipfileset src="${custconfigjar}" prefix="WEB-INF/classes" excludes="META-INF/MANIFEST.MF" />
      <zipfileset src="${custposjar}" prefix="WEB-INF/classes" excludes="META-INF/MANIFEST.MF" />
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib" prefix="WEB-INF/lib">
        <include name="${customer.id.lc}-*.jar" />
        <include name="ops-*.jar" />
        <exclude name="${custconfigjarname}" />
        <exclude name="${custposjarname}" />
      </zipfileset>
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/license" erroronmissingdir="false" prefix="META-INF/license" />
      <zipfileset dir="${Install.xstoretemp}/xstore/license" prefix="META-INF/license" />
      <fileset dir="${Install.xatemp}" excludes="**/META-INF/MANIFEST.MF" />
    </warwithsummary>

    <fileinfo file="${xadmin.output.file.war}" property="fileinfo.xadmin.war" />
    <echo file="${ixbldcomp.xstoreoffice}" append="true">
Xadmin
  NAME: ${fileinfo.xadmin.war.name}
  SIZE: ${fileinfo.xadmin.war.size}
  TIME: ${fileinfo.xadmin.war.lastmod}
    </echo>
  </target>

  <target name="-package-xadmin:make-db-scripts" depends="prep-overlay" unless="isPatch">
    <!-- Handle script customizations -->
    <if>
      <isset property="xadmin.is.custom" />
      <then>
        <!-- determine whether the custom db script directory was specified as a relative path or an absolute path and proceed accordingly -->
        <condition property="xadmin.custom.dbscript.dir.raw" value="${user.dir}/${xadmin.custom.dbscript.dir}" else="${xadmin.custom.dbscript.dir}">
          <matches string="${xadmin.custom.dbscript.dir}" pattern="^\..*$" />
        </condition>
        <property name="xadmin.custom.dbscript.dir.fullyqualified" location="${xadmin.custom.dbscript.dir.raw}" />
        <!-- echo a message indicating the fact that overlay scripts will be included, and the directory from which they will be sourced -->
        <echo message="Custom Xadmin SQL scripts will be sourced from '${xadmin.custom.dbscript.dir.fullyqualified}'." />
        <!-- Create filesets that reference the overlay scripts -->
        <fileset id="xadmin.custom.schema.script" dir="${xadmin.custom.dbscript.dir.fullyqualified}" includes="${customer.id}XadminSchema.sql" />
        <fileset id="xadmin.custom.data.script" dir="${xadmin.custom.dbscript.dir.fullyqualified}" includes="${customer.id}XadminData.sql" />
      </then>
      <else>
        <!-- reference empty fileset if customizations were not provided -->
        <fileset id="xadmin.custom.schema.script" refid="installx.builder.empty.fileset" />
        <fileset id="xadmin.custom.data.script" refid="installx.builder.empty.fileset" />
      </else>
    </if>

    <!-- set the location of the source scripts -->
    <property name="xadmin.source.location.sql" value="${Install.xadbtemp}/${platform.db}/xcenter_admin" />

    <!-- build scripts -->
    <for list="${x.type}" param="type" trim="true">
      <sequential>
        <packagexadmindbscripts type="@{type}" />
      </sequential>
    </for>
  </target>

  <macrodef name="packagexadmindbscripts">
    <attribute name="type" />
    <sequential>
      <echo message="Packaging Xadmin scripts for: @{type}" />

      <!-- define local conditions to guide packaging -->
      <local name="xadminDbPackageIsInstall" />
      <condition property="xadminDbPackageIsInstall">
        <contains string="@{type}" substring="install" />
      </condition>

      <!-- define script output -->
      <local name="xadmin.output.filename.xadmin-sql" />
      <property name="xadmin.output.filename.xadmin-sql" value="xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-xadmin-@{type}.sql" />
      <local name="xAdminSql" />
      <property name="xAdminSql" value="${xcenter.dist.dir}/${xadmin.output.filename.xadmin-sql}" />
      <delete file="${xAdminSql}" failonerror="false" />

      <!-- create the output directory -->
      <mkdir dir="${xcenter.dist.dir}" />

      <!-- create an Xadmin db script containing base and custom schema and base data -->
      <concat destfile="${xAdminSql}" append="true" fixlastline="true">
        <fileset dir="${Install.dbtemp}/${platform.db}/Xadmin">
          <include name="db-define.sql" if="xadminDbPackageIsInstall" />
          <include name="db-upgrade.sql" unless="xadminDbPackageIsInstall" />
        </fileset>
        <fileset refid="xadmin.custom.schema.script" />
        <fileset file="${xadmin.source.location.sql}/dataupdate-all.sql" />
      </concat>

      <!-- populate org-specific data for each org -->
      <for list="${xc.orgid}" param="currentOrg" delimiter=",">
        <sequential>
          <concat destfile="${xAdminSql}" append="true" fixlastline="true">
            <filterchain>
              <tokenfilter>
                <replacestring from="$(OrgID)" to="@{currentOrg}" />
              </tokenfilter>
            </filterchain>
            <fileset file="${xadmin.source.location.sql}/dataupdate-orgspecific.sql" />
          </concat>
        </sequential>
      </for>

      <!-- add in overlay details -->
      <!-- Begin BZ-32208 -->
      <if>
        <or>
          <equals arg1="@{type}" arg2="update" forcestring="true" />
          <equals arg1="@{type}" arg2="upgrade" forcestring="true" />
        </or>
        <then>
          <for list="${xc.orgid}" param="currentOrg" delimiter=",">
            <sequential>
              <!-- define new SQL file: xstore-16.0.x.0.xx-x.x.x-CAW-xadmin-update-DATA_ORG-1000.sql -->
              <local name="xadmin.output.filename.xadmin-update-sql" />
              <property name="xadmin.output.filename.xadmin-update-sql" value="xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-xadmin-@{type}-DATA_ORG-@{currentOrg}.sql" />
              <local name="xAdminUpdateSql" />
              <property name="xAdminUpdateSql" value="${xcenter.dist.dir}/${xadmin.output.filename.xadmin-update-sql}" />
              <delete file="${xAdminUpdateSql}" failonerror="false" />
            
              <concat destfile="${xAdminUpdateSql}" append="true" fixlastline="true">
                <filterchain>
                  <tokenfilter>
                    <replacestring from="$(OrgID)" to="@{currentOrg}" />
                  </tokenfilter>
                </filterchain>
                <fileset file="${Install.xstoreoverlay.database.work}/${customer.id}${has.brand}XadminDataUpdate.sql" />
                <fileset refid="xadmin.custom.data.script" />
              </concat>
            </sequential>
          </for>
        </then>
      </if>
        
      <for list="${xc.orgid}" param="currentOrg" delimiter=",">
        <sequential>
          <concat destfile="${xAdminSql}" append="true" fixlastline="true">
            <filterchain>
              <tokenfilter>
                <replacestring from="$(OrgID)" to="@{currentOrg}" />
              </tokenfilter>
            </filterchain>
            <fileset file="${Install.xstoreoverlay.database.work}/${customer.id}${has.brand}XadminDataUpdate.sql" />
            <fileset refid="xadmin.custom.data.script" />
          </concat>
        </sequential>
      </for>
      <!-- End BZ-32208 -->
    </sequential>
  </macrodef>

  <target name="package-xcenter" description="Build the Xcenter.war file" depends="prep-overlay,build-xcenter-db" unless="isPatch">
    <!-- handle xcenter customizations -->
    <if>
      <isset property="xcenter.is.custom" />
      <then>
        <!-- determine whether the custom directory was specified as a relative path or an absolute path and proceed accordingly -->
        <condition property="xcenter.custom.dir.raw" value="${user.dir}/${xcenter.custom.dir}" else="${xcenter.custom.dir}">
          <matches string="${xcenter.custom.dir}" pattern="^\..*$" />
        </condition>
        <property name="xcenter.custom.dir.fullyqualified" location="${xcenter.custom.dir.raw}" />
        <!-- echo a message indicating the fact that overlay components will be included, and the directory from which they will be sourced -->
        <echo message="Custom Xcenter overlay components will be sourced from '${xcenter.custom.dir.fullyqualified}'." />
        <!-- Create a fileset that references the overlay directory -->
        <fileset id="xcenter.overlay.directory" dir="${xcenter.custom.dir.fullyqualified}" />
      </then>
      <else>
        <!-- reference empty fileset if customizations were not provided -->
        <fileset id="xcenter.overlay.directory" refid="installx.builder.empty.fileset" />
      </else>
    </if>

    <echo message="*** WAR XCENTER" />
    <property name="xcWarfileDist" value="${xcenter.dist.dir}/xcenter-${x.version}-${customer.id}-${cust.version}.war" />

    <mkdir dir="${xcenter.dist.dir}" />
    <delete file="${xcWarfileDist}" failonerror="false" />
  	
  	<!--BEGIN BZ46153 --> 
  	<copy file="${user.dir}/web-inf/xcenter/weblogic.xml" tofile="${xcenter.custom.dir.fullyqualified}/WEB-INF/weblogic.xml" overwrite="true"/>
  	<!--END BZ46153 --> 
  	
    <warwithsummary destfile="${xcWarfileDist}" needxmlfile="false" duplicate="preserve">
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Time" value="${now.long}" />
        <attribute name="Build-VM-Vendor" value="${java.vm.vendor}" />
        <attribute name="Build-VM-Name" value="${java.vm.name}" />
        <attribute name="Build-VM-Version" value="${java.vm.version}" />
        <attribute name="Build-OS" value="${os.name} (${os.arch}) version ${os.version}" />
      </manifest>
      <fileset file="${versionfile}" />
      <fileset refid="xcenter.overlay.directory" />
      <zipfileset src="${custconfigjar}" prefix="WEB-INF/classes" excludes="META-INF/MANIFEST.MF" />
      <zipfileset src="${custposjar}" prefix="WEB-INF/classes" excludes="META-INF/MANIFEST.MF" />
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib" prefix="WEB-INF/lib">
        <include name="${customer.id.lc}-*.jar" />
        <include name="ops-*.jar" />
        <exclude name="${custconfigjarname}" />
        <exclude name="${custposjarname}" />
      </zipfileset>
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/license" erroronmissingdir="false" prefix="META-INF/license" />
      <zipfileset dir="${Install.xstoretemp}/xstore/license" prefix="META-INF/license" />
      <fileset dir="${Install.xcwartemp}" excludes="**/META-INF/MANIFEST.MF" />
    </warwithsummary>

    <fileinfo file="${xcWarfileDist}" property="xcwar" />
    <echo file="${ixbldcomp.xstoreoffice}" append="true">
Xcenter
  NAME: ${xcwar.name}
  SIZE: ${xcwar.size}
  TIME: ${xcwar.lastmod}
  </echo>

    <echo message="*** BUILD XCENTER-CONFIG.ZIP" />
    <property name="xcConfigFileName" value="xcenter-config.zip" />
    <delete file="${xcenter.dist.dir}/${xcConfigFileName}" failonerror="false" />
    <!-- SET THE customerId and Salt IN xcenter.properties -->
    <replace file="${Install.resources}/xcenterear/xcenter-config/xcenter.properties" summary="true">
      <replacefilter token="@customerId@" value="${customer.id}" />
      <replacefilter token="@customerSalt@" value="${customerId.salt}" />
    </replace>
    <!-- detect optional files that can be pulled from the overlay -->
    <available file="${Install.xstoreoverlay.work}/xstore/res/ssl/.truststore" property="overlay.truststore.available" />
    <available file="${Install.xstoreoverlay.work}/xstore/installx/xcenter/xcenter-config" property="overlay.xcenterconfig.available" />
    <!-- create the xcenter-config.zip file -->
    <zipwithsummary level="9" destfile="${xcenter.dist.dir}/${xcConfigFileName}" duplicate="preserve">
      <!-- pull in cipher files from the overlay -->
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/res/keys" includes="*.cip" prefix="xcenter-config/res/keys" />
      <!-- pull in the .truststore file from the overlay if it exists -->
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/res/ssl" erroronmissingdir="false" prefix="xcenter-config/res/ssl">
        <include name=".truststore" if="overlay.truststore.available" />
      </zipfileset>
      <!-- pull in xcenter-config overlay files if an installx/xcenter/xcenter-config folder exist -->
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/installx/xcenter/xcenter-config" erroronmissingdir="false" prefix="xcenter-config">
        <include name="**/*" if="overlay.xcenterconfig.available" />
      </zipfileset>
      <!-- pull in files from InstallX to fill any remaining gaps -->
      <zipfileset dir="${Install.resources}/xcenterear/xcenter-config" includes="**" prefix="xcenter-config" />
    </zipwithsummary>
  </target>

  <target name="build-xcenter-db" depends="prep-overlay" description="Build the Xcenter DB SQL scripts" unless="isPatch">
    <echo message="*** WRITING XCENTER DB SCRIPTS" />
    <mkdir dir="${xcenter.dist.dir}" />

    <if>
      <isset property="xcenter.is.custom" />
      <then>
        <!-- determine whether the custom db script directory is specified as a relative path or an absolute path and proceed accordingly -->
        <condition property="xcenter.custom.dbscript.dir.raw" value="${user.dir}/${xcenter.custom.dbscript.dir}" else="${xcenter.custom.dbscript.dir}">
          <matches string="${xcenter.custom.dbscript.dir}" pattern="^\..*$" />
        </condition>
        <property name="xcenter.custom.dbscript.dir.fullyqualified" location="${xcenter.custom.dbscript.dir.raw}" />
        <!-- echo a message indicating the fact that overlay scripts will be included, and the directory from which they will be sourced -->
        <echo message="Custom Xcenter SQL scripts will be sourced from '${xcenter.custom.dbscript.dir.fullyqualified}'." />
        <!-- Create filesets that reference the overlay scripts -->
        <fileset id="xcenter.custom.schema.script" dir="${xcenter.custom.dbscript.dir.fullyqualified}" includes="${customer.id}XcenterSchema.sql" />
        <fileset id="xcenter.custom.data.script" dir="${xcenter.custom.dbscript.dir.fullyqualified}" includes="${customer.id}XcenterData.sql" />
      </then>
      <else>
        <!-- reference empty fileset if customizations were not provided -->
        <fileset id="xcenter.custom.schema.script" refid="installx.builder.empty.fileset" />
        <fileset id="xcenter.custom.data.script" refid="installx.builder.empty.fileset" />
      </else>
    </if>

    <!-- add the header that will appear above the sql scripts to the bldcomp file -->
    <echo file="${ixbldcomp.xstoreoffice}" append="true">
Xcenter Database</echo>

    <!-- build scripts -->
    <for list="${x.type}" param="type" trim="true">
      <sequential>
        <packagexcenterdbscripts type="@{type}" />
      </sequential>
    </for>
  </target>

  <macrodef name="packagexcenterdbscripts">
    <attribute name="type" />
    <sequential>
      <echo message="Packaging Xcenter scripts for: @{type}" />

      <!-- Xcenter replication script creation -->
      <concat destfile="${xcenter.dist.dir}/xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-xcenterrepl-@{type}-SCHEMA.sql">
        <fileset dir="${Install.dbtemp}/${platform.db}/Replication" includes="*xcenter-replication-db-define.sql" />
      </concat>

      <!-- set the name of the schema script file and delete it if it already exists -->
      <local name="xcSchemaSqlDist" />
      <property name="xcSchemaSqlDist" value="${xcenter.dist.dir}/xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-xcenter-@{type}-SCHEMA.sql" />
      <delete file="${xcSchemaSqlDist}" />

      <!-- set the name of the schema script file and delete it if it already exists -->
      <local name="xcSchemaSynonymSqlDist" />
      <property name="xcSchemaSynonymSqlDist" value="${xcenter.dist.dir}/xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-xcenter-@{type}-SCHEMA-SYNONYM.sql" />
      <delete file="${xcSchemaSynonymSqlDist}" />

      <!-- set the name of the create script file and delete it if it already exists -->
      <local name="xcCreateSqlDist" />
      <property name="xcCreateSqlDist" value="${xcenter.dist.dir}/xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-xcenter-@{type}-CREATE.sql" />
      <delete file="${xcCreateSqlDist}" />
      
      <!-- determine which script to use for Client Schema - If this is an upgrade and a hybridize script exists, use that, otherwise use the regular script. -->
      <local name="client.schema.script.file" />
      <condition property="client.schema.script.file" value="${Install.xstoreoverlay.database.work}/ClientSchema.hybridize.sql" else="${Install.xstoreoverlay.database.work}/ClientSchema.sql">
        <and>
          <contains string="@{type}" substring="upgrade" />
          <available file="${Install.xstoreoverlay.database.work}/ClientSchema.hybridize.sql" />
        </and>
      </condition>

      <!-- create 1 DB script for schema synonyms, if appropriate -->
      <if>
        <or>
          <equals arg1="${platform.db}" arg2="oracle" forcestring="true" />
          <equals arg1="${platform.db}" arg2="oraclepdb" forcestring="true" />
        </or>
        <then>
          <copy file="${Install.dbtemp}/${platform.db}/etc/Synonyms.sql" tofile="${xcSchemaSynonymSqlDist}">
              <filterchain refid="xcenter.dbscript.token.filter" />
          </copy>
        </then>
      </if>

      <!-- Xcenter schema script creation -->
      <switch value="@{type}">
        <case value="install">
          <!-- installs -->
          <!-- create 1 db create script -->
          <copy file="${Install.dbtemp}/${platform.db}/db-create.sql" tofile="${xcCreateSqlDist}" />
          <!-- create 1 db create script for SCHEMA -->
          <concat destfile="${xcSchemaSqlDist}" append="true" fixlastline="true">
            <!-- base xstore schema -->
            <fileset file="${base.schema}" />
            <!-- customer specific schema and updates -->
            <fileset dir="${Install.xstoreoverlay.database.work}">
              <include name="ClientSchema.sql" />
            </fileset>
            <fileset refid="xcenter.custom.schema.script" />
            <!-- apply platform filters -->
            <filterchain refid="xcenter.dbscript.token.filter" />
            <!-- filter base ctl_version_history data using the default org ID -->
            <filterchain>
              <tokenfilter>
                <replacestring from="$(OrgID)" to="${default.xcenter.org}" />
              </tokenfilter>
            </filterchain>
          </concat>
          <!-- Iterate through Org IDs to build DB scripts -->
          <for list="${xc.orgid}" param="currentOrg" delimiter=",">
            <sequential>
              <!-- create a fileset that includes base data and data update scripts -->
              <fileset id="data.and.data.update.scripts" file="${Install.xstoreoverlay.database.work}/ClientData.sql" />

              <!-- create 1 db create script for PRODUCTION DATA -->
              <local name="xcProdSqlDist" />
              <property name="xcProdSqlDist" value="xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-xcenter-@{type}-PROD_DATA_ORG-@{currentOrg}.sql" />
              <delete file="${Install.dist.work}/${xcProdSqlDist}" failonerror="false" />
              <concat destfile="${Install.dist.work}/${xcProdSqlDist}" append="true" fixlastline="true">
                <!-- customer base data and data update -->
                <fileset refid="data.and.data.update.scripts" />
                <!-- overlay script -->
                <fileset refid="xcenter.custom.data.script" />
                <!-- version -->
                <fileset file="${Install.resources}/db/db-version.sql" />
              </concat>

              <!-- create 1 db create script for TEST DATA -->
              <local name="xcTestSqlDist" />
              <property name="xcTestSqlDist" value="xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-xcenter-@{type}-TEST_DATA_ORG-@{currentOrg}.sql" />
              <delete file="${Install.dist.work}/${xcTestSqlDist}" failonerror="false" />
              <concat destfile="${Install.dist.work}/${xcTestSqlDist}" append="true" fixlastline="true">
                <!-- customer base data and data update -->
                <fileset refid="data.and.data.update.scripts" />
                <!-- overlay script -->
                <fileset refid="xcenter.custom.data.script" />
                <!-- test data and test store-specific data -->
                <fileset file="${client.schema.script.file}" />
                <!-- version -->
                <fileset file="${Install.resources}/db/db-version.sql" />
              </concat>

              <!-- filter tokens in the resulting files (note: this step is seprate because filtering files during concat added strange chars to files without linebreaks) -->
              <delete file="${xcenter.dist.dir}/${xcProdSqlDist}" failonerror="false" />
              <delete file="${xcenter.dist.dir}/${xcTestSqlDist}" failonerror="false" />
              <copy todir="${xcenter.dist.dir}">
                <fileset dir="${Install.dist.work}">
                  <include name="${xcProdSqlDist}" />
                  <include name="${xcTestSqlDist}" />
                </fileset>
                <!-- apply platform filters -->
                <filterchain refid="xcenter.dbscript.token.filter" />
                <!-- apply other filters -->
                <filterchain>
                  <tokenfilter>
                    <replacestring from="$(OrgID)" to="@{currentOrg}" />
                    <replacestring from="$(StoreID)" to="0" />
                    <replacestring from="$(CountryID)" to="''" />
                    <replacestring from="$(CurrencyID)" to="''" />
                    <replacestring from="$(RegionID)" to="''" />
                    <replacestring from="$(DFUNC)" to="${platform.db.dfunc}" />
                    <replacestring from="$(EFUNC)" to="${platform.db.efunc}" />
                    <replacestring from="$(BrandID)" to="'${customer.brand}'" />
                    <replacestring from="$(CustomerID)" to="${customer.id}" />
                    <replacestring from="$(BaseVersion)" to="${x.version}" />
                    <replacestring from="$(CustVersion)" to="${cust.version}" />
                    <replacestring from="$(PatchVersion)" to="${patch.version}" />
                  </tokenfilter>
                </filterchain>
              </copy>

              <fileinfo file="${xcenter.dist.dir}/${xcProdSqlDist}" property="prodsql" />
              <fileinfo file="${xcenter.dist.dir}/${xcTestSqlDist}" property="testsql" />
              <echo file="${ixbldcomp.xstoreoffice}" append="true">
  NAME: ${prodsql.name}
  SIZE: ${prodsql.size}
  TIME: ${prodsql.lastmod}

  NAME: ${testsql.name}
  SIZE: ${testsql.size}
  TIME: ${testsql.lastmod}
              </echo>
            </sequential>
          </for>
        </case>
        <default>
          <!-- upgrades and updates -->
          <!-- CREATE 1 DB UPGRADE/UPDATE SCHEMA SCRIPT -->
          <concat destfile="${xcSchemaSqlDist}" append="true" fixlastline="true">
            <fileset file="${client.schema.script.file}" />
            <fileset refid="xcenter.custom.schema.script" />
            <!-- apply platform filters -->
            <filterchain refid="xcenter.dbscript.token.filter" />
            <!-- filter base ctl_version_history data using the default org ID -->
            <filterchain>
              <tokenfilter>
                <replacestring from="$(OrgID)" to="${default.xcenter.org}" />
              </tokenfilter>
            </filterchain>
          </concat>
          <!-- Iterate through Org IDs to build DB scripts -->
          <for list="${xc.orgid}" param="currentOrg" delimiter=",">
            <sequential>
              <!-- CREATE 1 DB UPGRADE/UPDATE DATA SCRIPT W/ VERSION -->
              <local name="xcUpdSqlDist" />
              <property name="xcUpdSqlDist" value="xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-xcenter-@{type}-DATA_ORG-@{currentOrg}.sql" />
              <delete file="${Install.dist.work}/${xcUpdSqlDist}" failonerror="false" />
              <concat destfile="${Install.dist.work}/${xcUpdSqlDist}" append="true" fixlastline="true">
                <fileset file="${Install.xstoreoverlay.database.work}/ClientUpdateData.sql" />
                <fileset file="${Install.resources}/db/db-version.sql" />
              </concat>

              <!-- filter tokens in the resulting file (note: this step is seprate because filtering files during concat added strange chars to files without linebreaks) -->
              <delete file="${xcenter.dist.dir}/${xcUpdSqlDist}" failonerror="false" />
              <copy todir="${xcenter.dist.dir}">
                <fileset dir="${Install.dist.work}">
                  <include name="${xcUpdSqlDist}" />
                </fileset>
                <!-- apply platform filters -->
                <filterchain refid="xcenter.dbscript.token.filter" />
                <!-- apply other filters -->
                <filterchain>
                  <tokenfilter>
                    <replacestring from="$(OrgID)" to="@{currentOrg}" />
                    <replacestring from="$(StoreID)" to="0" />
                    <replacestring from="$(CountryID)" to="''" />
                    <replacestring from="$(CurrencyID)" to="''" />
                    <replacestring from="$(RegionID)" to="''" />
                    <replacestring from="$(DFUNC)" to="${platform.db.dfunc}" />
                    <replacestring from="$(EFUNC)" to="${platform.db.efunc}" />
                    <replacestring from="$(BrandID)" to="'${customer.brand}'" />
                    <replacestring from="$(CustomerID)" to="${customer.id}" />
                    <replacestring from="$(BaseVersion)" to="${x.version}" />
                    <replacestring from="$(CustVersion)" to="${cust.version}" />
                    <replacestring from="$(PatchVersion)" to="${patch.version}" />
                  </tokenfilter>
                </filterchain>
              </copy>

              <fileinfo file="${xcenter.dist.dir}/${xcUpdSqlDist}" property="prodsql" />
              <echo file="${ixbldcomp.xstoreoffice}" append="true">
  NAME: ${prodsql.name}
  SIZE: ${prodsql.size}
  TIME: ${prodsql.lastmod}
              </echo>
            </sequential>
          </for>
        </default>
      </switch>

      <!-- Xcenter Script file info -->
      <fileinfo file="${xcSchemaSqlDist}" property="schemasql" />
      <echo file="${ixbldcomp.xstoreoffice}" append="true">
  NAME: ${schemasql.name}
  SIZE: ${schemasql.size}
  TIME: ${schemasql.lastmod}
      </echo>
    </sequential>
  </macrodef>

  <target name="package-dl" depends="prep-overlay" description="Build a stand-alone version of the Xstore DataLoader." unless="isPatch">
    <!-- SET THE customerId and Salt IN system.properties -->
    <replace file="${Install.resources}/dl/system.properties" summary="true">
      <replacefilter token="@customerId@" value="${customer.id}" />
      <replacefilter token="@customerSalt@" value="${customerId.salt}" />
    </replace>

    <!-- build packages -->
    <for list="${x.type}" param="type" trim="true">
      <sequential>
        <packagedataloader type="@{type}" />
      </sequential>
    </for>

    <!-- copy in the ant.install.properties file -->
    <property name="dataloader.ant.install.properties.file" location="${Install.xstoreoverlay.work}/xstore/installx/dataloader/ant.install.properties" />
    <fail message="FATAL: Expected to find a required file at ${dataloader.ant.install.properties.file} but did not find one.">
      <condition>
        <not>
          <available file="${dataloader.ant.install.properties.file}" />
        </not>
      </condition>
    </fail>
    <copy todir="${dataloader.dist.dir}" file="${dataloader.ant.install.properties.file}" overwrite="true" verbose="true" />
  </target>

  <macrodef name="packagedataloader">
    <attribute name="type" />
    <sequential>
      <echo message="Packaging Dataloader for: @{type}" />

      <!-- define patternsets for the dataloader install -->
      <patternset id="dataloader.nonlib.files">
        <!-- platform and wrapper files -->
        <include name="wrapper/**" />
        <include name="linux/bin/**" unless="excludeLinux32" />
        <include name="linux/lib/**" unless="excludeLinux32" />
        <include name="linux/script/dataloader2.*" unless="excludeLinux32" />
        <include name="linux/script/datapurger.*" unless="excludeLinux32" />
        <include name="linux_64/bin/**" unless="excludeLinux32" />
        <include name="linux_64/lib/**" unless="excludeLinux32" />
        <include name="linux_64/script/dataloader2.*" unless="excludeLinux64" />
        <include name="linux_64/script/datapurger.*" unless="excludeLinux64" />
        <include name="windows/bin/**" unless="excludeLinux32" />
        <include name="windows/lib/**" unless="excludeLinux32" />
        <include name="windows/script/dataloader2.*" unless="excludeWindows32" />
        <include name="windows/script/datapurger.*" unless="excludeWindows32" />
        <include name="windows_64/bin/**" unless="excludeLinux32" />
        <include name="windows_64/lib/**" unless="excludeLinux32" />
        <include name="windows_64/script/dataloader2.*" unless="excludeWindows64" />
        <include name="windows_64/script/datapurger.*" unless="excludeWindows64" />
        <!-- other misc directories -->
        <include name="config/dataloader/**" />
        <include name="config/purge/**" />
        <include name="download/**" />
        <include name="log/**" />
        <include name="license/**" />
        <include name="res/ssl/**" />
        <include name="res/keys/**" />
        <!-- exclude download.zip file regardless of the install type since it will be extracted if needed -->
        <exclude name="download/download.zip" />
      </patternset>
      <patternset id="dataloader.lib.files" includes="dtv-data2.jar,dtv-dtx.jar,dtv-countrypack.jar,dtv-event.jar,dtv-i18n.jar,dtv-ipc.jar,dtv-password.jar,dtv-logbuilder.jar,dtv-mvc.jar,dtv-posframework.jar,dtv-pricing2.jar,dtv-service*.jar,dtv-xst*.jar,dtv-upgrader.jar,dtv-util.jar,dtv-util-net.jar,ops-*.jar,pos.jar,config*.jar,${customer.id.lc}-*.jar,${custposjarname}${custconfigjarname}${dataloader.extra.lib.files}" />
      <patternset id="dataloader.lib.ext.files" includes="commons-*.jar,concurrent.jar,log4j-*.jar,ojdbc*.jar,servlet.jar,spring-*.jar,javax.inject*.jar,jta-*.jar,sqljdbc*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs.jar,ucp*.jar,guava*.jar,jna-*.jar,slf4j*.jar${dataloader.extra.lib.ext.files}" />

      <!-- set the compressed artifact package name and location, and delete it if it already exists -->
      <local name="dlzip" />
      <local name="dlprop" />
      <local name="dl.out.dir" />
      <property name="dlzip" value="xstore-dataloader.zip" />
      <property name="dlprop" value="xstore.install.properties" />
      <property name="dl.out.dir" location="${Install.dist.work}/@{type}" />

      <!-- clean up any previously existing files, should they exist -->
      <delete>
        <fileset dir="${dl.out.dir}" erroronmissingdir="false">
          <include name="${dlzip}" />
        </fileset>
      </delete>

      <!-- create the distro and work dirs -->
      <mkdir dir="${dataloader.dist.dir}" />
      <mkdir dir="${dl.out.dir}" />

      <!-- package dataloader install contents -->
      <switch value="@{type}">
        <case value="update">
          <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${dl.out.dir}/${dlzip}">
            <!-- App Version Properties File -->
            <zipfileset file="${versionfile}" />
            <!-- overlay files -->
            <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
              <patternset refid="dataloader.nonlib.files" />
            </zipfileset>
            <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib" prefix="lib">
              <patternset refid="dataloader.lib.files" />
            </zipfileset>
            <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib/ext" prefix="lib/ext">
              <patternset refid="dataloader.lib.ext.files" />
            </zipfileset>
          </zipwithsummary>
        </case>
        <default>
          <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${dl.out.dir}/${dlzip}">
            <!-- App Version Properties File -->
            <zipfileset file="${versionfile}" />
            <!-- customer components (we must allow any base component to be replaced, so this includes everything that is pulled from base and more) -->
            <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
              <patternset refid="dataloader.nonlib.files" />
            </zipfileset>
            <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib" prefix="lib">
              <patternset refid="dataloader.lib.files" />
            </zipfileset>
            <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib/ext" prefix="lib/ext">
              <patternset refid="dataloader.lib.ext.files" />
            </zipfileset>
            <!-- Property Merge & Config Files -->
            <zipfileset dir="${Install.resources}/dl">
              <exclude name="linux/**" if="excludeLinux32" />
              <exclude name="linux_64/**" if="excludeLinux64" />
              <exclude name="windows/**" if="excludeWindows32" />
              <exclude name="windows_64/**" if="excludeWindows64" />
            </zipfileset>
            <!-- base components -->
            <zipfileset dir="${Install.xstoretemp}/xstore">
              <patternset refid="dataloader.nonlib.files" />
            </zipfileset>
            <zipfileset prefix="config" src="${Install.xstoretemp}/xstore/lib/config.jar" includes="dtv/res/config/DataLoaderConfig.xml" />
            <zipfileset dir="${Install.xstoretemp}/xstore/lib" prefix="lib">
              <patternset refid="dataloader.lib.files" />
            </zipfileset>
            <zipfileset dir="${Install.xstoretemp}/xstore/lib/ext" prefix="lib/ext">
              <patternset refid="dataloader.lib.ext.files" />
            </zipfileset>
          </zipwithsummary>
        </default>
      </switch>

      <!-- build the installer package -->
      <writexstoreinstallproperties file="${dl.out.dir}/${dlprop}" type="@{type}" />
      <local name="dataloaderfileDist" />
      <property name="dataloaderfileDist" location="${dataloader.dist.dir}/xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-dataloader-@{type}.jar" />
      <delete file="${dataloaderfileDist}" failonerror="false" />
      <installer file="${dataloaderfileDist}" compress="true" installConfig="installgui/antinstall-dataloader.xml" buildFile="installer/install-dataloader.xml">
        <runtime dir="${installer.runtime.dir}"  includes="*.jar" />
        <fileset file="${dl.out.dir}/${dlzip}" />
        <zipfileset dir="${Install.common}" prefix="common" />
        <zipfileset dir="${Install.xstoreoverlay.work}/xstore/installx/dataloader" prefix="custom" excludes="*ant.install.properties" />
        <zipfileset dir="${Install.resources}" prefix="resources">
          <include name="*.png" />
        </zipfileset>
        <zipfileset dir="${Install.lib}" prefix="lib" />
        <fileset file="${dl.out.dir}/${dlprop}" />
      </installer>

      <!-- write file info -->
      <fileinfo file="${dataloaderfileDist}" property="dataloader" />
      <echo file="${ixbldcomp.xstoreoffice}" append="true">
DataLoader
  NAME: ${dataloader.name}
  SIZE: ${dataloader.size}
  TIME: ${dataloader.lastmod}
      </echo>
    </sequential>
  </macrodef>

  <target name="package-jrepackager" depends="prep-overlay" description="Build a JRE packaging utility." unless="isPatch">
    <!-- set the name of the installx component -->
    <property name="jre.packager.name" value="jrepackager" />

    <!-- set the name and location of the zip -->
    <property name="jreoverlayzip" value="${Install.dist.work}/xstore-jreoverlay.zip" />

    <!-- if the zip that we will create already exists, delete it -->
    <delete file="${jreoverlayzip}" failonerror="false" />

    <!-- create the distro dir -->
    <mkdir dir="${jrepackager.dist.dir}" />

    <!-- create overlay zip -->
    <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${jreoverlayzip}">
      <fileset dir="${Install.xstoreoverlay.work}/xstore" erroronmissingdir="false">
        <include name="linux/jre/**" unless="excludeLinux32" />
        <include name="windows/jre/**" unless="excludeWindows32" />
        <include name="linux_64/jre/**" unless="excludeLinux64" />
        <include name="windows_64/jre/**" unless="excludeWindows64" />
      </fileset>
      <fileset dir="${Install.xstoretemp}/xstore" erroronmissingdir="false">
        <include name="linux/jre/**" unless="excludeLinux32" />
        <include name="windows/jre/**" unless="excludeWindows32" />
        <include name="linux_64/jre/**" unless="excludeLinux64" />
        <include name="windows_64/jre/**" unless="excludeWindows64" />
      </fileset>
    </zipwithsummary>

    <!-- define the name and location of the target package -->
    <property name="jrepackagerfileDist" value="${jrepackager.dist.dir}/xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-${jre.packager.name}.jar" />

    <!-- if the target package exists, remove it before proceeding -->
    <delete file="${jrepackagerfileDist}" failonerror="false" />

    <!-- create the installer in the target location -->
    <installer file="${jrepackagerfileDist}" compress="true" installConfig="installgui/antinstall-jrepackager.xml" buildFile="installer/build-jrepackage.xml">
      <runtime dir="${installer.runtime.dir}"  includes="*.jar" />
      <fileset file="${jreoverlayzip}" />
      <zipfileset dir="${Install.resources}" prefix="resources">
        <include name="*.png" />
      </zipfileset>
      <zipfileset dir="${Install.lib}" prefix="lib" />
      <fileset file="${basedir}/xstore.install.properties" />
    </installer>

    <!-- copy the accompanying properties file to the target location -->
    <property name="jrepackager.ant.install.properties.file" location="${Install.xstoreoverlay.work}/xstore/installx/${jre.packager.name}/ant.install.properties" />
    <fail message="FATAL: Expected to find a required file at ${jrepackager.ant.install.properties.file} but did not find one.">
      <condition>
        <not>
          <available file="${jrepackager.ant.install.properties.file}" />
        </not>
      </condition>
    </fail>
    <copy todir="${jrepackager.dist.dir}" file="${jrepackager.ant.install.properties.file}" overwrite="true" verbose="true" />

    <!-- print details on the resulting file -->
    <fileinfo file="${jrepackagerfileDist}" property="jrepackager" />
    <echo file="${ixbldcomp.xstorecommon}" append="true">
Xstore JRE Packager
  NAME: ${jrepackager.name}
  SIZE: ${jrepackager.size}
  TIME: ${jrepackager.lastmod}
  </echo>
  </target>

  <target name="package-patch" description="Application patch for Xstore">
    <script language="javascript">project.setProperty("customer.id.lc", project.getProperty("customer.id").toLowerCase());</script>
    <property name="mssql.dfunc" value="GETDATE()" />
    <property name="oracle.dfunc" value="SYSDATE" />
    <property name="mssql.efunc" value="GO" />
    <property name="oracle.efunc" value="EXIT;" />
      
    <property name="work.dir" location="${basedir}/work" />
    <property name="output.dir" location="${user.dir}" />
    <property name="Install.resources" value="resources" />
    <property name="Install.common" value="installer/common" />
    <property name="Install.lib" value="lib" />
    
    <!-- CREATE DISTRO DIR -->
    <mkdir dir="${work.dir}" />

    <!-- APPEND PATCH SQL AND VERSION UPDATE TO CREATE DB-UPDATE.SQL -->
    <property name="patchSqlFileName" value="${work.dir}/db-update.sql" />
    <echo file="${patchSqlFileName}" append="false">
    </echo>
    <concat destfile="${patchSqlFileName}" append="true" fixlastline="true">
      <fileset file="${patch.db}" />
      <fileset file="${basedir}/database/ClientPatchData.sql" />
      <fileset file="${Install.resources}/db/db-version.sql" />
    </concat>

    <!-- handle adding custom tasks if provided -->
    <if>
      <length string="${patch.customscript}" trim="true" when="greater" length="0" />
      <then>
        <!-- split the provided file location into a path and filename -->
        <dirname file="${patch.customscript}" property="patch.customscript.dir" />
        <basename file="${patch.customscript}" property="patch.customscript.file" />
        <echo message="Including custom task script ${patch.customscript.file} in ${patch.customscript.dir} as custom-post.xml." />
      </then>
      <else>
        <!-- wire the expected values to paths that exist to allow the installer task to succeed -->
        <property name="patch.customscript.dir" location="${work.dir}" />
        <property name="patch.customscript.file" value="patch.script.not.provided" />
        <echo message="No custom task script was provided or will be included." />
      </else>
    </if>

    <writexstoreinstallproperties file="${basedir}/xstore.patch.properties" type="patch" />

    <!-- DB Script Variable Replacement -->
    <db-token-repl dir="${work.dir}" propertyfile="${basedir}/xstore.patch.properties" />

    <property name="patchfileName" value="xstore-${x.version}-${cust.version}-${patch.version}-${customer.id}${has.brand}-patch.jar" />
    <property name="patchfileDist" value="${output.dir}/${patchfileName}" />

    <delete file="${patchfileDist}" failonerror="false" />
    <installer file="${patchfileDist}" compress="true" installConfig="installgui/antinstall-patch.xml" buildFile="installer/install-patch.xml">
      <runtime dir="${installer.runtime.dir}"  includes="*.jar" />
      <zipfileset file="${patch.xstore}" fullpath="xstore-${cust.version}-${patch.version}.jar" />
      <zipfileset file="${patchSqlFileName}" fullpath="resources/db/${platform.db}/db-update.sql" />
      <zipfileset dir="${Install.common}" prefix="common" />
      <zipfileset dir="${patch.customscript.dir}" includes="${patch.customscript.file}" fullpath="custom/custom-post.xml" />
      <zipfileset dir="${Install.resources}" prefix="resources">
        <include name="db/${platform.db}/**" />
        <include name="*.png" />
      </zipfileset>
      <zipfileset dir="${Install.lib}" prefix="lib" />
      <zipfileset file="${basedir}/xstore.patch.properties" fullpath="xstore.install.properties" />
    </installer>

    <property name="patchbldcomp" value="${output.dir}/${customer.id}${has.brand}_xstore_${x.version}_${cust.version}_${patch.version}-bldcomp.txt" />

    <fileinfo file="${patchfileDist}" property="patch" />
    <echo file="${patchbldcomp}" append="false">
     CUSTOMER ID: ${customer.id}
    BASE VERSION: ${x.version}
CUSTOMER VERSION: ${cust.version}
   PATCH VERSION: ${patch.version}

Xstore POS Patch
  NAME: ${patch.name}
  SIZE: ${patch.size}
  TIME: ${patch.lastmod}

Xcenter Database Patch
    </echo>

    <!-- Iterate through Org IDs to build DB scripts -->
    <for list="${xcenter.org}" param="currentOrg" delimiter=",">
      <sequential>
      <local name="patchSqlDist" />
      <property name="patchSqlDist" value="${output.dir}/xstore-${x.version}-${cust.version}-${patch.version}-${customer.id}${has.brand}-xcenter-patch-DATA_ORG-@{currentOrg}.sql" />
      <delete file="${patchSqlDist}" failonerror="false" />
      <copy file="${patchSqlFileName}" tofile="${patchSqlDist}" overwrite="true" >
        <!-- apply platform filters -->
        <filterchain refid="xcenter.dbscript.token.filter" />
        <!-- apply other filters -->
        <filterchain>
           <tokenfilter>
            <replacestring from="$(OrgID)" to="@{currentOrg}" />
            <replacestring from="$(StoreID)" to="0" />
            <replacestring from="$(CountryID)" to="''" />
            <replacestring from="$(CurrencyID)" to="''" />
            <replacestring from="$(RegionID)" to="''" />
            <replacestring from="$(DFUNC)" to="${platform.db.dfunc}" />
            <replacestring from="$(EFUNC)" to="${platform.db.efunc}" />
            <replacestring from="$(BrandID)" to="'${customer.brand}'" />
            <replacestring from="$(CustomerID)" to="${customer.id}" />
            <replacestring from="$(BaseVersion)" to="${x.version}" />
            <replacestring from="$(CustVersion)" to="${cust.version}" />
            <replacestring from="$(PatchVersion)" to="${patch.version}" />
          </tokenfilter>
        </filterchain>
      </copy>
      <fileinfo file="${patchSqlDist}" property="patchSql" />
      <echo file="${patchbldcomp}" append="true">
             NAME: ${patchSql.name}
             SIZE: ${patchSql.size}
             TIME: ${patchSql.lastmod}
      </echo>
      </sequential>
    </for>

    <echo file="${patchbldcomp}" append="true">

*******************************************************************************
SPECIAL INSTALLATION/TESTING INSTRUCTIONS
*******************************************************************************

    </echo>

    <!-- APPEND PATCH INSTALLATION INSTRUCTIONS -->
    <concat destfile="${patchbldcomp}" append="true">
      <fileset file="${basedir}/patchinstall.txt" />
    </concat>

    <!-- CHANGE TO DOS LINE BREAKS -->
    <fixcrlf file="${patchbldcomp}" eol="dos" />

    <!-- CLEANUP TEMP DIR -->
    <delete dir="${work.dir}" />
  </target>

  <target name="package-xservices" unless="isPatch" depends="prep-overlay" description="Build a distribution of the Xcenter/Xstore Services">
    <!-- determine whether the provided overlay paths are relative or absolute, and proceed accordingly -->
    <condition property="xservices.install.overlay.dir.raw" value="${user.dir}/${xservices.install.overlay.dir}" else="${xservices.install.overlay.dir}">
      <matches string="${xservices.install.overlay.dir}" pattern="^\..*$" />
    </condition>
    <condition property="xservices.overlay.dir.raw" value="${user.dir}/${xservices.overlay.dir}" else="${xservices.overlay.dir}">
      <matches string="${xservices.overlay.dir}" pattern="^\..*$" />
    </condition>
    <property name="xservices.install.overlay.dir.fullyqualified" location="${xservices.install.overlay.dir.raw}" />
    <property name="xservices.overlay.dir.fullyqualified" location="${xservices.overlay.dir.raw}" />
    <echo message="Custom Xservices components will be sourced from '${xservices.overlay.dir.fullyqualified}'.  Custom Xservices install components will be sourced from '${xservices.install.overlay.dir.fullyqualified}'." />

    <!-- define resulting files -->
    <property name="xservices.war.filename" value="xservices-${x.version}-${customer.id}-${cust.version}.war" />
    <property name="xservices.war.archive" location="${Install.dist.work}/${xservices.war.filename}" />

    <!-- define incoming directories -->
    <property name="base.xservices.install.src.dir" location="${Install.servicestemp}/xservices" />
    <property name="base.xservices.config.src.dir" location="${Install.servicestemp}/xservices-config" />
    <property name="base.xservices.log.src.dir" location="${Install.servicestemp}/xservices-log" />
    <property name="overlay.xservices.install.src.dir" location="${xservices.install.overlay.dir.fullyqualified}/xservices" />
    <property name="overlay.xservices.config.src.dir" location="${xservices.install.overlay.dir.fullyqualified}/xservices-config" />
    <property name="overlay.xservices.log.src.dir" location="${xservices.install.overlay.dir.fullyqualified}/xservices-log" />

    <!-- create a war that includes overlay components -->
    <warwithsummary destfile="${xservices.war.archive}" duplicate="preserve">
      <fileset dir="${xservices.overlay.dir.fullyqualified}" />
      <zipfileset src="${custconfigjar}" prefix="WEB-INF/classes" excludes="META-INF/MANIFEST.MF" />
      <zipfileset src="${custposjar}" prefix="WEB-INF/classes" excludes="META-INF/MANIFEST.MF" />
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib" prefix="WEB-INF/lib">
        <include name="${customer.id.lc}-*.jar" />
        <include name="ops-*.jar" />
        <exclude name="${custconfigjarname}" />
        <exclude name="${custposjarname}" />
      </zipfileset>
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/license" erroronmissingdir="false" prefix="META-INF/license" />
      <zipfileset dir="${Install.xstoretemp}/xstore/license" prefix="META-INF/license" />
      <fileset dir="${Install.serviceswartemp}" />
    </warwithsummary>

    <!-- create install packages -->
    <for list="${x.type}" param="type" trim="true">
      <sequential>
        <packagexservices type="@{type}" />
      </sequential>
    </for>
  </target>

  <macrodef name="packagexservices">
    <attribute name="type" />
    <sequential>
      <echo message="Packaging Xservices for: @{type}" />

      <!-- create filesets that represent the incoming base files -->
      <fileset id="base.xservices.install.fileset" dir="${base.xservices.install.src.dir}">
        <exclude name="bin/*.linux.*" if="excludeLinux32" />
        <exclude name="bin/*.windows.*" if="excludeWindows32" />
        <exclude name="bin/*.linux_64.*" if="excludeLinux64" />
        <exclude name="bin/*.windows_64.*" if="excludeWindows64" />
        <exclude name="linux/" if="excludeLinux32" />
        <exclude name="windows/" if="excludeWindows32" />
        <exclude name="linux_64/" if="excludeLinux64" />
        <exclude name="windows_64/" if="excludeWindows64" />
      </fileset>
      <fileset id="base.support.hardware.libraries.fileset" dir="${Install.xstoretemp}/xstore">
        <include name="linux/lib/**" unless="excludeLinux32" />
        <include name="windows/lib/**" unless="excludeWindows32" />
        <include name="linux_64/lib/**" unless="excludeLinux64" />
        <include name="windows_64/lib/**" unless="excludeWindows64" />
      </fileset>
      <zipfileset id="base.support.hardware.jars.fileset" dir="${Install.xstoretemp}/xstore/lib/ext" prefix="lib/hardware">
        <include name="DLSJavaPOS*.jar" if="isDatalogic" />
        <include name="dpot*.jar" if="isDigitalPersona" />
        <include name="dpjavapos*.jar" if="isDigitalPersona" />
        <include name="dpuareu*.jar" if="isDigitalPersona" />
        <include name="epsonjpos/**" if="isEpson" />
        <include name="FTXSJpos*.jar" if="isFuji" />
        <include name="mtlgjpos*.jar" if="isHoneywell" />
        <include name="ijpos*.jar" if="isIngenico" />
        <include name="vfjpos*.jar" if="isVerifone" />
        <include name="RXTX*.jar" />
      </zipfileset>
      <fileset id="base.xservices.config.fileset" dir="${base.xservices.config.src.dir}" excludes="keystore" />
      <fileset id="base.xservices.config.upgrade.fileset" dir="${base.xservices.config.src.dir}">
        <include name="jetty*" />
        <include name="xservices*" />
        <include name="res/keys/verifone/**/*" />
        <include name="res/ssl/**/*" />
        <exclude name="xservices.properties" />
      </fileset>
      <fileset id="base.xservices.log.fileset" dir="${base.xservices.log.src.dir}" />

      <!-- create filesets that represent the overlay components that will be included in the app install -->
      <zipfileset id="xservices.war.zipfileset" file="${xservices.war.archive}" fullpath="webapps/${xservices.war.filename}" />
      <fileset id="overlay.xservices.fileset" dir="${overlay.xservices.install.src.dir}" erroronmissingdir="false" />
      <fileset id="overlay.xservices.config.fileset" dir="${overlay.xservices.config.src.dir}" excludes="keystore" />
      <fileset id="overlay.xservices.config.upgrade.fileset" dir="${overlay.xservices.config.src.dir}">
        <include name="jetty*" />
        <include name="xservices*" />
        <include name="res/keys/verifone/**/*" />
        <include name="res/ssl/**/*" />
        <exclude name="xservices.properties" />
      </fileset>
      <fileset id="overlay.xservices.log.fileset" dir="${overlay.xservices.log.src.dir}" erroronmissingdir="false" />

      <!-- define props for output -->
      <local name="xservices.app.archive" />
      <local name="xservices.config.archive" />
      <local name="xservices.log.archive" />
      <local name="xservicesprop" />
      <local name="xservices.out.dir" />
      <property name="xservices.app.archive" value="xservices.zip" />
      <property name="xservices.config.archive" value="xservices-config.zip" />
      <property name="xservices.log.archive" value="xservices-log.zip" />
      <property name="xservicesprop" value="xstore.install.properties" />
      <property name="xservices.out.dir" location="${Install.dist.work}/@{type}" />

      <!-- clean up any previously existing files, should they exist -->
      <delete>
        <fileset dir="${xservices.out.dir}" erroronmissingdir="false">
          <include name="${xservices.app.archive}" />
          <include name="${xservices.config.archive}" />
          <include name="${xservices.log.archive}" />
        </fileset>
      </delete>

      <!-- create the distro and work dirs -->
      <mkdir dir="${xservices.dist.dir}" />
      <mkdir dir="${xservices.out.dir}" />


      <switch value="@{type}">
        <case value="update">
          <!-- create an update distro set that includes only the application -->
          <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${xservices.out.dir}/${xservices.app.archive}">
            <zipfileset refid="xservices.war.zipfileset" />
          </zipwithsummary>
        </case>
        <case value="upgrade">
          <parallel>
            <!-- create an upgrade distro set that includes a slightly abbreviated set of distro files -->
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${xservices.out.dir}/${xservices.app.archive}">
              <zipfileset refid="xservices.war.zipfileset" />
              <fileset refid="overlay.xservices.fileset" />
              <zipfileset refid="base.support.hardware.jars.fileset" />
              <fileset refid="base.support.hardware.libraries.fileset" />
              <fileset refid="base.xservices.install.fileset" />
            </zipwithsummary>
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${xservices.out.dir}/${xservices.config.archive}">
              <zipfileset file="${overlay.xservices.config.src.dir}/xservices.properties" fullpath="xservices.upgrade.properties" />
              <zipfileset file="${base.xservices.config.src.dir}/xservices.properties" fullpath="xservices.upgrade.properties" />
              <zipfileset dir="${Install.xstoreoverlay.work}/xstore/res/ssl" includes="*store" prefix="res/ssl" erroronmissingdir="false" />
              <fileset refid="overlay.xservices.config.upgrade.fileset" />
              <fileset refid="base.xservices.config.upgrade.fileset" />
            </zipwithsummary>
          </parallel>
        </case>
        <default>
          <parallel>
            <!-- create a full distro set -->
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${xservices.out.dir}/${xservices.app.archive}">
              <zipfileset refid="xservices.war.zipfileset" />
              <fileset refid="overlay.xservices.fileset" />
              <zipfileset refid="base.support.hardware.jars.fileset" />
              <fileset refid="base.support.hardware.libraries.fileset" />
              <fileset refid="base.xservices.install.fileset" />
            </zipwithsummary>
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${xservices.out.dir}/${xservices.config.archive}">
              <zipfileset dir="${Install.xstoreoverlay.work}/xstore/res/keys" includes="*.cip" prefix="res/keys" />
              <zipfileset dir="${Install.xstoreoverlay.work}/xstore/res/ssl" includes="*store" prefix="res/ssl" erroronmissingdir="false" />
              <fileset refid="overlay.xservices.config.fileset" />
              <fileset refid="base.xservices.config.fileset" />
            </zipwithsummary>
            <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${xservices.out.dir}/${xservices.log.archive}">
              <fileset refid="overlay.xservices.log.fileset" />
              <fileset refid="base.xservices.log.fileset" />
            </zipwithsummary>
          </parallel>

          <property name="xservices.ant.install.properties.file" location="${Install.xstoreoverlay.work}/xstore/installx/xservices/ant.install.properties" />
          <fail message="FATAL: Expected to find a required file at ${xservices.ant.install.properties.file} but did not find one.">
            <condition>
              <not>
                <available file="${xservices.ant.install.properties.file}" />
              </not>
            </condition>
          </fail>
          <copy todir="${xservices.dist.dir}" file="${xservices.ant.install.properties.file}" overwrite="true" verbose="true" />
        </default>
      </switch>

      <!-- create the installer jar -->
      <writexstoreinstallproperties file="${xservices.out.dir}/${xservicesprop}" type="@{type}" />
      <local name="servicesfileName" />
      <property name="servicesfileName" value="xservices-${x.version}-${cust.version}-${customer.id}-@{type}.jar" />
      <delete file="${xservices.dist.dir}/${servicesfileName}" failonerror="false" />
      <installer file="${xservices.dist.dir}/${servicesfileName}" compress="true" installConfig="installgui/antinstall-xservices.xml" buildFile="installer/install-xservices.xml">
        <runtime dir="${installer.runtime.dir}"  includes="*.jar" />
        <fileset dir="${xservices.out.dir}">
          <include name="xservices*.zip" />
        </fileset>
        <zipfileset dir="${Install.resources}" prefix="resources">
          <include name="*.png" />
        </zipfileset>
        <zipfileset dir="${Install.lib}" prefix="lib" />
        <zipfileset dir="${Install.common}" prefix="common" />
        <zipfileset dir="${Install.xstoreoverlay.work}/xstore/installx/xservices" prefix="custom" excludes="*ant.install.properties" />
        <zipfileset dir="${Install.xstoretemp}/xstore/lib" includes="ext/commons-collections-*.jar,ext/commons-io*.jar,ext/commons-lang*.jar,ext/commons-logging*.jar,ext/commons-configuration*.jar,ext/log4j-*.jar,ext/xercesImpl*.jar,ext/xml-apis.jar,dtv-util.jar,dtv-upgrader.jar,ext/jna-*.jar" prefix="upgraderlib" />
        <fileset file="${xservices.out.dir}/${xservicesprop}" />
      </installer>


      <fileinfo file="${xservices.dist.dir}/${servicesfileName}" property="xservices" />
      <echo file="${ixbldcomp.xstorepos}" append="true">
Xservices - @{type}
  NAME: ${xservices.name}
  SIZE: ${xservices.size}
  TIME: ${xservices.lastmod}
      </echo>
    </sequential>
  </macrodef>

  <target name="package-poslog" depends="prep-overlay" description="Build a stand-alone version of the Xstore PosLogGenerator Utility." unless="isPatch">
    <!-- SET THE dtv.CustomerId IN system.properties -->
    <propertyfile file="${Install.resources}/poslog/system.properties">
      <entry key="dtv.CustomerId" value="${customer.id}" />
      <entry key="dtv.CustomerId.salt" value="${customerId.salt}" />
    </propertyfile>

    <!-- define patternsets for incoming files -->
    <patternset id="poslog.nonlib.files">
      <!-- platform and wrapper files -->
      <include name="wrapper/**" />
      <include name="linux/bin/**" unless="excludeLinux32" />
      <include name="linux/lib/**" unless="excludeLinux32" />
      <include name="linux/script/tlog.*" unless="excludeLinux32" />
      <include name="linux_64/bin/**" unless="excludeLinux32" />
      <include name="linux_64/lib/**" unless="excludeLinux32" />
      <include name="linux_64/script/tlog.*" unless="excludeLinux64" />
      <include name="windows/bin/**" unless="excludeLinux32" />
      <include name="windows/lib/**" unless="excludeLinux32" />
      <include name="windows/script/tlog.*" unless="excludeWindows32" />
      <include name="windows_64/bin/**" unless="excludeLinux32" />
      <include name="windows_64/lib/**" unless="excludeLinux32" />
      <include name="windows_64/script/tlog.*" unless="excludeWindows64" />
      <!-- other misc directories -->
      <include name="config/log4j.xml" />
      <include name="license/**" />
      <include name="log/**" />
      <include name="res/keys/**" />
      <!-- misc excludes -->
      <exclude name="download/**" />
    </patternset>
    <patternset id="poslog.lib.files" includes="dtv-data2.jar,dtv-docbuilder.jar,dtv-dtx.jar,dtv-countrypack.jar,dtv-event.jar,dtv-hardware.jar,dtv-i18n.jar,dtv-ipc.jar,dtv-password.jar,dtv-logbuilder.jar,dtv-mvc.jar,dtv-posframework.jar,dtv-pricing2.jar,dtv-service*.jar,dtv-xst*.jar,dtv-upgrader.jar,dtv-util.jar,dtv-util-net.jar,dtv-xunit-api.jar,dtv-ui.jar,pos.jar,config*.jar,ops-*.jar,${customer.id.lc}-*.jar,${custposjarname}${custconfigjarname}${posloggen.extra.lib.files}" />
    <patternset id="poslog.lib.ext.files" includes="commons-*.jar,concurrent.jar,log4j-*.jar,ojdbc*.jar,spring-*.jar,javax.inject*.jar,jta-*.jar,sqljdbc*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs.jar,ucp*.jar,guava*.jar,jna-*.jar,slf4j*.jar${posloggen.extra.lib.ext.files}" />

    <!-- create the artifact zip file -->
    <delete file="${Install.dist.work}/xstore-poslog.zip" failonerror="false" />
    <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${Install.dist.work}/xstore-poslog.zip">
      <!-- App Version Properties File -->
      <zipfileset file="${versionfile}" />
      <!-- customer components (we must allow any base component to be replaced, so this includes everything that is pulled from base and more) -->
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
        <patternset refid="poslog.nonlib.files" />
      </zipfileset>
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib" prefix="lib">
        <patternset refid="poslog.lib.files" />
      </zipfileset>
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib/ext" prefix="lib/ext">
        <patternset refid="poslog.lib.ext.files" />
      </zipfileset>
      <!-- Property Merge & Config Files -->
      <zipfileset dir="${Install.resources}/poslog">
        <exclude name="linux/**" if="excludeLinux32" />
        <exclude name="linux_64/**" if="excludeLinux64" />
        <exclude name="windows/**" if="excludeWindows32" />
        <exclude name="windows_64/**" if="excludeWindows64" />
      </zipfileset>
      <!-- base components -->
      <zipfileset dir="${Install.xstoretemp}/xstore">
        <patternset refid="poslog.nonlib.files" />
      </zipfileset>
      <zipfileset dir="${Install.xstoretemp}/xstore/lib" prefix="lib">
        <patternset refid="poslog.lib.files" />
      </zipfileset>
      <zipfileset dir="${Install.xstoretemp}/xstore/lib/ext" prefix="lib/ext">
        <patternset refid="poslog.lib.ext.files" />
      </zipfileset>
    </zipwithsummary>

    <mkdir dir="${posloggen.dist.dir}" />
    <property name="poslogfileName" value="xstore-${x.version}-${cust.version}-${customer.id}-posloggenerator.jar" />
    <delete file="${posloggen.dist.dir}/${poslogfileName}" failonerror="false" />
    <installer file="${posloggen.dist.dir}/${poslogfileName}" compress="true" installConfig="installgui/antinstall-poslog.xml" buildFile="installer/install-poslog.xml">
      <runtime dir="${installer.runtime.dir}"  includes="*.jar" />
      <fileset dir="${Install.dist.work}" includes="xstore-poslog.zip" />
      <zipfileset dir="${Install.common}" prefix="common" includes="*.*" />
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/installx/poslog" prefix="custom" excludes="*ant.install.properties" />
      <zipfileset dir="${Install.resources}" prefix="resources">
        <include name="*.png" />
      </zipfileset>
      <zipfileset dir="${Install.lib}" prefix="lib" />
      <zipfileset dir="${basedir}" includes="xstore.install.properties" />
    </installer>

    <!-- write file details -->
    <fileinfo file="${posloggen.dist.dir}/${poslogfileName}" property="posloggen" />
    <echo file="${ixbldcomp.xstoreoffice}" append="true">
Poslog Generator
  NAME: ${posloggen.name}
  SIZE: ${posloggen.size}
  TIME: ${posloggen.lastmod}
    </echo>


    <property name="poslog.ant.install.properties.file" location="${Install.xstoreoverlay.work}/xstore/installx/poslog/ant.install.properties" />
    <fail message="FATAL: Expected to find a required file at ${poslog.ant.install.properties.file} but did not find one.">
      <condition>
        <not>
          <available file="${poslog.ant.install.properties.file}" />
        </not>
      </condition>
    </fail>
    <copy todir="${posloggen.dist.dir}" file="${poslog.ant.install.properties.file}" overwrite="true" verbose="true" />
  </target>

  <target name="package-genkeys" depends="prep-overlay" description="Package the GenKeys utility.">
    <!-- set defaults in the system.properties file -->
    <propertyfile file="${Install.resources}/genkeys/system.properties">
      <entry key="dtv.CustomerId" value="${customer.id}" />
      <entry key="dtv.CustomerId.salt" value="${customerId.salt}" />
    </propertyfile>

    <!-- define patternsets for incoming files -->
    <patternset id="genkeys.nonlib.files">
      <!-- platform and wrapper files -->
      <include name="wrapper/**" />
      <include name="linux/script/gen-keys.*" unless="excludeLinux32" />
      <include name="linux/script/encrypt.*" unless="excludeLinux32" />
      <include name="linux/bin/*wrapper*" unless="excludeLinux32" />
      <include name="linux/lib/*wrapper*" unless="excludeLinux32" />
      <include name="linux_64/script/gen-keys.*" unless="excludeLinux64" />
      <include name="linux_64/script/encrypt.*" unless="excludeLinux64" />
      <include name="linux_64/bin/*wrapper*" unless="excludeLinux64" />
      <include name="linux_64/lib/*wrapper*" unless="excludeLinux64" />
      <include name="windows/script/gen-keys.*" unless="excludeWindows32" />
      <include name="windows/script/encrypt.*" unless="excludeWindows32" />
      <include name="windows/bin/*wrapper*" unless="excludeWindows32" />
      <include name="windows/lib/*wrapper*" unless="excludeWindows32" />
      <include name="windows_64/script/gen-keys.*" unless="excludeWindows64" />
      <include name="windows_64/script/encrypt.*" unless="excludeWindows64" />
      <include name="windows_64/bin/*wrapper*" unless="excludeWindows64" />
      <include name="windows_64/lib/*wrapper*" unless="excludeWindows64" />
      <!-- other misc directories -->
      <include name="config/log4j.xml" />
      <include name="license/**" />
      <include name="log/**" />
      <include name="res/keys/**" />
    </patternset>
    <patternset id="genkeys.lib.files" includes="dtv-util.jar,ops-*.jar,${customer.id.lc}-*.jar,${custposjarname}${custconfigjarname}${genkeys.extra.lib.files}" />
    <patternset id="genkeys.lib.ext.files" includes="log4j*.jar,commons-codec*.jar,commons-io*.jar,guava-*.jar,jna-*.jar,spring-instrument-*.jar${genkeys.extra.lib.ext.files}" />

    <!-- create the artifact zip file -->
    <delete file="${Install.dist.work}/xstore-genkeys.zip" failonerror="false" />
    <zipwithsummary zip64Mode="always" level="9" duplicate="preserve" destfile="${Install.dist.work}/xstore-genkeys.zip">
      <!-- App Version Properties File -->
      <zipfileset file="${versionfile}" />
      <!-- customer components (we must allow any base component to be replaced, so this includes everything that is pulled from base and more) -->
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore">
        <patternset refid="genkeys.nonlib.files" />
      </zipfileset>
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib" prefix="lib">
        <patternset refid="genkeys.lib.files" />
      </zipfileset>
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/lib/ext" prefix="lib/ext">
        <patternset refid="genkeys.lib.ext.files" />
      </zipfileset>
      <!-- InstallX Files -->
      <zipfileset dir="${Install.resources}/genkeys">
        <patternset refid="genkeys.nonlib.files" />
      </zipfileset>
      <!-- base components -->
      <zipfileset dir="${Install.xstoretemp}/xstore">
        <patternset refid="genkeys.nonlib.files" />
      </zipfileset>
      <zipfileset dir="${Install.xstoretemp}/xstore/lib" prefix="lib">
        <patternset refid="genkeys.lib.files" />
      </zipfileset>
      <zipfileset dir="${Install.xstoretemp}/xstore/lib/ext" prefix="lib/ext">
        <patternset refid="genkeys.lib.ext.files" />
      </zipfileset>
    </zipwithsummary>

    <!-- build the installer -->
    <mkdir dir="${genkeys.dist.dir}" />
    <property name="genkeysfileName" value="xstore-${x.version}-${cust.version}-${customer.id}-genkeys.jar" />
    <delete file="${genkeys.dist.dir}/${genkeysfileName}" failonerror="false" />
    <installer file="${genkeys.dist.dir}/${genkeysfileName}" compress="true" installConfig="installgui/antinstall-genkeys.xml" buildFile="installer/install-genkeys.xml">
      <runtime dir="${installer.runtime.dir}"  includes="*.jar" />
      <fileset dir="${Install.dist.work}" includes="xstore-genkeys.zip" />
      <zipfileset dir="${Install.common}" prefix="common" includes="*.*" />
      <zipfileset dir="${Install.xstoreoverlay.work}/xstore/installx/genkeys" prefix="custom" excludes="*ant.install.properties" />
      <zipfileset dir="${Install.resources}" prefix="resources">
        <include name="*.png" />
      </zipfileset>
      <zipfileset dir="${Install.lib}" prefix="lib" />
      <zipfileset dir="${basedir}" includes="xstore.install.properties" />
    </installer>

    <!-- write file details -->
    <fileinfo file="${genkeys.dist.dir}/${genkeysfileName}" property="genkeys" />
    <echo file="${ixbldcomp.xstorecommon}" append="true">
GenKeys
  NAME: ${genkeys.name}
  SIZE: ${genkeys.size}
  TIME: ${genkeys.lastmod}
    </echo>

    <!-- copy the ant.install.properties file -->
    <property name="genkeys.ant.install.properties.file" location="${Install.xstoreoverlay.work}/xstore/installx/genkeys/ant.install.properties" />
    <fail message="FATAL: Expected to find a required file at ${genkeys.ant.install.properties.file} but did not find one.">
      <condition>
        <not>
          <available file="${genkeys.ant.install.properties.file}" />
        </not>
      </condition>
    </fail>
    <copy todir="${genkeys.dist.dir}" file="${genkeys.ant.install.properties.file}" overwrite="true" verbose="true" />
  </target>

  <target name="build-db-zip" depends="prep-overlay" description="Build a zip file containing all db scripts" unless="isPatch">
    <property name="xsdbfile" location="${xstore.dist.dir}/xstore-${x.version}-${cust.version}-${customer.id}${has.brand}-dbscripts.zip" />
    <delete file="${xsdbfile}" failonerror="false" />

    <zipwithsummary zip64Mode="always" level="9" destfile="${xsdbfile}">
      <zipfileset dir="${Install.xstoreoverlay.database.work}" prefix="customer">
        <include name="${customer.id}*.sql" />
      </zipfileset>
      <zipfileset dir="${Install.dbtemp}/${platform.db}" prefix="base" />
    </zipwithsummary>
  </target>

  <target name="build-docs" depends="prep-overlay" description="Create build comp detailing build artifacts" unless="isPatch">
    <string id="bldcomp.header">     CUSTOMER ID: ${customer.id}
    BASE VERSION: ${x.version}
CUSTOMER VERSION: ${cust.version}
   PATCH VERSION: ${patch.version}

    </string>
    <string id="bldcomp.instructionheader">

    *******************************************************************************
SPECIAL INSTALLATION/TESTING INSTRUCTIONS
*******************************************************************************

    </string>

    <!-- create underscore instead of dot separated version strings (this is required by some upstream systems) -->
    <propertyregex property="x.version.underscore" input="${x.version}" regexp="\." replace="_" global="true" />
    <propertyregex property="cust.version.underscore" input="${cust.version}" regexp="\." replace="_" global="true" />

    <!-- delineate package content -->
    <zipfileset id="xstorepos.dist.contents" dir="${xstorepos.distVdir}" erroronmissingdir="false" prefix="${distv}" />
    <zipfileset id="xstoreoffice.dist.contents" dir="${xstoreoffice.distVdir}" erroronmissingdir="false" prefix="${distv}" />
    <zipfileset id="xstorecommon.dist.contents" dir="${xstorecommon.distVdir}" erroronmissingdir="false" prefix="${distv}" />


    <!-- build dist packages -->
    <parallel>

    <!-- build a zip containing xstore point of service output -->
      <if>
        <resourcecount refid="xstorepos.dist.contents" count="0" when="greater" />
        <then>
          <zipwithsummary zip64Mode="always" destfile="${dist.dir}/OracleRetailXstorePointofService_${x.version.underscore}_${customer.id}${has.brand}_${cust.version.underscore}.zip">
            <zipfileset refid="xstorepos.dist.contents" />
            <zipfileset file="${Install.resources}/readme.html" />
            <!-- build the bldcomp file -->
            <mappedresources>
              <concat>
                <string refid="bldcomp.header" />
                <file file="${ixbldcomp.xstorepos}" />
                <string refid="bldcomp.instructionheader" />
                <fileset dir="${Install.xstoreoverlay.work}/xstore/installx" includes="*bldcomp.txt" />
                <fileset file="${basedir}/howtoinstall.txt" />
                <filterchain>
                  <fixcrlf eol="dos" />
                </filterchain>
              </concat>
              <mergemapper to="OracleRetailXstorePointofService_${customer.id}${has.brand}_xstore_${x.version.underscore}_${cust.version.underscore}-bldcomp.txt" />
            </mappedresources>
          </zipwithsummary>
        </then>
      </if>

      <!-- build a zip containing xstore office output -->
      <if>
        <resourcecount refid="xstoreoffice.dist.contents" count="0" when="greater" />
        <then>
          <zipwithsummary zip64Mode="always" destfile="${dist.dir}/OracleRetailXstoreOffice_${x.version.underscore}_${customer.id}${has.brand}_${cust.version.underscore}.zip">
            <zipfileset refid="xstoreoffice.dist.contents" />
            <fileset file="${Install.resources}/readme.html" />
            <!-- build the bldcomp file -->
            <mappedresources>
              <concat>
                <string refid="bldcomp.header" />
                <file file="${ixbldcomp.xstoreoffice}" />
                <string refid="bldcomp.instructionheader" />
                <fileset dir="${Install.xstoreoverlay.work}/xstore/installx" includes="*bldcomp.txt" />
                <fileset file="${basedir}/howtoinstall.txt" />
                <filterchain>
                  <fixcrlf eol="dos" />
                </filterchain>
              </concat>
              <mergemapper to="OracleRetailXstoreOffice_${customer.id}${has.brand}_xstore_${x.version.underscore}_${cust.version.underscore}-bldcomp.txt" />
            </mappedresources>
          </zipwithsummary>
        </then>
      </if>


      <!-- build a zip containing components common to both -->
      <if>
        <resourcecount refid="xstorecommon.dist.contents" count="0" when="greater" />
        <then>
          <zipwithsummary zip64Mode="always" destfile="${dist.dir}/OracleRetailXstoreCommon_${x.version.underscore}_${customer.id}${has.brand}_${cust.version.underscore}.zip">
            <zipfileset refid="xstorecommon.dist.contents" />
            <fileset file="${Install.resources}/readme.html" />
            <!-- build the bldcomp file -->
            <mappedresources>
              <concat>
                <string refid="bldcomp.header" />
                <file file="${ixbldcomp.xstorecommon}" />
                <string refid="bldcomp.instructionheader" />
                <fileset dir="${Install.xstoreoverlay.work}/xstore/installx" includes="*bldcomp.txt" />
                <fileset file="${basedir}/howtoinstall.txt" />
                <filterchain>
                  <fixcrlf eol="dos" />
                </filterchain>
              </concat>
              <mergemapper to="OracleRetailXstoreCommon_${customer.id}${has.brand}_xstore_${x.version.underscore}_${cust.version.underscore}-bldcomp.txt" />
            </mappedresources>
          </zipwithsummary>
        </then>
      </if>
    </parallel>

    <!-- create checksums for the files -->
    <checksum>
      <fileset dir="${dist.dir}" includes="*.zip" />
    </checksum>

    <!-- CLEANUP TEMP DIRS UNLESS IN DEBUG MODE -->
    <if>
      <istrue value="${clean-temp}" />
      <then>
        <clean-temp />
      </then>
    </if>
  </target>

  <macrodef name="db-token-repl" description="Token variable replacement in DB scripts">
    <attribute name="propertyfile" default="xstore.install.properties"/>
    <attribute name="dir" default="${Install.resources}/db/${platform.db}" />
    <sequential>
      <!-- DB Script Variable Replacement -->
      <replace dir="@{dir}" propertyfile="@{propertyfile}" summary="true">
        <include name="**/*.*" />
        <replacefilter token="$(DFUNC)" property="${platform.db}-dfunc" />
        <replacefilter token="$(EFUNC)" property="${platform.db}-efunc" />
        <replacefilter token="$(BrandID)" value="'${customer.brand}'" />
        <replacefilter token="$(CustomerID)" value="${customer.id}" />
        <replacefilter token="$(BaseVersion)" value="${x.version}" />
        <replacefilter token="$(CustVersion)" value="${cust.version}" />
        <replacefilter token="$(PatchVersion)" value="${patch.version}" />
      </replace>
    </sequential>
  </macrodef>

  <macrodef name="clean-temp">
    <sequential>
      <delete dir="${work.dir}" />
    </sequential>
  </macrodef>

  <target name="prep-overlay" description="Prepares overlay for packaging." unless="isPatch">
    <!-- If there is a base schema overide, set the path for it.  Otherwise use the default base schema. -->
    <condition property="base.schema.path.raw" value="${Install.xstoreoverlay.database.work}/${customer.id}BaseSchema.sql" else="${Install.dbtemp}/${platform.db}/db-define.sql">
      <available file="${Install.xstoreoverlay.database.work}/${customer.id}BaseSchema.sql" />
    </condition>
    <property name="base.schema" location="${base.schema.path.raw}" />
    <echo message="Using base schema: ${base.schema}" />

    <!-- Make a copy of the base-xstore.properties file if this is an upgrade and an upgrade properties file wasn't provided in the overlay -->
    <!-- this will be excluded at packaging time for installs that are not upgrades. -->
    <if>
      <and>
        <not>
          <available file="${Install.xstoreoverlay.work}/xstore/updates/base-xstore.upgrade.properties" />
        </not>
        <contains string="${x.type}" substring="upgrade" />
      </and>
      <then>
        <copy file="${Install.resources}/pos/updates/base-xstore.properties" tofile="${Install.resources}/pos/updates/base-xstore.upgrade.properties" verbose="true" />
      </then>
    </if>

    <!-- update dataserver.conf if the platform is sql server and no override exists in the overlay -->
    <if>
      <and>
        <isset property="ismssqlormssqlunicode" />
        <not>
          <available file="${Install.xstoreoverlay.work}/xstore/wrapper/conf/dataserver.conf" />
        </not>
      </and>
      <then>
        <echo message="-- DB Platform detected to be mssql and no overlay override was detected - Updating dataserver.conf file --" />
        <copy file="${Install.xstoretemp}/xstore/wrapper/conf/dataserver.conf" todir="${Install.xstoreoverlay.work}/xstore/wrapper/conf" />
        <!-- remove comment from the sql server line -->
        <replaceregexp file="${Install.xstoreoverlay.work}/xstore/wrapper/conf/dataserver.conf" match="(# SQL Server[ \r\n]+)#" replace="\1" flags="g" />
        <!-- comment out the oracle line -->
        <replaceregexp file="${Install.xstoreoverlay.work}/xstore/wrapper/conf/dataserver.conf" match="(# Oracle[ \r\n]+)" replace="\1#" flags="g" />
      </then>
    </if>

    <!-- add dataserver config to the customer's config jar if it is not present in the overlay -->
    <if>
      <not>
        <resourceexists>
          <zipentry zipfile="${custconfigjar}" name="dataserver/DataSourceConfig.xml" />
        </resourceexists>
      </not>
      <then>
        <echo message="-- No dataserver/DataSourceConfig.xml file was found in the overlay jar - adding one to it --" />
        <jar destfile="${custconfigjar}" update="true">
          <zipfileset dir="${Install.resources}/dataserver" includes="DataSourceConfig.xml" prefix="dataserver" />
        </jar>
      </then>
    </if>

    <!-- handle download file tasks -->
    <property name="overlay.download.directory" location="${Install.xstoreoverlay.work}/xstore/download" />
    <!-- if the ant.install.proeprties specified a download that should be included, pull it in -->
    <if>
      <and>
        <contains string="${x.type}" substring="install" />
        <length string="${file.download}" trim="true" when="greater" length="0" />
        <length file="${file.download}" when="greater" length="0" />
      </and>
      <then>
        <echo message="Copy download file specified by file.download (${file.download}) to download directory." />
        <copy file="${file.download}" todir="${overlay.download.directory}" failonerror="false" overwrite="true" verbose="true" />
      </then>
    </if>
    <!-- If the customer overlay includes a zipped download, extract it -->
    <if>
      <and>
        <contains string="${x.type}" substring="install" />
        <available file="${overlay.download.directory}/download.zip" />
      </and>
      <then>
        <echo message="Extract download.mnt from download.zip in customer project" />
        <unzip src="${overlay.download.directory}/download.zip" dest="${overlay.download.directory}" overwrite="true" />
      </then>
    </if>

    <!-- DB DROP Scripts -->
    <copy file="${Install.dbtemp}/${platform.db}/etc/clean.sql" tofile="${dbsql.dir}/clean.sql" overwrite="true" />
    <copy file="${Install.dbtemp}/${platform.db}/etc/clean_users_roles.sql" tofile="${dbsql.dir}/clean_users_roles.sql" overwrite="true" />

    <!-- BASE DB CREATE -->
    <copy file="${Install.dbtemp}/${platform.db}/db-create.sql" tofile="${dbsql.dir}/db-create.sql" overwrite="true" />

    <!-- BASE DB SYNONYM SCRIPT -->
    <copy file="${Install.dbtemp}/${platform.db}/etc/Synonyms.sql" tofile="${dbsql.dir}/Synonyms.sql" overwrite="true" />
    <copy file="${Install.dbtemp}/${platform.db}/etc/DBAUserSynonyms.sql" tofile="${dbsql.dir}/DBAUserSynonyms.sql" overwrite="true" />

    <!-- prepare database scripts -->
    <!-- base schema -->
    <copy file="${base.schema}" tofile="${dbsql.dir}/baseSchema.sql" overwrite="true" />
    <!-- replication schema -->
    <copy file="${Install.dbtemp}/${platform.db}/Replication/xstore-replication-db-define.sql" tofile="${dbsql.dir}/xstore-replication-db-define.sql" overwrite="true" />
    <!-- db update script = client schema + client data + version -->
    <concat destfile="${dbsql.dir}/db-update.sql" append="true" fixlastline="true">
      <fileset file="${Install.xstoreoverlay.database.work}/ClientSchema.sql" />
      <fileset file="${Install.xstoreoverlay.database.work}/ClientData.sql" />
      <fileset file="${Install.resources}/db/db-version.sql" />
    </concat>
    <!-- customer test data -->
    <copy file="${Install.xstoreoverlay.database.work}/ClientTestData.sql" tofile="${dbsql.dir}/testData.sql" overwrite="true" failonerror="false" />
    <concat destfile="${dbsql.dir}/caw-db-update.sql" append="true" fixlastline="true">
      <fileset file="${Install.xstoreoverlay.database.work}/ClientUpdateData.sql" />
      <fileset file="${Install.resources}/db/db-version.sql" />
    </concat>
    <!-- DB Script Variable Replacement -->
    <db-token-repl />
  </target>
</project>
