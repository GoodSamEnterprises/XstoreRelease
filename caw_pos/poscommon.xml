<?xml version="1.0"?>
<!--

InstallX Common Database Targets and Properties

-->
<project name="InstallX Common Custom Tasks" default="" basedir=".">
  <!-- back up logs if an error occurs -->
  <failurelistener>
    <!-- copy the install logs -->
    <copy todir="${ixlog.dir}">
      <fileset dir="${basedir}">
        <include name="*.log" />
        <include name="ant.install.properties" />
      </fileset>
    </copy>
  </failurelistener>

  <!-- set the local database name -->
  <condition property="localDB" value="${local.db}" else="xstore">
    <and>
      <isset property="local.db" />
      <length string="${local.db}" when="greater" length="0" />
    </and>
  </condition>

  <!-- set the training database name -->
  <condition property="trainDB" value="${training.db}" else="training">
    <and>
      <isset property="training.db" />
      <length string="${training.db}" when="greater" length="0" />
    </and>
  </condition>

  <!-- set installer property values -->
  <property name="local.base.xstore.properties.file" location="${install.dir}/updates/base-xstore.properties" />
  <property name="base.xstore.upgrade.properties.file" location="${install.dir}/updates/base-xstore.upgrade.properties" />
  <property name="local.installer.properties.file" location="${install.dir}/updates/installx.install.properties" />
  <property name="installer.properties.prefix.value" value="INSTALLERPROP" />

  <!-- determine whether or not Xstore/Dataserver should be launched when the install completes -->
  <condition property="dont.launch.xstore">
    <or>
      <istrue value="${run.from.xenvironment}" />
      <istrue value="${donot.launch.xstore}" />
    </or>
  </condition>


  <!-- set properties for install options -->
  <condition property="isXpay">
    <contains string="${auth.platform}" substring="xpay" />
  </condition>
  <condition property="isFdmsXpay">
    <contains string="${auth.xpay.type}" substring="xpay-fdms" />
  </condition>
  <condition property="isPtechXpay">
    <contains string="${auth.xpay.type}" substring="xpay-ptech" />
  </condition>
  <condition property="isMwXpay">
    <contains string="${auth.xpay.type}" substring="xpay-mwhse" />
  </condition>
  <condition property="isMlXpay">
    <contains string="${auth.xpay.type}" substring="xpay-mlink" />
  </condition>
  <condition property="isTenderRetail">
    <contains string="${auth.platform}" substring="tender-retail" />
  </condition>
  <condition property="isEftLink">
    <contains string="${auth.platform}" substring="eft-link" />
  </condition>
  <condition property="replaceConfiguratorReceiptLogo">
    <istrue value="${donot.maintain.receiptLogo}" />
  </condition>
  <condition property="removeConfiguratorPatches">
    <istrue value="${upgrade.removeConfiguratorPatches}" />
  </condition>
  <condition property="forceDeploymentProcessingEnabled">
    <and>
      <istrue value="${force.deployment.enabled}" />
      <not>
        <isset property="isInstall" />
      </not>
    </and>
  </condition>
  <condition property="isCountryBr">
  <contains string="${countryId}" substring="BR" />
  </condition>

  <target name="startxstore" unless="dont.launch.xstore" description="starts xstore and the dataserver (if this system has a local DB)">
    <if>
      <not>
        <istrue value="${xstore.xfg}" />
      </not>
      <then>
        <echo message="STARTING XSTORE" />
        <exec dir="${install.dir}" executable="${install.dir}/xstore${os.ext}" spawn="true" />
        <if>
          <not>
            <isset property="no.local.db.present" />
          </not>
          <then>
            <echo message="STARTING DATASERVER" />
            <exec dir="${install.dir}" executable="${install.dir}/dataserver${os.ext}" spawn="true" />
          </then>
        </if>
      </then>
    </if> 
  </target>

  <target name="startxstoremobile" unless="dont.launch.xstore" description="starts xstore mobile">
    <!-- handle mobile install if necessary -->
    <if>
      <isset property="xstore.mobile.install" />
      <then>
        <if>
          <available file="${xstore.mobile.install}/mobile/xstore_mobile.keystore" />
          <then>
            <if>
              <istrue value="${xstore.mobile.start.disabled}" />
              <then>
                <echo message="XSTORE MOBILE STARTUP WAS DISABLED VIA CONFIGURATION" />
              </then>
              <else>
                <echo message="STARTING XSTORE MOBILE" />
                <exec dir="${xstore.mobile.install}" executable="${xstore.mobile.install}/xstore_mobile${os.ext}" spawn="true" />
              </else>
            </if>
            <if>
              <istrue value="${xstore.tablet.start.disabled}" />
              <then>
                <echo message="XSTORE TABLET STARTUP WAS DISABLED VIA CONFIGURATION" />
              </then>
              <else>
                <echo message="STARTING XSTORE TABLET" />
                <exec dir="${xstore.mobile.install}" executable="${xstore.mobile.install}/xstore_tablet${os.ext}" spawn="true" />
              </else>
            </if>
          </then>
          <else>
            <echo message="Xstore Mobile appears to be installed, but no keystore appears to be in-place.  Xstore Mobile applications will not be started." level="warning" />
          </else>
        </if>
      </then>
    </if>
  </target>

  <target name="startxfg" unless="dont.launch.xstore" description="starts xfg and the dataserver (if this system has a local DB)">
    <if>
      <istrue value="${xstore.xfg}" />
      <then>
        <echo message="STARTING XFG" />
        <exec executable="${install.dir}/xfg-client${os.ext}" spawn="true" />
        <if>
          <not>
            <isset property="no.local.db.present" />
          </not>
          <then>
            <echo message="STARTING DATASERVER" />
            <exec executable="${install.dir}/dataserver${os.ext}" spawn="true" />
          </then>
        </if>
      </then>
    </if> 
  </target>

  <target name="stopxstore" description="Stops processes in the Xstore working directory if they are running">
    <delete verbose="true">
      <fileset dir="${install.dir}/tmp" includes="*.anchor" erroronmissingdir="false" />
    </delete>
    <waitfor maxwait="60" maxwaitunit="second" checkevery="5" checkeveryunit="second">
      <resourcecount when="eq" count="0">
        <fileset dir="${install.dir}/tmp" includes="*.java.pid,*.wrapper.pid" erroronmissingdir="false" />
      </resourcecount>
    </waitfor>
  </target>

  <target name="stopxstoremobile" if="xstore.mobile.install" description="stops xstore mobile if it is installed and running">
    <delete verbose="true">
      <fileset dir="${xstore.mobile.install}/tmp" includes="*.anchor" erroronmissingdir="false" />
    </delete>
    <waitfor maxwait="60" maxwaitunit="second" checkevery="5" checkeveryunit="second">
      <resourcecount when="eq" count="0">
        <fileset dir="${xstore.mobile.install}/tmp" includes="*.java.pid,*.wrapper.pid" erroronmissingdir="false" />
      </resourcecount>
    </waitfor>
  </target>

  <target name="db-setup" if="local.or.replication.db.present" description="prepares scripts for application against the local db">
    <!-- update batch/shell script files with appropriate database names -->
    <replace dir="${dbsql.dir}" summary="true">
      <include name="*${os.ext}" />
      <replacefilter token="$(DbName)" value="${INSTALLERPROP.local.db.name}" />
      <replacefilter token="$(TrainingDbName)" value="${INSTALLERPROP.training.db.name}" />
    </replace>
    <!-- update permissions on script files in Linux, since ant's replace task does not preserve them  -->
    <if>
      <isset property="not.windows.os" />
      <then>
        <chmod perm="755">
          <fileset dir="${dbsql.dir}" includes="*sh" />
        </chmod>
      </then>
    </if>
    <!-- create sql scripts for the local DB -->
    <copy todir="${dbsql.dir}/local">
      <fileset dir="${dbsql.dir}" includes="*sql" />
      <filterchain refid="database.${install.type}.filter" />
      <filterchain refid="xstore.database.script.filters" />
      <filterchain refid="location.details.script.filter" />
    </copy>
  </target>

  <target name="clean-cust-config">
    <if>
      <and>
        <available file="${install.dir}/cust_config" />
        <isfalse value="${donot.clean.cust_config}" />
      </and>
      <then>
        <delete dir="${install.dir}/cust_config" verbose="true" />
      </then>
    </if>
  </target>

  <target name="remove-patches" unless="isInstall" description="removes patch files from the lib/patch directory">
    <fileset id="patch.files" dir="${install.dir}/lib/patch" includes="*.jar" erroronmissingdir="false" />
    <pathconvert property="patchFilesFound" setonempty="false" pathsep=" ">
      <fileset refid="patch.files" />
    </pathconvert>
    <if>
      <isset property="patchFilesFound" />
      <then>
        <delete verbose="true">
          <fileset refid="patch.files" />
        </delete>
      </then>
    </if>
  </target>

  <target name="remove-patches-mobile" unless="isInstall" description="removes patch files from the lib/patch directory for xstore mobile">
    <if>
      <isset property="xstore.mobile.install" />
      <then>
        <fileset id="mobile.patch.files" dir="${xstore.mobile.install}/lib/patch" includes="*.jar" erroronmissingdir="false" />
        <pathconvert property="mobilePatchFilesFound" setonempty="false" pathsep=" ">
          <fileset refid="mobile.patch.files" />
        </pathconvert>
        <if>
          <isset property="mobilePatchFilesFound" />
          <then>
            <delete verbose="true">
              <fileset refid="mobile.patch.files" />
            </delete>
          </then>
        </if>
      </then>
    </if>
  </target>

  <target name="apply-dbscript" depends="db-setup" unless="isInstall"
   description="applies db update/upgrade scripts">
   <!-- run scripts using appropriate functionality -->
    <if>
     <not>
       <isset property="no.local.db.present" />
     </not>
      <then>
        <if>
          <or>
            <equals arg1="UPDATE" arg2="${install.type}" casesensitive="false" trim="true" />
            <equals arg1="UPGRADE" arg2="${install.type}" casesensitive="false" trim="true" />
          </or>
          <then>
            <loadproperties prefix="BASEXDBPROPS" srcFile="${local.base.xstore.properties.file}" />
            <property name="db.update.date.script.file" location="${dbsql.dir}/caw-db-update.sql" description="Script for updating process only" />
            <replace file="${db.update.date.script.file}" token="$(OrgID)" value="${BASEXPROPS.dtv.location.OrganizationId}"/>
            <replace file="${db.update.date.script.file}" token="$(StoreID)" value="${BASEXPROPS.dtv.location.StoreNumber}"/>
            <applyupdatescript username="${BASEXDBPROPS.owner.db.user}" password="${BASEXDBPROPS.owner.db.pwd}" sqlfile="${db.update.date.script.file}" />
          </then>
        <else>
          <!-- load properties from base-xstore.properties for DB upgrades -->
          <!-- NOTE: This is not handled by the earlier load from the same file because these properties may not be set yet at that point. -->
          <loadproperties prefix="BASEXDBPROPS" srcFile="${local.base.xstore.properties.file}" />
          <property name="db.update.script.file" location="${dbsql.dir}/local/db-update.sql" description="Normalizes the path to the script" />
          <applyupdatescript username="${BASEXDBPROPS.owner.db.user}" password="${BASEXDBPROPS.owner.db.pwd}" sqlfile="${db.update.script.file}" />
          <if>
            <isset property="isoracleororaclepdb" />
             <then>
               <property name="db.synonyms.script.file" location="${dbsql.dir}/local/Synonyms.sql" description="Normalizes the path to the script" />
               <applyupdatescript username="${BASEXDBPROPS.local.db.user}" password="${BASEXDBPROPS.local.db.pwd}" sqlfile="${db.synonyms.script.file}" />
               <property name="db.dbauser.synonyms.sqcript.file" location="${dbsql.dir}/local/DBAUserSynonyms.sql" description="Normalizes the path to the script" />
               <applyupdatescript username="${BASEXDBPROPS.master.db.user}" password="${BASEXDBPROPS.master.db.pwd}" sqlfile="${db.dbauser.synonyms.sqcript.file}" />
             </then>
          </if>
        </else>
        </if>
      </then>
    </if>
  </target>

  <target name="prep-installx-properties-and-db-filters" unless="database.properties.and.filters.loaded" description="Creates (if necessary) and loads a local installer properties file then prepares a set of properties and filters that are used during database processes.">
    <!-- if an installer properties file doesn't exist (ie. during upgrades from versions that didn't use this file or installs), and this is an xstore or patch installer, create one -->
    <if>
      <not>
        <available file="${local.installer.properties.file}" />
      </not>
      <then>
        <echo message="No existing file was found at '${local.installer.properties.file}'.  Creating one." />
        <!-- determine the level of local database presence -->
        <switch value="${localDbEnabled}" caseinsensitive="true">
          <case value="false">
            <property name="dbIsPresent" value="false" />
          </case>
          <case value="replonly">
            <property name="dbIsPresent" value="replonly" />
          </case>
          <default>
            <property name="dbIsPresent" value="true" />
          </default>
        </switch>
        <!-- create a properties file with values that may be needed during subsequent updates/upgrades -->
        <propertyfile file="${local.installer.properties.file}" comment="InstallX installer configuration values">
          <entry key="local.db.present" value="${dbIsPresent}" />
          <entry key="local.db.name" value="${localDB}" />
          <entry key="training.db.name" value="${trainDB}" />
        </propertyfile>
        <if>
          <isset property="advanced.installation" />
          <then>
            <if>
              <length string="${advanced.installation}" trim="true" when="greater" length="0" />
              <then>
                <echo message="Set Advanced Installation Configuration" />
                <propertyfile file="${local.installer.properties.file}">
                  <entry key="advanced.installation" value="${advanced.installation}" />
                </propertyfile>
              </then>
            </if>
          </then>
        </if>
        <!-- set mobile install details if provided-->
        <if>
          <and>
            <isset property="xstore.mobile" />
            <istrue value="${xstore.mobile}" />
          </and>
          <then>
            <if>
              <and>
                <length string="${mobileInstallDir}" trim="true" when="greater" length="0" />
                <length string="${mobileKeyAlias}" trim="true" when="greater" length="0" />
                <length string="${mobileKeystorePassword}" trim="true" when="greater" length="0" />
                <matches string="${mobileKeystorePassword}" pattern="^OBF:.*$" />
              </and>
              <then>
                <!-- examine/normalize startup disablement properties -->
                <condition property="disableMobileStartup" value="true" else="false">
                  <istrue value="${mobileStartDisabled}" />
                </condition>
                <condition property="disableTabletStartup" value="true" else="false">
                  <istrue value="${tabletStartDisabled}" />
                </condition>
                <!-- set property file fields -->                
                <echo message="Configuring Xstore Mobile components." />
                <propertyfile file="${local.installer.properties.file}">
                  <entry key="mobile.install.dir" value="${mobileInstallDir}" />
                  <entry key="mobile.key.alias" value="${mobileKeyAlias}" />
                  <entry key="mobile.keystore.password" value="${mobileKeystorePassword}" />
                  <entry key="mobile.start.disabled" value="${disableMobileStartup}" />
                  <entry key="tablet.start.disabled" value="${disableTabletStartup}" />
                </propertyfile>
              </then>
              <else>
                <echo message="WARNING: Xstore Mobile component was selected, but configuration values that were specified for it do not appear to be valid.  Xstore Mobile will not be installed." level="warning" />
              </else>
            </if>
          </then>
        </if>
      </then>
    </if>

    <!-- read in installer properties -->
    <echo message="Loading installer property values from '${local.installer.properties.file}'" />
    <property file="${local.installer.properties.file}" prefix="${installer.properties.prefix.value}" />
    <echo message="Proceeding with the following installer property values:" />
    <echoproperties prefix="${installer.properties.prefix.value}" />

    <!-- set variable flags where necessary -->
    <condition property="no.local.db.present">
      <not>
        <equals arg1="${INSTALLERPROP.local.db.present}" arg2="true" trim="true" forcestring="true" />
      </not>
    </condition>
    <condition property="only.replication.db.present">
      <equals arg1="${INSTALLERPROP.local.db.present}" arg2="replonly" trim="true" forcestring="true" />
    </condition>
    <condition property="local.or.replication.db.present">
      <or>
        <equals arg1="${INSTALLERPROP.local.db.present}" arg2="replonly" trim="true" forcestring="true" />
        <equals arg1="${INSTALLERPROP.local.db.present}" arg2="true" trim="true" forcestring="true" />
      </or>
    </condition>

    <!-- configure mobile properties if provided -->
    <if>
      <and>
        <isset property="INSTALLERPROP.mobile.install.dir" />
        <length string="${INSTALLERPROP.mobile.install.dir}" trim="true" when="greater" length="0" />
      </and>
      <then>
        <property name="xstore.mobile.install" value="${INSTALLERPROP.mobile.install.dir}" />
        <property name="xstore.mobile.key.alias" value="${INSTALLERPROP.mobile.key.alias}" />
        <property name="xstore.mobile.keystore.password" value="${INSTALLERPROP.mobile.keystore.password}" />
        <condition property="xstore.mobile.start.disabled" value="true" else="false">
          <istrue value="${INSTALLERPROP.mobile.start.disabled}" />
        </condition>
        <condition property="xstore.tablet.start.disabled" value="true" else="false">
          <istrue value="${INSTALLERPROP.tablet.start.disabled}" />
        </condition>
      </then>
    </if>

    <!-- load a selection of base-xstore.properties values that are needed during installation -->
    <loadproperties prefix="BASEXPROPS" srcFile="${local.base.xstore.properties.file}">
      <filterchain>
        <linecontains>
          <contains value="dtv.location." />
        </linecontains>
      </filterchain>
    </loadproperties>
    
    <!-- generate a password for the PDB admin user (only used on PDB installs) -->
    <local name="pdbAdminPw" />
    <generatepassword length="30" property="pdbAdminPw" />

    <!-- create filter chains that include values that are commonly adjusted in database script files, loading appropriate values for them as needed -->
    <filterchain id="location.details.script.filter" description="Filters location-related details.">
      <tokenfilter>
        <replacestring from="$(OrgID)" to="${BASEXPROPS.dtv.location.OrganizationId}" />
        <replacestring from="$(StoreID)" to="${BASEXPROPS.dtv.location.StoreNumber}" />
        <replacestring from="$(CountryID)" to="'${BASEXPROPS.dtv.location.CountryId}'" />
        <replacestring from="$(CurrencyID)" to="'${BASEXPROPS.dtv.location.CurrencyId}'" />
        <replacestring from="$(RegionID)" to="'${BASEXPROPS.dtv.location.RegionId}'" />
      </tokenfilter>
    </filterchain>
    <filterchain id="database.default.install.filter" description="Filters install-related details appropriately for most database platforms">
      <tokenfilter>
        <replacestring from="$(DbDataFilePath)" to="${dbInstallDir}" />
        <replacestring from="$(DbIndexFilePath)" to="${dbInstallDir}" />
      </tokenfilter>
    </filterchain>
    <filterchain id="database.oracle.install.filter" refid="database.default.install.filter" />
    <filterchain id="database.oraclepdb.install.filter">
      <tokenfilter>
        <replacestring from="$(DbDataFilePath)" to="${dbInstallDir}${file.separator}$(DbName)" />
        <replacestring from="$(DbIndexFilePath)" to="${dbInstallDir}${file.separator}$(DbName)" />
        <replacestring from="$(DbSeedFilePath)" to="${dbInstallDir}${file.separator}pdbseed" />
        <replacestring from="$(DbAdmin)" to="$(DbName)admin" />
        <replacestring from="$(DbAdmpwd)" to="${pdbAdminPw}" />
      </tokenfilter>
    </filterchain>
    <filterchain id="database.mssql.install.filter" refid="database.default.install.filter" />
    <filterchain id="database.mssql-unicode.install.filter" refid="database.default.install.filter" />
    <filterchain id="database.install.filter" refid="database.${platform.db}.install.filter" description="Filters install-related details" />
    <filterchain id="database.upgrade.filter" description="Filters upgrade-related details" />
    <filterchain id="database.update.filter" description="Filters update-related details" />
    <filterchain id="database.patch.filter" description="Filters patch-related details" />

    <filterchain id="xstore.database.script.filters">
      <tokenfilter>
        <replacestring from="$(DbName)" to="${INSTALLERPROP.local.db.name}" />
        <replacestring from="${db.name.impl}" to="${INSTALLERPROP.local.db.name}" />
        <replacestring from="$(DbTblspace)" to="xstore" />
        <replacestring from="$(DbUser)" to="pos" />
        <replacestring from="$(DbSchema)" to="dtv" />
      </tokenfilter>
    </filterchain>
    <filterchain id="replication.database.script.filters">
      <tokenfilter>
        <replacestring from="$(DbName)" to="xstorereplication" />
        <replacestring from="${db.name.impl}" to="xstorereplication" />
        <replacestring from="$(DbTblspace)" to="repqueue" />
        <replacestring from="$(DbUser)" to="repqueue" />
        <replacestring from="$(DbSchema)" to="repqueue" />
        <replacestring from="SPOOL dbcreate.log" to="SPOOL repqueue-dbcreate.log" />
      </tokenfilter>
    </filterchain>
    <filterchain id="training.database.script.filters">
      <tokenfilter>
        <replacestring from="$(DbName)" to="${INSTALLERPROP.training.db.name}" />
        <replacestring from="${db.name.impl}" to="${INSTALLERPROP.training.db.name}" />
        <replacestring from="$(DbTblspace)" to="training" />
        <replacestring from="$(DbUser)" to="training" />
        <replacestring from="$(DbSchema)" to="training" />
        <replacestring from="SPOOL dbcreate.log" to="SPOOL training-dbcreate.log" />
        <replacestring from="SPOOL dbdefine.log" to="SPOOL training-dbdefine.log" />
        <replacestring from="SPOOL dbupdate.log" to="SPOOL training-dbupdate.log" />
        <replacestring from="SPOOL schema.log" to="SPOOL training-schema.log" />
        <replacestring from="SPOOL db-load.log" to="SPOOL training-db-load.log" />
      </tokenfilter>
    </filterchain>
    <filterset>
    
    </filterset>

    <!-- set a flag to avoid multiple invocations -->
    <property name="database.properties.and.filters.loaded" value="true" />
  </target>

  <target name="create-local-databases" depends="db-setup" if="isInstall" description="create local databases if appropriate">
    <if>
      <and>
        <istrue value="${db.create}" />
        <isset property="local.or.replication.db.present" />
      </and>
      <then>
        <!-- throw an obvious error if misconfiguration is identified -->
        <fail message="The install process detected a configuration issue.  On ${platform.db} the database names for the xstore, training, and replication databases must be unique. ">
          <condition>
            <and>
              <not>
                <isset property="isoracle" />
              </not>
              <or>
                <equals arg1="${INSTALLERPROP.local.db.name}" arg2="${INSTALLERPROP.training.db.name}" trim="true" casesensitive="false" />
                <equals arg1="${INSTALLERPROP.local.db.name}" arg2="xstorereplication" trim="true" casesensitive="false" />
              </or>
            </and>
          </condition>
        </fail>

        <!-- create db scripts and os os-appropriate scripts -->
        <copy todir="${dbsql.dir}/training">
          <fileset dir="${dbsql.dir}" includes="*sql" />
          <filterchain refid="database.${install.type}.filter" />
          <filterchain refid="training.database.script.filters" />
          <filterchain refid="location.details.script.filter" />
        </copy>
        <copy todir="${dbsql.dir}/replication">
          <fileset dir="${dbsql.dir}" includes="*sql" />
          <filterchain refid="database.${install.type}.filter" />
          <filterchain refid="replication.database.script.filters" />
          <filterchain refid="location.details.script.filter" />
        </copy>

        <!-- create the target db directory it it doesn't exist -->
        <trycatch>
          <try>
            <mkdir dir="${dbInstallDir}" />
          </try>
          <catch>
            <echo message="Warning: Could not successfully create a directory at ${dbInstallDir}.  This may not necessarily be indicative of an issue, as the user running this installer may not have/require access to that location, but should be considered in cases where subsequent steps are unsuccessful for related reasons." />
          </catch>
        </trycatch>

        <!-- create all databases, or only replication database, based on configuration -->
        <if>
          <not>
            <isset property="only.replication.db.present" />
          </not>
          <then>
            <!-- create the local, training, and replication databases -->
            <exec executable="${dbsql.dir}/make-database${os.ext}" failonerror="true">
              <arg value="${install.env}" />
            </exec>
          </then>
          <else>
            <!-- create only a replication database -->
            <exec executable="${dbsql.dir}/make-replication-only${os.ext}" failonerror="true">
              <arg value="${install.env}" />
            </exec>
          </else>
        </if>
      </then>
    </if>
  </target>

  <target name="pre-upgrade-backup" if="isUpgrade" description="backs up files that will need to be replaced after extracting the upgrade">
    <patternset id="common.backup.files">
      <include name="cust_config/**" if="${donot.clean.cust_config}" />
      <include name="configversion/**" />
      <include name="download/**" />
      <include name="upload/**" />
      <include name="sequence/**" />
      <include name="tmp/**" />
      <include name="res/keys/**" />
      <include name="res/binfile/**" />
      <include name="res/ssl/.truststore" />
      <include name="res/graphics/receipt/*" />
      <include name="log/**" />
      <include name="updates/*.properties" />
      <include name="updates/*.PROPERTIES" />
      <include name="wrapper/conf/env.*.conf" />
      <include name="lib/configurator.*.jar" unless="removeConfiguratorPatches" />

      <!-- Xenvironment-specific -->
      <include name="res/data/**"/>
      <include name="wwwroot/**"/>
      <include name="marker/**"/>
      <include name="deployment/**" />
      <include name="poll/**" />
      <include name="res/ssl/**" />
      <include name="support/**" />
      <include name="prestart_updates/**"/>
      <exclude name="**/xenv_eng.pid"/>
    </patternset>

    <!-- create a temporary directory, then copy files that should be maintained to it -->
    <property name="xtemp" location="${external.file.root}/xstoretemp" />
    <property name="xtemp.pos" location="${xtemp}/pos" />
    <mkdir dir="${xtemp.pos}" />
    <copy todir="${xtemp.pos}" preservelastmodified="true">
      <fileset dir="${install.dir}">
        <patternset refid="common.backup.files" />
      </fileset>
    </copy>
  </target>

  <target name="load-advanced-installation" unless="isInstall" description="load the advanced installtion option(xfg, mobile)">
    <property file="${local.installer.properties.file}" prefix="${installer.properties.prefix.value}" />
    <if>
      <and>
        <isset property="INSTALLERPROP.advanced.installation" />
        <length string="${INSTALLERPROP.advanced.installation}" trim="true" when="greater" length="0" />
      </and>
      <then>
        <!-- save advanced installation option -->
        <property name="advanced.installation" value="${INSTALLERPROP.advanced.installation}" />
        <condition property="xstore.xfg">
          <equals arg1="${INSTALLERPROP.advanced.installation}" arg2="xfg" />
        </condition>
        <condition property="xstore.mobile">
          <equals arg1="${INSTALLERPROP.advanced.installation}" arg2="mobile" />
        </condition>
      </then>
    </if>
  </target>

  <target name="upgrade-props" unless="isInstall" description="if upgrade properties are included, perform updating and merging">
    <!-- if we're performing a property merge, check ahead for the absence of database driver info -->
    <!-- and add driver name entries for each datasource if needed. -->
    <if>
      <and>
        <available file="${base.xstore.upgrade.properties.file}" />
        <available file="${local.base.xstore.properties.file}" />
      </and>
      <then>
        <updateDriverInProperties file="${local.base.xstore.properties.file}" />
        <if>
          <not>
            <containsproperty propertyfile="${local.base.xstore.properties.file}" propertyname="dtv.datasource.local.ping.port" />
          </not>
          <then>
            <if>
              <istrue value="${ismssqlormssqlunicode}"/>
              <then>
                <property name="property.upgrade.database.port" value="${mssql.datasource.port}" />
              </then>
              <else>
                <property name="property.upgrade.database.port" value="${oracle.datasource.port}" />
              </else>
            </if>

            <echo message="Adding database port entries with value ${property.upgrade.database.port} to ${local.base.xstore.properties.file}." />
            <propertyfile file="${local.base.xstore.properties.file}">
              <entry key="dtv.datasource.local.ping.port" value="${property.upgrade.database.port}" />
              <entry key="dtv.datasource.replication.ping.port" value="${property.upgrade.database.port}" />
              <entry key="dtv.datasource.storeprimary.ping.port" value="${property.upgrade.database.port}" />
              <entry key="dtv.datasource.storebackup.ping.port" value="${property.upgrade.database.port}" />
              <entry key="dtv.datasource.training.ping.port" value="${property.upgrade.database.port}" />
            </propertyfile>
          </then>
        </if>
      </then>
    </if>

    <!-- perform property merges -->
    <upgradeproperties mergefile="${base.xstore.upgrade.properties.file}" origfile="${local.base.xstore.properties.file}" />
    <upgradeproperties mergefile="${install.dir}/updates/xstore.upgrade.properties" origfile="${install.dir}/updates/xstore.properties" />
  </target>

  <target name="extract-install-upgrade" unless="isUpdate" description="application install process for xstore">
    <echo message="Applying Application Components" />
    <applyXstoreInstallUpgrade installDir="${install.dir}" />
  </target>

  <target name="extract-update" if="isUpdate" description="extracts update files for xstore">
    <echo message="Applying Application Component Updates" />
    <applyXstoreUpdate installdir="${install.dir}" />
  </target>

  <target name="post-upgrade-restore" if="isUpgrade" description="move files back to the install directory if appropriate, honoring replaceConfiguratorReceiptLogo, then remove the temp directory">
    <copy todir="${install.dir}" preservelastmodified="true" overwrite="false">
      <fileset dir="${xtemp.pos}" />
    </copy>
    <copy todir="${install.dir}" preservelastmodified="true" overwrite="true">
      <fileset dir="${xtemp.pos}">
        <include name="res/graphics/receipt/*" unless="replaceConfiguratorReceiptLogo" />
      </fileset>
    </copy>
    <delete dir="${xtemp}" />
  </target>

  <target name="create-manual-install-scripts" depends="db-setup" unless="no.local.db.present" description="creates scripts that can be used for manual db processes">
    <!-- determine whether or not test data will be included -->
    <condition property="copy.test.data">
      <contains string="${install.env}" substring="TEST" />
    </condition>

    <!-- create a directory that will house these scripts -->
    <property name="manual.install.script.dir" location="${install.dir}/database/installx" />
    <mkdir dir="${manual.install.script.dir}" />

    <!-- create 1 db load script for install -->
    <concat destfile="${manual.install.script.dir}/db-load.sql" append="true" fixlastline="true">
      <filterchain refid="database.${install.type}.filter" />
      <filterchain refid="xstore.database.script.filters" />
      <filterchain refid="location.details.script.filter" />
      <fileset file="${dbsql.dir}/db-update.sql" />
      <fileset dir="${dbsql.dir}">
        <include name="testData.sql" if="copy.test.data" />
      </fileset>
    </concat>

    <!-- create 1 db script for xstore setup -->
    <concat destfile="${manual.install.script.dir}/db-xstore.sql" append="true" fixlastline="true">
      <filterchain refid="database.${install.type}.filter" />
      <filterchain refid="xstore.database.script.filters" />
      <filterchain refid="location.details.script.filter" />
      <fileset file="${dbsql.dir}/db-drop.sql" />
      <fileset file="${dbsql.dir}/db-create.sql" />
      <fileset file="${dbsql.dir}/baseSchema.sql" />
      <fileset file="${manual.install.script.dir}/db-load.sql" />
    </concat>

    <!-- create 1 db script for replication setup -->
    <concat destfile="${manual.install.script.dir}/db-xstorereplication.sql" append="true" fixlastline="true">
      <filterchain refid="database.${install.type}.filter" />
      <filterchain refid="replication.database.script.filters" />
      <filterchain refid="location.details.script.filter" />
      <fileset file="${dbsql.dir}/db-drop.sql" />
      <fileset file="${dbsql.dir}/db-create.sql" />
      <fileset file="${dbsql.dir}/xstore-replication-db-define.sql" />
    </concat>

    <!-- create copies of the source scripts that were used during the install -->
    <copy todir="${manual.install.script.dir}">
      <fileset dir="${dbsql.dir}" includes="*.sql" />
    </copy>
  </target>

  <target name="request-environment-deployment-processing" if="forceDeploymentProcessingEnabled" description="Makes a request to Xenvironment to process deployments after applying updates.">
    <echo message="Calling Xenvironment to Request Deployment Processing" />
    <exec executable="${install.dir}/reqenvdeployproc${os.ext}" resultproperty="deployment.requset.result" />

    <condition property="deployment.result.log.message" value="Deployment request completed successfully." else="An error occurred when requesting immediate deployment processing.">
      <equals arg1="${deployment.requset.result}" arg2="0" />
    </condition>
    <echo message="${deployment.result.log.message}" />
  </target>

  <!-- common configurations -->
  <target name="configure-base-properties" if="isInstall" description="places configuration values in base-xstore.properties">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.location.OrganizationId" value="${orgId}" />
      <entry key="dtv.location.StoreNumber" value="${rtlLocId}" />
      <entry key="dtv.location.TerminalId" value="${terminalId}" />
      <entry key="dtv.location.CountryId" value="${countryId}" />
      <entry key="dtv.location.CurrencyId" value="${currencyId}" />
      <entry key="dtv.location.RegionId" value="${regionId}" />
      <entry key="dtv.payroll.OvertimeRuleType" value="${payrollOt}" />
      <entry key="dtv.sendsale.taxtype" value="${sendSaleTax}" />
      <entry key="dtv.dataloader.FileEncoding" value="${dataloader.FileEncoding}" />
      <entry key="dtv.email.host" value="${email.host}" />
      <entry key="dtv.email.port" value="${email.port}" />
      <entry key="dtv.email.smtp.auth" value="${email.smtp.auth}" />
      <entry key="dtv.email.user" value="${email.user}" />
      <entry key="dtv.email.password" value="${email.password}" />
      <entry key="dtv.email.smtp.debug" value="${email.smtp.debug}" />
      <entry key="dtv.email.default.sender" value="${email.default.sender}" />
      <entry key="dtv.data2.replication.enabled" value="${svc.replication}" />
      <entry key="dtv.config.path" value="${path.config}" />
      <entry key="dtv.CustomerId.salt" value="${customerId.salt}" />
    </propertyfile>
    <antcall target="configure-xstore-mobile" />
    <antcall target="configure-datasources" />
    <antcall target="configure-locate" />
    <antcall target="configure-relate" />
    <antcall target="configure-sim" />
    <antcall target="configure-rxm" />
    <antcall target="configure-avs" />
    <antcall target="configure-opera" />
    <antcall target="configure-auth" />
    <antcall target="configure-countrypack" />
  </target>

  <!-- mobile-specific configurations -->
  <target name="configure-xstore-mobile" if="${xstore.mobile}">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="mobile.dtv.config.path" value="${mobile.path.config}" />
      <entry key="handheld.dtv.location.TerminalId" value="${handheldTerminalId}" />
      <entry key="tablet.dtv.location.TerminalId" value="${tabletTerminalId}" />
      <entry key="xstorem.config.rsaPrivateKeyFilePath" value="${mobileRsaPrivateKeyFilePath}" />
      <entry key="xstorem.config.rsaPrivateKeyPassword" value="${mobileRsaPrivateKeyPassword}" />
    </propertyfile>
  </target>

  <!-- external systems configurations -->
  <target name="configure-locate">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.locate.WsdlLocation" value="${locate.WsdlLocation}" />
      <entry key="dtv.locate.ServiceTimeout" value="${locate.ServiceTimeout}" />
      <entry key="dtv.locate.XstoreSystemCode" value="${locate.XstoreSystemCode}" />
      <entry key="dtv.locate.Destination" value="${locate.Destination}" />
      <entry key="oracle.retail.xstore.locate.username" value="${locate.username}" />
      <entry key="oracle.retail.xstore.locate.password" value="${locate.password}" />
    </propertyfile>
  </target>
  <target name="configure-relate">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.datasource.relate.Enabled" value="${db.relate}" />
      <entry key="dtv.relate.Host" value="${relate.host}" />
      <entry key="dtv.relate.Port" value="${relate.port}" />
      <entry key="dtv.relate.ServiceTimeout" value="${relate.ServiceTimeout}" />
      <entry key="dtv.relate.CustomerWs" value="${relate.protocol}://${relate.host}:${relate.port}/${relate.companyName}/OrceWebServices/v2_3/CustomerServicesApiService?wsdl" />
      <entry key="dtv.relate.CardWs" value="${relate.protocol}://${relate.host}:${relate.port}/${relate.companyName}/OrceWebServices/v2_1/CardServicesApiService?wsdl" />
      <entry key="dtv.relate.LoyaltyWs" value="${relate.protocol}://${relate.host}:${relate.port}/${relate.companyName}/OrceWebServices/v1_0/LoyaltyAccountServicesApiService?wsdl" />
      <entry key="dtv.relate.AwardWs" value="${relate.protocol}://${relate.host}:${relate.port}/${relate.companyName}/OrceWebServices/v1_0/AwardAccountServicesApiService?wsdl" />
      <entry key="dtv.relate.PromotionWs" value="${relate.protocol}://${relate.host}:${relate.port}/${relate.companyName}/OrceWebServices/v1_0/SerializedCouponServiceService?wsdl" />
      <entry key="dtv.relate.RegistryWs" value="${relate.protocol}://${relate.host}:${relate.port}/${relate.companyName}/OrceWebServices/v1_2/RegistryServicesApiService?wsdl" />
      <entry key="dtv.relate.AttributeWs" value="${relate.protocol}://${relate.host}:${relate.port}/${relate.companyName}/OrceWebServices/v1_1/AttributesServiceApiService?wsdl" />
      <entry key="dtv.relate.TaskWs" value="${relate.protocol}://${relate.host}:${relate.port}/${relate.companyName}/OrceWebServices/v1_1/TaskServicesApiService?wsdl" />
      <entry key="dtv.relate.SvcTransactionWs" value="${relate.protocol}://${relate.host}:${relate.port}/${relate.companyName}/OrceWebServices/v3_0/SvcTransactionServicesApiService?wsdl" />
      <entry key="dtv.relate.LoyaltyCardPrefix" value="${relate.LoyaltyCardPrefix}" />
      <entry key="dtv.relate.LoyaltyCardSeries" value="${relate.LoyaltyCardSeries}" />
      <entry key="dtv.relate.Auth" value="${relate.Auth}" />
      <entry key="dtv.relate.AuthTokenName" value="${relate.AuthTokenName}" />
    </propertyfile>
  </target>
  <target name="configure-sim">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="oracle.retail.xstore.sim.uin.WsdlLocation" value="${sim.protocol}://${sim.host}:${sim.port}/StoreInventoryUinBean/StoreInventoryUinService?WSDL" />
      <entry key="oracle.retail.xstore.sim.inventory.WsdlLocation" value="${sim.protocol}://${sim.host}:${sim.port}/StoreInventoryBean/StoreInventoryService?WSDL" />
      <entry key="oracle.retail.xstore.sim.posTransaction.WsdlLocation" value="${sim.protocol}://${sim.host}:${sim.port}/POSTransactionBean/POSTransactionService?WSDL" />
      <entry key="oracle.retail.xstore.sim.ServiceTimeout" value="${sim.ServiceTimeout}" />
      <entry key="oracle.retail.xstore.sim.ProcessTransRetryInterval" value="${sim.ProcessTransRetryInterval}" />
      <entry key="oracle.retail.xstore.sim.username" value="${sim.username}" />
      <entry key="oracle.retail.xstore.sim.password" value="${sim.password}" />
    </propertyfile>
  </target>
  <target name="configure-rxm">
      <propertyfile file="${local.base.xstore.properties.file}">
        <entry key="oracle.retail.xstore.rxm.cart.WsdlLocation" value="${rxm.protocol}://${rxm.host}:${rxm.port}/ShoppingCartBean/ShoppingCartService?WSDL" />
        <entry key="oracle.retail.xstore.rxm.item.WsdlLocation" value="${rxm.protocol}://${rxm.host}:${rxm.port}/TargetedItemsBean/TargetedItemsService?WSDL" />
        <entry key="oracle.retail.xstore.rxm.item.extend.WsdlLocation" value="${rxm.protocol}://${rxm.host}:${rxm.port}/ItemInformationBean/ItemInformationService?WSDL" />
        <entry key="oracle.retail.xstore.rxm.ServiceTimeout" value="${rxm.ServiceTimeout}" />
        <entry key="oracle.retail.xstore.rxm.container.username" value="${rxm.container.username}" />
        <entry key="oracle.retail.xstore.rxm.container.password" value="${rxm.container.password}" />
        <entry key="oracle.retail.xstore.rxm.application.username" value="${rxm.application.username}" />
        <entry key="oracle.retail.xstore.rxm.application.password" value="${rxm.application.password}" />
        <entry key="oracle.retail.xstore.rxm.siteId" value="${rxm.siteId}" />
      </propertyfile>
    </target>
  <target name="configure-avs">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="oracle.retail.xstore.avs.WsdlLocation" value="${avs.protocol}://${avs.host}:${avs.port}/ProOnDemand/V3/ProOnDemandService.asmx?WSDL" />
      <entry key="oracle.retail.xstore.avs.ServiceTimeout" value="${avs.ServiceTimeout}" />
      <entry key="oracle.retail.xstore.avs.password" value="${avs.password}" />
    </propertyfile>
  </target>
  <target name="configure-opera">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.datasource.opera.Enabled" value="${db.opera}" />
      <entry key="dtv.opera.ConnectionURL" value="${opera.ConnectionURL}" />
      <entry key="dtv.datasource.opera.ConnectionString" value="${opera.ConnectionString}" />
      <entry key="dtv.datasource.opera.Timeout" value="${opera.Timeout}" />
      <entry key="dtv.datasource.opera.Resort" value="${opera.Resort}" />
      <entry key="dtv.datasource.opera.RowId" value="${opera.RowId}" />
    </propertyfile>
  </target>

  <!-- datasource configuration -->
  <target name="configure-datasources" depends="configure-db-mssql,configure-db-mssql-unicode,configure-db-oracle,configure-db-oraclepdb">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.datasource.xcenter.Enabled" value="${db.xcenter}" />
      <entry key="dtv.datasource.xcenter.ConnectionURL" value="https://${xcenter.host}:${xcenter.port}" />
      <entry key="dtv.datasource.xcenter.ping.Host" value="${xcenter.host}" />
      <entry key="dtv.datasource.xcenter.ping.Port" value="${xcenter.port}" />
      <entry key="dtv.datasource.xcenter.keystorePwd" value="${xcenter.keystorePwd}" />
      <entry key="dtv.datasource.xcenter.truststorePwd" value="${xcenter.truststorePwd}" />
      <entry key="xcenter.db.user" value="${xcenter.db.user}" />
      <entry key="xcenter.db.pwd" value="${xcenter.db.pwd}" />

      <entry key="dtv.datasource.storeprimary.Enabled" value="${db.storeprimary}" />
      <entry key="dtv.datasource.storeprimary.ping.Host" value="${storeprimary.host}" />
      <entry key="storeprimary.db.user" value="${storeprimary.db.user}" />
      <entry key="storeprimary.db.pwd" value="${storeprimary.db.pwd}" />

      <entry key="dtv.datasource.storebackup.Enabled" value="${db.storebackup}" />
      <entry key="dtv.datasource.storebackup.ping.Host" value="${storebackup.host}" />
      <entry key="storebackup.db.user" value="${storebackup.db.user}" />
      <entry key="storebackup.db.pwd" value="${storebackup.db.pwd}" />

      <entry key="dtv.datasource.local.ping.Host" value="${local.host}" />
      <entry key="local.db.user" value="${local.db.user}" />
      <entry key="local.db.pwd" value="${local.db.pwd}" />

      <entry key="master.db.user" value="${master.db.user}" />
      <entry key="master.db.pwd" value="${master.db.pwd}" />

      <entry key="owner.db.user" value="${owner.db.user}" />
      <entry key="owner.db.pwd" value="${owner.db.pwd}" />

      <entry key="dtv.datasource.replication.ping.Host" value="${repl.host}" />
      <entry key="repl.db.user" value="${repl.db.user}" />
      <entry key="repl.db.pwd" value="${repl.db.pwd}" />

      <entry key="dtv.datasource.training.ping.Host" value="${training.host}" />
      <entry key="training.db.user" value="${training.db.user}" />
      <entry key="training.db.pwd" value="${training.db.pwd}" />
    </propertyfile>
  </target>
  <target name="configure-db-mssql" if="ismssql">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.datasource.storeprimary.ConnectionURL" value="jdbc:sqlserver://${storeprimary.host}:${mssql.datasource.port};databaseName=${storeprimary.db};sendStringParametersAsUnicode=false" />
      <entry key="dtv.datasource.storeprimary.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.storebackup.ConnectionURL" value="jdbc:sqlserver://${storebackup.host}:${mssql.datasource.port};databaseName=${storebackup.db};sendStringParametersAsUnicode=false" />
      <entry key="dtv.datasource.storebackup.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.local.ConnectionURL" value="jdbc:sqlserver://${local.host}:${mssql.datasource.port};databaseName=${localDB};sendStringParametersAsUnicode=false" />
      <entry key="dtv.datasource.local.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.replication.ConnectionURL" value="jdbc:sqlserver://${repl.host}:${mssql.datasource.port};databaseName=${repl.db};sendStringParametersAsUnicode=false" />
      <entry key="dtv.datasource.replication.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.training.ConnectionURL" value="jdbc:sqlserver://${training.host}:${mssql.datasource.port};databaseName=${trainDB};sendStringParametersAsUnicode=false" />
      <entry key="dtv.datasource.training.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.master.ConnectionURL" value="jdbc:sqlserver://${local.host}:${mssql.datasource.port};databaseName=master;sendStringParametersAsUnicode=false" />
      <entry key="dtv.datasource.connectionfactory" value="${mssql.database.driver.classname}" />
    </propertyfile>
  </target>
  <target name="configure-db-mssql-unicode" if="ismssqlunicode">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.datasource.storeprimary.ConnectionURL" value="jdbc:sqlserver://${storeprimary.host}:${mssql.datasource.port};databaseName=${storeprimary.db};sendStringParametersAsUnicode=true" />
      <entry key="dtv.datasource.storeprimary.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.storebackup.ConnectionURL" value="jdbc:sqlserver://${storebackup.host}:${mssql.datasource.port};databaseName=${storebackup.db};sendStringParametersAsUnicode=true" />
      <entry key="dtv.datasource.storebackup.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.local.ConnectionURL" value="jdbc:sqlserver://${local.host}:${mssql.datasource.port};databaseName=${localDB};sendStringParametersAsUnicode=true" />
      <entry key="dtv.datasource.local.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.replication.ConnectionURL" value="jdbc:sqlserver://${repl.host}:${mssql.datasource.port};databaseName=${repl.db};sendStringParametersAsUnicode=true" />
      <entry key="dtv.datasource.replication.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.training.ConnectionURL" value="jdbc:sqlserver://${training.host}:${mssql.datasource.port};databaseName=${trainDB};sendStringParametersAsUnicode=true" />
      <entry key="dtv.datasource.training.ping.port" value="${mssql.datasource.port}" />
      <entry key="dtv.datasource.master.ConnectionURL" value="jdbc:sqlserver://${local.host}:${mssql.datasource.port};databaseName=master;sendStringParametersAsUnicode=true" />
      <entry key="dtv.datasource.connectionfactory" value="${mssql.database.driver.classname}" />
    </propertyfile>
  </target>
  <target name="configure-db-oracle" if="isoracle">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.datasource.storeprimary.ConnectionURL" value="jdbc:oracle:thin:@${storeprimary.host}:${oracle.datasource.port}:${storeprimary.db}" />
      <entry key="dtv.datasource.storeprimary.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.storebackup.ConnectionURL" value="jdbc:oracle:thin:@${storebackup.host}:${oracle.datasource.port}:${storebackup.db}" />
      <entry key="dtv.datasource.storebackup.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.local.ConnectionURL" value="jdbc:oracle:thin:@${local.host}:${oracle.datasource.port}:${localDB}" />
      <entry key="dtv.datasource.local.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.replication.ConnectionURL" value="jdbc:oracle:thin:@${repl.host}:${oracle.datasource.port}:${repl.db}" />
      <entry key="dtv.datasource.replication.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.training.ConnectionURL" value="jdbc:oracle:thin:@${training.host}:${oracle.datasource.port}:${trainDB}" />
      <entry key="dtv.datasource.training.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.master.ConnectionURL" value="jdbc:oracle:thin:@${local.host}:${oracle.datasource.port}:${localDB}" />
      <entry key="dtv.datasource.connectionfactory" value="${oracle.database.driver.classname}" />
    </propertyfile>
  </target>
  <target name="configure-db-oraclepdb" if="isoraclepdb">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.datasource.storeprimary.ConnectionURL" value="jdbc:oracle:thin:@${storeprimary.host}:${oracle.datasource.port}/${storeprimary.db}" />
      <entry key="dtv.datasource.storeprimary.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.storebackup.ConnectionURL" value="jdbc:oracle:thin:@${storebackup.host}:${oracle.datasource.port}/${storebackup.db}" />
      <entry key="dtv.datasource.storebackup.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.local.ConnectionURL" value="jdbc:oracle:thin:@${local.host}:${oracle.datasource.port}/${localDB}" />
      <entry key="dtv.datasource.local.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.replication.ConnectionURL" value="jdbc:oracle:thin:@${repl.host}:${oracle.datasource.port}/${repl.db}" />
      <entry key="dtv.datasource.replication.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.training.ConnectionURL" value="jdbc:oracle:thin:@${training.host}:${oracle.datasource.port}/${trainDB}" />
      <entry key="dtv.datasource.training.ping.port" value="${oracle.datasource.port}" />
      <entry key="dtv.datasource.master.ConnectionURL" value="jdbc:oracle:thin:@${local.host}:${oracle.datasource.port}/${localDB}" />
      <entry key="dtv.datasource.connectionfactory" value="${oracle.database.driver.classname}" />
    </propertyfile>
  </target>

  <!-- authorization configuration -->
  <target name="configure-auth" depends="configure-auth-xpay-host,configure-auth-xpay-fdms,configure-auth-xpay-ptech,configure-auth-xpay-mwhse,configure-auth-xpay-mlink,configure-auth-tender-retail,configure-auth-eft-link" />
  <target name="configure-auth-xpay-host" if="isXpay">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.auth.xpay.Host1" value="${xpay.Host1}" />
      <entry key="dtv.auth.xpay.Host2" value="${xpay.Host2}" />
      <entry key="dtv.auth.xpay.ReceiveTimeout" value="${xpay.ReceiveTimeout}" />
      <entry key="dtv.auth.xpay.ConnectionUserName" value="${xpay.ConnectionUserName}" />
      <entry key="dtv.auth.xpay.ConnectionPassword" value="${xpay.ConnectionPassword}" />
    </propertyfile>
  </target>
  <target name="configure-auth-xpay-fdms" if="isFdmsXpay">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.xpay.fdms.credit.merchant" value="${xpay.fdms.credit.merchant}" />
      <entry key="dtv.xpay.fdms.credit.datawire" value="${xpay.fdms.credit.datawire}" />
      <entry key="dtv.xpay.fdms.credit.terminal" value="${xpay.fdms.credit.terminal}" />
      <entry key="dtv.xpay.fdms.debit.merchant" value="${xpay.fdms.debit.merchant}" />
      <entry key="dtv.xpay.fdms.debit.datawire" value="${xpay.fdms.debit.datawire}" />
      <entry key="dtv.xpay.fdms.debit.terminal" value="${xpay.fdms.debit.terminal}" />
      <entry key="dtv.xpay.fdms.giftcard.merchant" value="${xpay.fdms.giftcard.merchant}" />
    </propertyfile>
  </target>
  <target name="configure-auth-xpay-ptech" if="isPtechXpay">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.xpay.ptech.credit.merchant" value="${xpay.ptech.credit.merchant}" />
      <entry key="dtv.xpay.ptech.credit.terminal" value="${xpay.ptech.credit.terminal}" />
      <entry key="dtv.xpay.ptech.credit.client" value="${xpay.ptech.credit.client}" />
      <entry key="dtv.xpay.ptech.debit.merchant" value="${xpay.ptech.debit.merchant}" />
      <entry key="dtv.xpay.ptech.debit.terminal" value="${xpay.ptech.debit.terminal}" />
      <entry key="dtv.xpay.ptech.debit.client" value="${xpay.ptech.debit.client}" />
      <entry key="dtv.xpay.ptech.giftcard.merchant" value="${xpay.ptech.gc.merchant}" />
      <entry key="dtv.xpay.ptech.giftcard.terminal" value="${xpay.ptech.gc.terminal}" />
      <entry key="dtv.xpay.ptech.giftcard.client" value="${xpay.ptech.gc.client}" />
    </propertyfile>
  </target>
  <target name="configure-auth-xpay-mwhse" if="isMwXpay">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.xpay.mwhse.credit.merchant" value="${xpay.mwhse.credit.merchant}" />
      <entry key="dtv.xpay.mwhse.credit.orgname" value="${xpay.mwhse.credit.orgname}" />
      <entry key="dtv.xpay.mwhse.credit.site" value="${xpay.mwhse.credit.site}" />
      <entry key="dtv.xpay.mwhse.debit.merchant" value="${xpay.mwhse.debit.merchant}" />
      <entry key="dtv.xpay.mwhse.debit.orgname" value="${xpay.mwhse.debit.orgname}" />
      <entry key="dtv.xpay.mwhse.debit.site" value="${xpay.mwhse.debit.site}" />
    </propertyfile>
  </target>
  <target name="configure-auth-xpay-mlink" if="isMlXpay">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.xpay.mlink.credit.terminal" value="${xpay.mlink.credit.terminal}" />
      <entry key="dtv.xpay.mlink.credit.orgname" value="${xpay.mlink.credit.orgname}" />
      <entry key="dtv.xpay.mlink.credit.site" value="${xpay.mlink.credit.site}" />
      <entry key="dtv.xpay.mlink.debit.terminal" value="${xpay.mlink.debit.terminal}" />
      <entry key="dtv.xpay.mlink.debit.orgname" value="${xpay.mlink.debit.orgname}" />
      <entry key="dtv.xpay.mlink.debit.site" value="${xpay.mlink.debit.site}" />
    </propertyfile>
  </target>
  <target name="configure-auth-tender-retail" if="isTenderRetail">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.auth.tender-retail.host" value="${tender-retail.host}" />
      <entry key="dtv.auth.tender-retail.merchant" value="${tender-retail.merchant}" />
      <entry key="dtv.auth.tender-retail.terminal" value="${tender-retail.terminal}" />
    </propertyfile>
  </target>
  <target name="configure-auth-eft-link" if="isEftLink">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="dtv.auth.eft-link.channel0" value="${eft-link.channel0}" />
      <entry key="dtv.auth.eft-link.channel1" value="${eft-link.channel1}" />
    </propertyfile>
  </target>
  <!-- CountryPack settings -->
  <target name="configure-countrypack" depends="configure-country-br" />
  <target name="configure-country-br" if="isCountryBr">
    <propertyfile file="${local.base.xstore.properties.file}">
      <entry key="oracle.br.nfe.integration.dir" value="${nfeIntegrationDir}" />
    </propertyfile>
  </target>
  

  <!-- upgrades a properties file using a new properties file -->
  <macrodef name="upgradeproperties">
    <attribute name="origfile" />
    <attribute name="mergefile" />
    <sequential>
      <if>
        <and>
          <available file="@{mergefile}" />
          <available file="@{origfile}" />
        </and>
        <then>
          <echo message="** Found @{mergefile}, running upgrade procedure." />
          <java classname="dtv.installer.util.PropertiesFileUpgrade">
            <arg line="@{mergefile} @{origfile}" />
            <classpath>
              <fileset dir="${install.dir}/lib">
                <include name="ext/commons-collections-*.jar" />
                <include name="ext/commons-lang-*.jar" />
                <include name="ext/commons-logging-*.jar" />
                <include name="ext/commons-configuration-*.jar" />
                <include name="ext/log4j-*.jar" />
                <include name="ext/xercesImpl.jar" />
                <include name="ext/xml-apis.jar" />
                <include name="dtv-util.jar" />
                <include name="dtv-upgrader.jar" />
              </fileset>
            </classpath>
          </java>
          <echo message="** Replacing @{origfile} with updated version" />
          <copy file="@{mergefile}" tofile="@{origfile}" overwrite="true" verbose="true" />
          <delete file="@{mergefile}" verbose="true" />
        </then>
        <else>
          <echo level="warning" message="*** Config file @{mergefile} or original file @{origfile} does not exist.  No upgrade was attempted. ***" />
        </else>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="applyXstoreInstallUpgrade">
    <attribute name="installDir" />
    <attribute name="component" default="pos" />
    <sequential>
      <!-- delete old install directory contents, tolerating errors on non-install types -->
      <local name="fail.on.deletion.error" />
      <local name="fail.on.not.exists" />
      <condition property="fail.on.deletion.error" value="true" else="false">
        <contains string="${install.type}" substring="install" />
      </condition>
      <condition property="fail.on.not.exists" value="false" else="true">
        <contains string="${install.type}" substring="install" />
      </condition>
      <delete includeemptydirs="true" failonerror="${fail.on.deletion.error}">
        <fileset dir="@{installDir}" includes="**/*" erroronmissingdir="${fail.on.not.exists}" />
      </delete>

      <!-- extract the new install -->
      <unzip src="xstore-${ix.appname}.zip" dest="@{installDir}">
        <patternset refid="platform.appropriate.files" />
      </unzip>
      <unzip src="xstore-${ix.appname}-@{component}.zip" dest="@{installDir}">
        <patternset refid="platform.appropriate.files" />
      </unzip>
      <if>
        <istrue value="${xstore.xfg}" />
        <then>
          <echo message="Applying Xfg Components" />
          <unzip src="xstore-${ix.appname}-${xfg.component}.zip" dest="@{installDir}">
            <patternset refid="platform.appropriate.files" />
          </unzip>
        </then>
      </if>

      <!-- move scripts to the root and remove the scripts directory -->
      <move todir="@{installDir}">
        <fileset dir="@{installDir}/${platform.os}/script" includes="*" excludes="*.txt"  />
      </move>
      <delete quiet="true" dir="@{installDir}/${platform.os}/script" />

      <!-- make temp directory if it isn't present -->
      <mkdir dir="@{installDir}/tmp" />
    </sequential>
  </macrodef>

  <macrodef name="applyXstoreUpdate">
    <attribute name="installDir" />
    <attribute name="component" default="pos" />
    <sequential>
      <patternset id="exclude.receiptlogo.if.appropriate">
        <exclude name="res/graphics/receipt/logo.bmp" unless="replaceConfiguratorReceiptLogo" />
      </patternset>
      <unzip src="xstore-${ix.appname}.zip" dest="@{installDir}">
        <patternset refid="platform.appropriate.files" />
      <patternset refid="exclude.receiptlogo.if.appropriate" />
      </unzip>
      <unzip src="xstore-${ix.appname}-@{component}.zip" dest="@{installDir}">
        <patternset refid="platform.appropriate.files" />
        <patternset refid="exclude.receiptlogo.if.appropriate" />
      </unzip>
      
      <!-- move scripts to the root and remove the scripts directory -->
      <move todir="@{installDir}">
        <fileset dir="@{installDir}/${platform.os}/script" includes="*" excludes="*.txt"  />
      </move>
      <delete quiet="true" dir="@{installDir}/${platform.os}/script" />
    </sequential>
  </macrodef>
  
  <macrodef name="applyupdatescript">
    <attribute name="username" />
    <attribute name="password" />
    <attribute name="sqlfile" />
    <sequential>
      <echo level="info" message="Applying SQL file @{sqlfile} to database ${INSTALLERPROP.local.db.name}." />
      <local name="install.cipher.directory" />
      <property name="install.cipher.directory" location="${install.dir}/res/keys" description="Normalize the ciper file directory for this platform." />
      <java fork="true" failonerror="true" dir="${basedir}" classname="dtv.util.exec.sql.SqlFileExecutor">
        <classpath>
          <fileset dir="${install.dir}/lib" includes="${customer.id.lc}-*.jar" />
          <fileset dir="${install.dir}/lib" includes="*.jar" excludes="${customer.id.lc}-*.jar" />
          <fileset dir="${install.dir}/lib/ext" includes="*.jar" />
        </classpath>
        <sysproperty key="dtv.util.crypto.SecretKeyCipherManager.keyStoreDirectory" value="${install.cipher.directory}"/>
        <sysproperty key="dtv.util.crypto.DtvKeyStoreManager.keyStoreDirectory" value="${install.cipher.directory}"/>
        <sysproperty key="dtv.CustomerId" value="${customer.id}"/>
        <sysproperty key="dtv.CustomerId.salt" value="${BASEXDBPROPS.dtv.CustomerId.salt}"/>
        <arg value="${platform.db}"/>
        <arg value="localhost"/>
        <arg value="${INSTALLERPROP.local.db.name}"/>
        <arg value="@{username}"/>
        <arg value="@{password}"/>
        <arg value="@{sqlfile}"/>
      </java>
    </sequential>
  </macrodef>
</project>
