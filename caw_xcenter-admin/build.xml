<?xml version="1.0" encoding="utf-8" ?>
<project name="customer-xcenter-admin" basedir="." default="build-overlay">
  <!-- import the core script -->
  <property name="core.project" location="${basedir}/../caw" />
  <import file="${core.project}/core.xml"/>

  <!-- source paths -->
  <property name="src.dir" location="${basedir}/src" />
  <property name="resource.dir" location="${basedir}/resources" />
  <property name="document.dir" location="${basedir}/documents" />

  <!-- output paths -->
  <property name="output.dir" location="${basedir}/target" />
  <property name="overlay.dir" location="${output.dir}/overlay" />
  <property name="exploded.war.dir" location="${output.dir}/explodedwar" />
  <property name="gwt.unitcache.dir" location="${output.dir}/gwt-unitCache" />
  <property name="gwt.output.dir" location="${output.dir}/war" />
  <property name="gwt.module.tmpdir" location="${output.dir}/gwt-module-temp" />
  <property name="classes.staging.dir" location="${output.dir}/classes-ant" />
  <property name="gwt.deps.sources.dir" location="${output.dir}/gwt-deps-sources" />
  <property name="gwt.deps.classes.dir" location="${output.dir}/gwt-deps-classes" />

  <!-- cust jar file locations -->
  <condition property="cust.xstore.overlay.bin.folder" value="${xstore.overlay.dir}/classes" else="${xstore.overlay.dir}/bin">
    <isset property="running.on.build.server" />
  </condition>
  <property name="cust.xstore.overlay.cust_config.folder" location="${xstore.overlay.dir}/cust_config" />
  <property name="cust.xstore.overlay.lib.folder" location="${xstore.overlay.dir}/lib" />
  <property name="cust.overlay.lib" location="${basedir}/lib" />
  <property name="cust.overlay.lib.ext" location="${basedir}/lib/ext" />
  <property name="cust.overlay.build.lib" location="${basedir}/lib" />
  <property name="cust.overlay.build.lib.ext" location="${basedir}/build-lib/ext" />
  <property name="cust.xcenter-shared.overlay.folder" location="${basedir}/../${project.name.prefix}xcenter-shared" />

  <!-- other jar file locations -->
  <property name="gwt.lib.folder" location="${release.dir}/gwt-lib" />

  <!-- other misc properties -->
  <script language="javascript">project.setProperty("cpucount",java.lang.Runtime.getRuntime().availableProcessors());</script>

  <!-- paths to application files -->
  <property name="xcenter.admin.classes.dir" location="${xadmin.artifact.dir}/WEB-INF/classes" />
  <property name="xcenter.admin.lib.dir" location="${xadmin.artifact.dir}/WEB-INF/lib" />
  <property name="xstore.lib.ext.dir" location="${xstore.artifact.dir}/xstore/lib/ext" />

	
  <!-- support injecting additional targets by extension if a build-custom.xml file is provided -->
  <import optional="true" file="build-custom.xml" />

  <!-- sanity check to confirm that the war file and modules were provided -->
  <fail message="Expected to find the contents of a base xadmin war file at ${xadmin.artifact.dir} and base xadmin module jar files at ${gwtmodule.artifact.dir} but one or more was not available.">
    <condition>
      <not>
        <and>
          <available file="${gwtmodule.artifact.dir}" />
          <available file="${xcenter.admin.classes.dir}" />
          <available file="${xcenter.admin.lib.dir}" />
        </and>
      </not>
    </condition>
  </fail>
	<!-- sanity check that, if GWT compilation will happen, a lib folder has been provided -->
	<fail message="GWT compilation appears to be necessary, but a GWT lib folder was not found at ${gwt.lib.folder}.  This folder should exist and should contain gwt-dev, gwt-user, and validation-api jars that are appropriate for this version.">
	  <condition>
	   <and>
		   <isset property="gwt.module.names" />
	   	 <not>
	       <available file="${gwt.lib.folder}" />
	   	 </not>
    </and>
		</condition>
	</fail>

  <!-- classpaths -->
  <path id="base.app.classpath" description="Set up a classpath that includes the code and deps that are included in the base application">
    <pathelement location="${xcenter.admin.classes.dir}" />
    <fileset dir="${xcenter.admin.lib.dir}" includes="*.jar" />
  </path>
  <path id="project.overlay.classpath" description="Set up a classpath that includes the customer deps and code that will be included in the application">
    <fileset dir="${cust.xcenter-shared.overlay.folder}/target" includes="*xcenter-shared.jar" erroronmissingdir="false" />
    <pathelement location="${cust.xstore.overlay.bin.folder}" />
    <fileset dir="${cust.xstore.overlay.lib.folder}" erroronmissingdir="false">
      <include name="${customer.id.lc}-*.jar" />
      <include name="ops-*.jar" />
    </fileset>
    <fileset dir="${cust.overlay.lib}" includes="*.jar" erroronmissingdir="false" />
    <fileset dir="${cust.overlay.lib.ext}" includes="*.jar" erroronmissingdir="false" />
    <fileset dir="${cust.overlay.build.lib}" includes="*.jar" />
    <fileset dir="${cust.overlay.build.lib.ext}" includes="*.jar" />
  </path>
  <path id="build.classpath" description="Javac build classpath">
    <path refid="project.overlay.classpath" />
    <path refid="base.app.classpath" />
    <fileset dir="${xstore.lib.ext.dir}" includes="servlet-api*.jar" />
  </path>
  <path id="gwt.build.classpath" description="GWT build classpath">
    <pathelement location="${classes.staging.dir}" />
    <pathelement location="${src.dir}" />
    <pathelement location="${gwt.module.tmpdir}" />
    <pathelement location="${gwt.deps.sources.dir}" />
    <pathelement location="${gwt.deps.classes.dir}" />
    <path refid="build.classpath" />
    <fileset dir="${gwt.lib.folder}" includes="*.jar" />
  </path>

  <!-- resource collections used for exploded war and overlay creation -->
  <union id="xadmin.overlay.resources">
    <fileset dir="${gwt.output.dir}" erroronmissingdir="false" />
    <mappedresources>
      <globmapper from="*" to="WEB-INF/classes/*" />
      <union>
        <fileset dir="${resource.dir}" />
        <fileset dir="${classes.staging.dir}" />
      </union>
    </mappedresources>
    <mappedresources>
      <globmapper from="*" to="WEB-INF/lib/*" />
      <union>
        <fileset dir="${cust.overlay.lib.ext}" includes="*.jar" erroronmissingdir="false" />
        <fileset dir="${cust.overlay.lib}" includes="*.jar" erroronmissingdir="false" />
        <fileset dir="${cust.xcenter-shared.overlay.folder}/target" includes="*xcenter-shared.jar" erroronmissingdir="false" />
      </union>
    </mappedresources>
  </union>
  <union id="xstore.overlay.resources">
    <mappedresources>
      <globmapper from="*" to="WEB-INF/classes/*" />
      <union>
        <fileset dir="${cust.xstore.overlay.cust_config.folder}" />
        <fileset dir="${cust.xstore.overlay.bin.folder}" />
      </union>
    </mappedresources>
    <mappedresources>
      <globmapper from="*" to="WEB-INF/lib/*" />
      <fileset dir="${cust.xstore.overlay.lib.folder}" erroronmissingdir="false">
        <include name="${customer.id.lc}-*.jar" />
        <include name="ops-*.jar" />
      </fileset>
    </mappedresources>
  </union>


  <target name="clean-all" description="Cleans the output directory">
    <delete dir="${output.dir}" />
  </target>

  <target name="clean-modules" description="Cleans the module temporary directory">
    <delete dir="${gwt.module.tmpdir}" />
  </target>

  <target name="clean-gwt-deps" description="Cleans GWT dependency directories">
    <delete dir="${gwt.deps.sources.dir}" />
    <delete dir="${gwt.deps.classes.dir}" />
  </target>

  <target name="clean-classes" description="Cleans the classes directory">
    <delete dir="${classes.staging.dir}" />
  </target>

  <target name="clean-gwt-compiler-output" description="Cleans GWT compiler output">
    <delete dir="${gwt.unitcache.dir}" />
    <delete dir="${gwt.output.dir}" />
  </target>

  <target name="clean-overlay" description="Cleans the overlay directory">
    <delete dir="${overlay.dir}" />
  </target>

  <target name="clean-exploded-war" description="Cleans the exploded war directory">
    <delete dir="${exploded.war.dir}" />
  </target>

  <target name="prepare-modules" depends="clean-modules" if="gwt.module.names" description="Prepares a directory structure containing GWT modules">
    <mkdir dir="${gwt.module.tmpdir}" />
    <unjar dest="${gwt.module.tmpdir}">
      <fileset dir="${gwtmodule.artifact.dir}" includes="*.jar" excludes="mr-gwt-gwtdeps.jar" />
    </unjar>
  </target>

  <target name="prepare-gwt-deps" depends="clean-gwt-deps" if="gwt.module.names" description="Prepares build-time dependencies needed by the GWT compiler.">
    <mkdir dir="${gwt.deps.sources.dir}" />
    <unjar dest="${gwt.deps.sources.dir}">
      <fileset dir="${gwtmodule.artifact.dir}" includes="mr-gwt-gwtdeps.jar" />
    </unjar>
    <mkdir dir="${gwt.deps.classes.dir}" />
    <javac srcdir="${gwt.deps.sources.dir}" destdir="${gwt.deps.classes.dir}" debug="true" classpathref="gwt.build.classpath" />
  </target>

  <target name="compile" depends="clean-classes" description="Compile main java code">
    <mkdir dir="${classes.staging.dir}" />
    <javac srcdir="${src.dir}" destdir="${classes.staging.dir}" debug="true" classpathref="build.classpath" />
  </target>

  <target name="gwt-compile" depends="compile,clean-gwt-compiler-output,prepare-gwt-deps,prepare-modules" if="gwt.module.names" description="Compiles the application using hte GWT compiler.">
    <echo message="Using ${cpucount} cpus for compilation." />
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath refid="gwt.build.classpath" />
      <jvmarg value="-Xmx640M" />
      <jvmarg value="-Dgwt.persistentunitcachedir=${gwt.unitcache.dir}" />
      <arg value="-style" />
      <arg value="PRETTY" />
      <arg value="-war" />
      <arg value="${gwt.output.dir}" />
      <arg value="-localWorkers" />
      <arg value="${cpucount}" />
      <arg line="${gwt.module.names}" />
    </java>
  </target>

  <target name="build-overlay" depends="gwt-compile,clean-overlay" description="Assembles the overlay">
    <copy todir="${overlay.dir}">
      <resources refid="xadmin.overlay.resources" />
    </copy>
  </target>

  <target name="refresh-exploded-war" depends="gwt-compile" description="Refreshes the exploded war directory structure.">
    <copy todir="${exploded.war.dir}" overwrite="true">
      <resources refid="xstore.overlay.resources" />
      <resources refid="xadmin.overlay.resources" />
    </copy>
  </target>

  <target name="build-exploded-war" depends="gwt-compile,clean-exploded-war" description="Assembles a directory structure roughly representative of a production war file on the disk">
    <copy todir="${exploded.war.dir}">
      <fileset dir="${xadmin.artifact.dir}" />
      <resources refid="xstore.overlay.resources" />
      <resources refid="xadmin.overlay.resources" />
    </copy>
  </target>
</project>