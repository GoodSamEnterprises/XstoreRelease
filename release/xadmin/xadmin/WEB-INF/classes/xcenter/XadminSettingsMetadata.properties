#
# SystemConfigMetadata.properties
#
# To enjoy the benefit of the Xadmin Settings GUI (starting in 6.5), this properties
# file must be maintained along with any/all changes to the Xadmin settings. This is the place where the 
# characteristics of all Xadmin configuration settings are defined. If you create a new setting and do not
# place information about it in this file, accessing the settings in the Xadmin GUI will fail miserably.
#
# Each metadatum fully describes a Xadmin configuration setting. This file contains only information about
# settings. This information is used by the Xadmin settings GUI to dynamically create a user interface
# for managing these settings. The values for the settings are stored in the Xadmin database in the 
# cfg_system_setting table.

# To identify a setting, take everything to the left of the first period ("."), ignoring any potential
# leading underscore. This is the identifier of the setting. All identifiers must be unique. 
# 
# For example, you will find the following associated block of properties in this file:
#
# _AutoFileTransferDirectory.label=
# _AutoFileTransferDirectory.description=
# AutoFileTransferDirectory.datatype=Str
# AutoFileTransferDirectory.category=_general
# AutoFileTransferDirectory.order=0
#
#
# Notice how the .label and .description keys themselves are prefixed with an
# underscore.  This is so that this properties file can directly be used as a "resource
# bundle" file using Xstore's standard I18N code for retrieving file-based translations
# (dtv.i18n.DtvResourceBundle).
#
# The other properties (which do not start with the underscore) will be read and processed
# by different code (com.micros_retail.xadmin.administration.gwt.server.settings.XadminSettingsManager).
# But by sharing this file, all of the relevant metadata about each configurable setting can be neatly kept 
# together.
#
# Since an XadminSettingsMetadata.properties file doubles as an i18n resource bundle file, the
# easiest way to create a "stub" for a language translation is to "grep" the base file for all
# lines which start with an underscore.
#
# Here's an example Unix command which will filter out all of the I18N keys, strip out ones
# that shouldn't be translated ("grep -v "**DO NOT TRANSLATE**"), leave the default English values,
# in there, and create a stub properties file for the French language:
#
# grep ^_ SystemConfigMetadata.properties | grep -v "**DO NOT TRANSLATE**" > SystemConfigMetadata.properties_fr_FR
#
# Each metadatum has the following set of attributes:
#
# .label=
# .description=
# .datatype=
# .datatypeParams.1=   {optional}
# .category=
# .order=              {optional}
# .tag.1=
# .privilege=          {optional}
#
#
# 1) The .label should be a short string (about 20 to 40 characters) that succinctly defines
#    the config item.
#
#
# 2) The .description should be a verbose description of the config item (a paragraph or so).
#
#
# 3) .datatype refers to a set of datatypes which are roughly analagous to some Java types and others are 
#    just specialized versions of some simpler types (Directory versus Str).
#
#    However, these datatype classes are (or can be) stricter, and shall be used by the Xadmin settings
#    GUI to enforce validation rules about the values being entered for each config.
#
#    The basic types (and optional validation restrictions) are:
#
#    BigDec         value must be a BigDecimal
#                   (optional min and/or max)
#
#    Bool           value must be a boolean
#
#    Int            value must be an integer
#                   (optional min and/or max)
#
#    JavaClass      value must kinda look like a Java class (no space characters)
#                   (optional "validPackages" does a simple ".startsWith(packagePrefixStr)" validation
#
#    Str            value must be a String
#                   (with optional enumerated "validVal"'s, optional "allowMultipleValidVals", and optional "maxlen")
#
#    Translatable   value must be a String that looks like an Xstore translation code, i.e. starts
#                   with '_' or '+' and contains no space characters
#
#    Url            value must be a String that looks like a URL (implementation tbd)
#
#    Directory      must conform to the rules enforced on the name of a directory (primarily MS Windows rules) 
#
#    See all implementations of com.micros_retail.xadmin.configurator.shared.sysconfig.type.SysCfgType
#    for details.
#
#
# 3b) .datatypeParams.{n} offers a way to optionally customize/restrict the "validation behavior"
#     of the datatype.
#
#    A config might declare no datatypeParams, or one, or many.  Each datatypeParam needs to be
#    uniquely identified (as this is a standard Java properties file); hence there is an arbitrary
#    number associated with each parameter.
#
#    The possible value(s) of datatypeParams mostly depends on the datatype, because it's the datatype
#    that will perform validation.
#
#    However, all datatypes do support one generic datatypeParam:
#
# ........datatypeParams.0= allowEmptyVal=true
#
#    ** BY DEFAULT, ALL CONFIGURATIONS DO NOT ALLOW AN EMPTY VALUE! **.
#
#    Or in other words, each config has an implied "allowEmptyVal=false" datatypeParam.
#
#    There are a small number of exceptions, though, where it is important that a config be allowed to
#    have no value.  For these configs, the "allowEmptyVal=true" datatypeParam can be declared.
#
#    The rest of the datatypes can support their own custom datatypeParams.
#
#    For example, Int supports declaraing a min and/or max integer value like this:
#
# ........datatypeParams.1= min=1
# ........datatypeParams.2= max=10
#
#    This lets you define the validation behavior here in the metadata.
#
#    Another good example is for the Str datatype, which lets you basically declare an enumeration of
#    valid values:
#
# ........datatypeParams.1= validVal=DESTINATION
# ........datatypeParams.2= validVal=SELLING
# ........datatypeParams.3= validVal=DEST_INSTATE
#
#    This allows the Xadmin SysConfig GUI to not only restrict values to those indicated, it will
#    even adjust the gui to present these values as radio-button (or checkbox) widgets, so that these
#    values are the only ones the user can possibly choose.
#
#    Given a config with a Str datatype and a set of validVal's, by default the GUI forces the user to
#    only choose a single value (and presents the choices with radio-buttons).  For some configs, the user
#    needs to be able to pick *multiple* values (as with check-boxes).  The "allowMultipleValidVals"
#    datatypeParam can be used to enable this behavior.  For example:
#
# ........datatypeParams.0=allowMultipleValidVals=true
#
#    It is very common for these "multiple choice" configs to be combined with the "allowEmptyVal=true"
#    setting mentioned above.  If this setting is not present, then at least one checkbox will have to
#    be selected in order for the config to pass validation.
#
#
#    Note: the GUI will present the validVal's in the order in which they are defined
#          (as with ...datatypeParams.1=..., ...datatypeParams.2=..., ...datatypeParams.3=..., etc)
#
#    The validVal's should also be associated with i18n translation codes:
#
# ........datatypeParams.1= validVal=DESTINATION::_sendTaxType_DESTINATION
# ........datatypeParams.2= validVal=SELLING::_sendTaxType_SELLING
# ........datatypeParams.3= validVal=DEST_INSTATE::_sendTaxType_DEST_INSTATE
#
#    The codes must be standard Xstore translation codes (starting with an underscore).  The
#    translated value for the above code **MUST** be stored right in this properties file (or
#    in the customer-override SystemConfigMetadata.properties file, if there is one).
#
#    It may be advisable (although nothing enforces this) to devise some sort of convention
#    to avoid "namespace collisions" when providing translations for these valid values.  In
#    the above example, the Xstore i18n code starts with an underscore (as it must), and then
#    the translations for this particular set of valid values all follow with "sendTaxType_"
#    plus the enum code.  It's not absolutely necessary; the i18n code for SELLING could easily
#    just be "_selling".  It's up to developers to keep things tidy.
#
#    Also be aware that there are other translations in this file aside from valid values; for
#    example, categories are also translated in this file (see below).
#
#
# 4) .category is used to organize the presentation of the configs in the Xadmin SysConfig GUI.
#
#    Each config must belong to exactly one category.
#
#    The category itself must be a standard Xstore translation code (starting with an underscore).
#    The translated value for the above code must be stored right in this properties file.
#
#
# 5) .order is an integer attribute used to put things in order in the GUI.
#
#    Normally, things are ordered alphabetically.  This attribute overrides alphabetical ordering.
#
#    You can use this to force the Xadmin SysConfig GUI to present configs in a certain order
#    (within its category).  For example, look at the xxx_USERNAME and xxx_PASSWORD metadata.
#    If those were left to alphabetical sorting, xxx_PASSWORD will always come before xxx_USERNAME.
#    To force USERNAME to come up first, add an .order attribute to the configs you want to sort
#    specifically.
#
#    Each config has a default order of 0.  You may use positive or negative integers as necessary.
#
#
# 7) .privilege is an optional attribute that refers to an Xadmin (not Xstore) privilege.
#
#    When a config has a privilege declared, it means that the currently logged in Xadmin user
#    must be associated to that privilege (via his role) in order to be able to see that config
#    in the GUI.
#
#    If the user lacks the privilege, that config will be completely omitted from the GUI.
#
#    If a config is not associated to any privilege (which is true for most of them), the privilege
#    will be available to all users in the Xadmin GUI.
#
###################################################################################################

_AutoFileTransferDirectory.label=Directory for Automatically Deployed Data Files
_AutoFileTransferDirectory.description=The directory into which dataloader files can be placed for automatic deployment.  Dataloader files that are placed in this directory will be automatically detected by Xadmin and will be deployed to the appropriate stores that are identified within the file. Example formats: file:/filetransfer/auto/org${organizationId}/ OR file:/C:/filetransfer/auto/org${organizationId}/
AutoFileTransferDirectory.datatype=Directory
AutoFileTransferDirectory.category=_deployment
AutoFileTransferDirectory.order=0

_AutoFileTransferSchedulerInterval.label=Detection Interval for Automatically Deployed Data Files
_AutoFileTransferSchedulerInterval.description=The interval, in minutes, between times that Xadmin checks the Directory for Automatically Deployed Data Files for files to deploy.
AutoFileTransferSchedulerInterval.datatype=Int
AutoFileTransferSchedulerInterval.datatypeParams.1=min=1
AutoFileTransferSchedulerInterval.datatypeParams.2=max=1440
AutoFileTransferSchedulerInterval.category=_deployment
AutoFileTransferSchedulerInterval.order=0

_PrimaryServerNumber.label=Primary Server Number
_PrimaryServerNumber.description=Only one Xadmin server may be allowed to perform certain processes.  These processes include 1) the auto file deployment / dataloader process, and 2) the critical alerts email sending service. Set this config to the desired server number, or choose a non-existent server number to disable these processes across all Xadmin servers (each Xadmin server's "server number" is configured in its own copy of xcenter.properties).
PrimaryServerNumber.datatype=Int
PrimaryServerNumber.datatypeParams.1=min=0
PrimaryServerNumber.category=_general
PrimaryServerNumber.order=0

_MaxPOSLogResult.label=Number of Records in POSLog Publisher Result Page
_MaxPOSLogResult.description=The maximum number of POSLog records that should show per page within the POSLog publisher result page.
_MaxPOSLogResult.datatype=Int
_MaxPOSLogResult.datatypeParams.1=min=1
_MaxPOSLogResult.category=_general
_MaxPOSLogResult.order=0

_MaxDeploymentResult.label=Number of Records in Deployment Viewer
_MaxDeploymentResult.description=The maximum number of deployment records that should show per page within the deployment viewer.
MaxDeploymentResult.datatype=Int
MaxDeploymentResult.datatypeParams.1=min=1
MaxDeploymentResult.category=_deployment
MaxDeploymentResult.order=0

_DaysBeforeLaunchDate.label=Number of Days Before Deployment Wave to Send Notification
_DaysBeforeLaunchDate.description=The number of days before a deployment wave is scheduled to launch that an email notification about the launch should be sent. These notifications will be sent only for waves that require approval.
DaysBeforeLaunchDate.datatype=Int
DaysBeforeLaunchDate.datatypeParams.1=min=0
DaysBeforeLaunchDate.category=_deployment
DaysBeforeLaunchDate.order=0

_DeploymentAutoEmailInterval.label=Interval for Checking for Deployment Waves That Require Approval
_DeploymentAutoEmailInterval.description=The amount of time, in minutes, that passes between checks for deployment waves that require approval. Once the time passes, an email will be sent for waves that meet the "Number of Days Before Deployment Wave to Send Notification" requirement.
DeploymentAutoEmailInterval.datatype=Int
DeploymentAutoEmailInterval.datatypeParams.1=min=1
DeploymentAutoEmailInterval.category=_deployment
DeploymentAutoEmailInterval.order=0

# These are settings that are configured in Xadmin, but are provided to the environment when dealing with downloading deployments
_DeploymentConfigRetries.label=Deployment Download Retries
_DeploymentConfigRetries.description=This is a setting that is used by Xenvironment at the store. It is the maximum number of times that Xenvironment will retry downloading a deployment after an initial failure. A setting of zero (0) means never retry, which is not recommended.
DeploymentConfigRetries.datatype=Int
DeploymentConfigRetries.datatypeParams.1=min=0
DeploymentConfigRetries.category=_deployment
DeploymentConfigRetries.order=0

_DeploymentConfigRetryInterval.label=Deployment Download Retry Interval
_DeploymentConfigRetryInterval.description=This is a setting that is used by Xenvironment at the store. It is the amount of time, in seconds, that Xenvironment will wait after a failed deployment download attempt before it tries to download the deployment again.
DeploymentConfigRetryInterval.datatype=Int
DeploymentConfigRetryInterval.datatypeParams.1=min=0
DeploymentConfigRetryInterval.category=_deployment
DeploymentConfigRetryInterval.order=0

_DeploymentConfigTimeout.label=Deployment Download Connection Timeout
_DeploymentConfigTimeout.description=This is a setting that is used by Xenvironment at the store. It is the amount of time, in seconds, that Xenvironment will spend attempting to connect to Xcenter to download a deployment. Once the time has elapsed with no connection detected, the attempt will be considered a failure.
DeploymentConfigTimeout.datatype=Int
DeploymentConfigTimeout.datatypeParams.1=min=1
DeploymentConfigTimeout.category=_deployment
DeploymentConfigTimeout.order=0
# End settings for the environment

_BusinessDateStartTime.label=Beginning Time of the Business Day
_BusinessDateStartTime.description=The time, in hours from 00:00 GMT, that denotes the corporate start time of the business day for support alert reporting. (For example, 5 is 05:00 GMT).
BusinessDateStartTime.datatype=Int
BusinessDateStartTime.datatypeParams.1=min=0
BusinessDateStartTime.datatypeParams.2=max=23
BusinessDateStartTime.category=_general
BusinessDateStartTime.order=0

_ScanForMissingDevicesEveryXMinutes.label=Interval for Checking for Missing Registers
_ScanForMissingDevicesEveryXMinutes.description=The amount of time, in minutes, that passes between checks for missing registers. Practically speaking, the value of this setting should be less than the Time Before Register Is Considered Missing setting.
ScanForMissingDevicesEveryXMinutes.datatype=Int
ScanForMissingDevicesEveryXMinutes.datatypeParams.1=min=1
ScanForMissingDevicesEveryXMinutes.category=_general
ScanForMissingDevicesEveryXMinutes.order=0

_DeviceConsideredMissingInXMinutes.label=Time Before Register Is Considered Missing
_DeviceConsideredMissingInXMinutes.description=The amount of time, in minutes, that must pass with no communication from a register before that register is considered missing.
DeviceConsideredMissingInXMinutes.datatype=Int
DeviceConsideredMissingInXMinutes.datatypeParams.1=min=1
DeviceConsideredMissingInXMinutes.category=_general
DeviceConsideredMissingInXMinutes.order=0

_IgnoreMissingDeviceAfterXHours.label=Time Before Missing Register Is Ignored
_IgnoreMissingDeviceAfterXHours.description=The amount of time, in hours, after a register has been considered missing before its missing status will stop being reported as a problem.
IgnoreMissingDeviceAfterXHours.datatype=Int
IgnoreMissingDeviceAfterXHours.datatypeParams.1=min=0
IgnoreMissingDeviceAfterXHours.category=_general
IgnoreMissingDeviceAfterXHours.order=0

_EnableDataManagerAutoDeployment.label=Automatically Deploy Data Manager Changes?
_EnableDataManagerAutoDeployment.description=Enable the ability of Xadmin to automatically deploy pending data manager changes at a certain time each day. The time of day is determined by the Data Manager Automatic Deployment Time setting.
EnableDataManagerAutoDeployment.datatype=Bool
EnableDataManagerAutoDeployment.category=_deployment
EnableDataManagerAutoDeployment.order=0

_DataManagerAutoDeploymentStartTime.label=Data Manager Automatic Deployment Time
_DataManagerAutoDeploymentStartTime.description=The time of the day to start the automatic deployment of pending data manager changes. The time format is HH:MM, using the 24 hour clock. This setting is only relevant when the "Automatically Deploy Data Manager Changes" setting is enabled.
DataManagerAutoDeploymentStartTime.datatype=Time
DataManagerAutoDeploymentStartTime.category=_deployment
DataManagerAutoDeploymentStartTime.order=0

_EnableDeleteStoreConfigurations.label=Enable the Option to Delete Configurations?
_EnableDeleteStoreConfigurations.description=Enable the option within configurator that allows users to delete configurations for profile or store specific overrides.
EnableDeleteStoreConfigurations.datatype=Bool
EnableDeleteStoreConfigurations.category=_general
EnableDeleteStoreConfigurations.order=0

_EnableStoreSpecificOverrides.label=Enable the Option to Create Store-Specific Configurations?
_EnableStoreSpecificOverrides.description=Enable the option within configurator that allows users to create or override configurations for a specific store.
EnableStoreSpecificOverrides.datatype=Bool
EnableStoreSpecificOverrides.category=_general
EnableStoreSpecificOverrides.order=0

_FileUploadDirectory.label=File Upload Directory
_FileUploadDirectory.description=The directory in which files are stored that are uploaded by users via the File Upload feature. Example formats: file:/fileuploads/org${organizationId}/ OR file:/C:/fileuploads/org${organizationId}/
FileUploadDirectory.datatype=Directory
FileUploadDirectory.category=_general
FileUploadDirectory.order=0

_PosLogPublisherRemoteFileDirectory.label=Published POSLog Directory
_PosLogPublisherRemoteFileDirectory.description=The directory into which POSLogs that are generated from the Publish POSLogs feature will be stored. Example formats: file:/poslog/org${organizationId}/ OR file:/C:/poslog/org${organizationId}/
PosLogPublisherRemoteFileDirectory.datatype=Directory
PosLogPublisherRemoteFileDirectory.category=_general
PosLogPublisherRemoteFileDirectory.order=0

_POSLogPublishSearchMaxResult.label=POSLog Publish Max Search Results
_POSLogPublishSearchMaxResult.description=The maximum number of POSLog records returned from the database for republishing.
POSLogPublishSearchMaxResult.datatype=Int
POSLogPublishSearchMaxResult.datatypeParams.1=min=0
POSLogPublishSearchMaxResult.category=_general
POSLogPublishSearchMaxResult.order=0

_LockUserAccountAfterRetries.label=Number of Login Attempts Before Account Is Locked
_LockUserAccountAfterRetries.description=The number of times a login attempt can fail due to an invalid password before the account associated with the failed login is locked.
LockUserAccountAfterRetries.datatype=Int
LockUserAccountAfterRetries.datatypeParams.1=min=1
LockUserAccountAfterRetries.category=_userAccount
LockUserAccountAfterRetries.order=0

_UserIdMinimumLength.label=User ID Length
_UserIdMinimumLength.description=The minimum number of characters that must be used in order for a user ID to be valid.
UserIdMinimumLength.datatype=Int
UserIdMinimumLength.datatypeParams.1=min=1
UserIdMinimumLength.category=_userAccount
UserIdMinimumLength.order=0

_PasswordExpirationDays.label=Password Expiration Days
_PasswordExpirationDays.description=The number of days that a password can be used before it expires.
PasswordExpirationDays.datatype=Int
PasswordExpirationDays.datatypeParams.1=min=1
PasswordExpirationDays.category=_userAccount
PasswordExpirationDays.order=0

_PasswordHistoryLength.label=Number of Changes Before a Password Can Be Reused
_PasswordHistoryLength.description=The number of password changes that must pass before a user can reuse an old password. A setting of zero (0) means that the same password can always be reused.
PasswordHistoryLength.datatype=Int
PasswordHistoryLength.datatypeParams.1=min=0
PasswordHistoryLength.category=_userAccount
PasswordHistoryLength.order=0

_PasswordMaximumConsecutiveChars.label=Number of Consecutive Characters Allowed in a Password
_PasswordMaximumConsecutiveChars.description=The maximum number of times that any given symbol or character can repeat consecutively within a password.
PasswordMaximumConsecutiveChars.datatype=Int
PasswordMaximumConsecutiveChars.datatypeParams.1=min=1
PasswordMaximumConsecutiveChars.category=_userAccount
PasswordMaximumConsecutiveChars.order=0

_PasswordMinimumCapitalLetters.label=Number of Capital Letters Required for a Password
_PasswordMinimumCapitalLetters.description=The minimum number of capital letters that must be used in order for a password to be valid.
PasswordMinimumCapitalLetters.datatype=Int
PasswordMinimumCapitalLetters.datatypeParams.1=min=0
PasswordMinimumCapitalLetters.category=_userAccount
PasswordMinimumCapitalLetters.order=0

_PasswordMinimumDigits.label=Number of Numbers Required for a Password
_PasswordMinimumDigits.description=The minimum number of numbers that must be used in order for a password to be valid.
PasswordMinimumDigits.datatype=Int
PasswordMinimumDigits.datatypeParams.1=min=0
PasswordMinimumDigits.category=_userAccount
PasswordMinimumDigits.order=0

_PasswordMinimumLength.label=Password Length
_PasswordMinimumLength.description=The minimum number of characters that must be used in order for a password to be valid.
PasswordMinimumLength.datatype=Int
PasswordMinimumLength.datatypeParams.1=min=1
PasswordMinimumLength.category=_userAccount
PasswordMinimumLength.order=0

_PasswordMinimumSpecialChars.label=Number of Special Characters Required for a Password
_PasswordMinimumSpecialChars.description=The minimum number of special characters (%, $, !, etc) that must be used in order for a password to be valid.
PasswordMinimumSpecialChars.datatype=Int
PasswordMinimumSpecialChars.datatypeParams.1=min=0
PasswordMinimumSpecialChars.category=_userAccount
PasswordMinimumSpecialChars.order=0

_NewUserPasswordCreation.label=Method of Creating Password for Users
_NewUserPasswordCreation.description=The method in which a password is created for newly created user or a user requesting a password reset.
NewUserPasswordCreation.datatype=UserPasswordCreation
NewUserPasswordCreation.category=_userAccount
NewUserPasswordCreation.order=0

_EnableLDAP.label=Enable LDAP Authentication Option?
_EnableLDAP.description=Enable Xadmin to authenticate users using LDAP directory.
EnableLDAP.datatype=Bool
EnableLDAP.category=_userAccount
EnableLDAP.order=0

_LDAP_URL.label=LDAP Provider URL
_LDAP_URL.description=URL to be used to connect to LDAP server
LDAP_URL.datatype=Str
LDAP_URL.datatypeParams.0=allowEmptyVal=true
LDAP_URL.category=_userAccount
LDAP_URL.order=0

_LDAP_DefaultDomain.label=Default Domain Name for LDAP
_LDAP_DefaultDomain.description=The default domain name to be used when authenticating users using LDAP.
LDAP_DefaultDomain.datatype=Str
LDAP_DefaultDomain.datatypeParams.0=allowEmptyVal=true
LDAP_DefaultDomain.category=_userAccount
LDAP_DefaultDomain.order=0

_DeleteFifoDataAfterRptGen.label=Delete FIFO data after report generation?
_DeleteFifoDataAfterRptGen.description=Determines whether FIFO data is deleted after a FIFO report is generated.
DeleteFifoDataAfterRptGen.datatype=Bool
DeleteFifoDataAfterRptGen.category=_general
DeleteFifoDataAfterRptGen.order=0

_EnableReportOutputFormat_PDF.label=Enable PDF (Portable Document Format) as a Report Output Format?
_EnableReportOutputFormat_PDF.description=Determines whether or not the system allows reports to be output in PDF format.
EnableReportOutputFormat_PDF.datatype=Bool
EnableReportOutputFormat_PDF.category=_reports
EnableReportOutputFormat_PDF.order=0

_EnableReportOutputFormat_HTML.label=Enable HTML (Hyper Text Markup Language) as a Report Output Format?
_EnableReportOutputFormat_HTML.description=Determines whether or not the system allows reports to be output in HTML format.
EnableReportOutputFormat_HTML.datatype=Bool
EnableReportOutputFormat_HTML.category=_reports
EnableReportOutputFormat_HTML.order=0

_EnableReportOutputFormat_XLS.label=Enable XLS (MS Excel) as a Report Output Format?
_EnableReportOutputFormat_XLS.description=Determines whether or not the system allows reports to be output in XLS format.
EnableReportOutputFormat_XLS.datatype=Bool
EnableReportOutputFormat_XLS.category=_reports
EnableReportOutputFormat_XLS.order=0

_EnableReportOutputFormat_XLSX.label=Enable XLSX (MS Excel 2007 or Newer) as a Report Output Format?
_EnableReportOutputFormat_XLSX.description=Determines whether or not the system allows reports to be output in XLSX format.
EnableReportOutputFormat_XLSX.datatype=Bool
EnableReportOutputFormat_XLSX.category=_reports
EnableReportOutputFormat_XLSX.order=0

_EnableReportOutputFormat_PPTX.label=Enable PPTX (MS PowerPoint) as a Report Output Format?
_EnableReportOutputFormat_PPTX.description=Determines whether or not the system allows reports to be output in PPTX format.
EnableReportOutputFormat_PPTX.datatype=Bool
EnableReportOutputFormat_PPTX.category=_reports
EnableReportOutputFormat_PPTX.order=0

_EnableReportOutputFormat_RTF.label=Enable RTF (Rich Text Format) as a Report Output Format?
_EnableReportOutputFormat_RTF.description=Determines whether or not the system allows reports to be output in RTF format.
EnableReportOutputFormat_RTF.datatype=Bool
EnableReportOutputFormat_RTF.category=_reports
EnableReportOutputFormat_RTF.order=0

_EnableReportOutputFormat_DOCX.label=Enable DOCX (MS Word) as a Report Output Format?
_EnableReportOutputFormat_DOCX.description=Determines whether or not the system allows reports to be output in DOCX format.
EnableReportOutputFormat_DOCX.datatype=Bool
EnableReportOutputFormat_DOCX.category=_reports
EnableReportOutputFormat_DOCX.order=0

_UseTillAccountabilityDefault.label=Use Till Based Accountability?
_UseTillAccountabilityDefault.description=Determines whether Till Accountability mode or Register Accountability mode is used as the default setting for store creation.
UseTillAccountabilityDefault.datatype=Bool
UseTillAccountabilityDefault.category=_general
UseTillAccountabilityDefault.order=0

_DefaultDepositBankName.label=Default Deposit Bank Name
_DefaultDepositBankName.description=The default deposit bank name to be used for store creation.
DefaultDepositBankName.datatype=Str
DefaultDepositBankName.datatypeParams.0=allowEmptyVal=true
DefaultDepositBankName.datatypeParams.0=maxlen=200
DefaultDepositBankName.category=_general
DefaultDepositBankName.order=0

_DefaultDepositBankAcctNbr.label=Default Deposit Bank Account Number
_DefaultDepositBankAcctNbr.description=The default deposit bank account number to be used for store creation.
DefaultDepositBankAcctNbr.datatype=Str
DefaultDepositBankAcctNbr.datatypeParams.0=allowEmptyVal=true
DefaultDepositBankAcctNbr.datatypeParams.0=maxlen=30
DefaultDepositBankAcctNbr.category=_general
DefaultDepositBankAcctNbr.order=0

_DefaultReportOutputFormat.label=Default Report Output Format
_DefaultReportOutputFormat.description=Determines which report output format is to be used as the default.
DefaultReportOutputFormat.datatype=Str
DefaultReportOutputFormat.datatypeParams.1=validVal=PDF::_reportOutputFormat_PDF
DefaultReportOutputFormat.datatypeParams.2=validVal=HTML::_reportOutputFormat_HTML
DefaultReportOutputFormat.datatypeParams.3=validVal=XLS::_reportOutputFormat_XLS
DefaultReportOutputFormat.datatypeParams.4=validVal=XLSX::_reportOutputFormat_XLSX
DefaultReportOutputFormat.datatypeParams.5=validVal=PPTX::_reportOutputFormat_PPTX
DefaultReportOutputFormat.datatypeParams.6=validVal=RTF::_reportOutputFormat_RTF
DefaultReportOutputFormat.datatypeParams.7=validVal=DOCX::_reportOutputFormat_DOCX
DefaultReportOutputFormat.category=_reports
DefaultReportOutputFormat.order=0

_DefaultCountryCode.label=Default Country Code
_DefaultCountryCode.description=The default country code for use in Xadmin.
DefaultCountryCode.datatype=Str
DefaultCountryCode.datatypeParams.0=allowEmptyVal=false
DefaultCountryCode.datatypeParams.0=maxlen=2
DefaultCountryCode.category=_general
DefaultCountryCode.order=0

_general=General
_deployment=Deployment
_userAccount=User Account

# UserPasswordCreation (This isn't in the translations_en.properties because this is used specifically for translating 
# valid values for password types therefore this is handled differently from how keys  are handle in translations_en).
_userPasswordCreation_MANUAL=Manual - Passwords are manually created by the administrator.
_userPasswordCreation_STATIC=Static - A static password is created by the administrator.
_userPasswordCreation_ALGORITHM=Algorithm - Passwords are created for users based on a predetermined algorithm.